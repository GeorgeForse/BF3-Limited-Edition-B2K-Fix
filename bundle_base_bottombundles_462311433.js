/*

  Generated by ESN Planet
  www.esn.me

*/

(function ($, window, undefined) {
    battlereport.personaId = null;
    battlereport.user = null;
    battlereport.tableSorting = [[0, 0]];
    battlereport.friendsRequestsSent = [];
    battlereport.toggleFavoriteButton = new ToggleFavoriteButton();

    battlereport.on("init", function () {});

    battlereport.on("pageshow", function () {
        var generalUrl = $("#battlereport-general-url").val();
        battlereport.personaId = $("#battlereport-player-personaId").val();
        
        if (generalUrl) {
           battlereport.loadGeneral(generalUrl);
        }
        
        // Setup show dnf player listener
        $('#battlereport-teamstats-show-dnf a').pageLive("click", function(e) {
           e.preventDefault();
           $(this).parent().remove();
           $(".battlereport-teamstats-list").addClass("showDNF");
        });
        
        // Load player report on table row click
        $('.battlereport-teamstats-list tbody tr.battlereport-teamstats-player-row, #gunmaster-progress-container .gunmaster-player-wpr div').pageLive("click", function(e) {
           e.preventDefault();
           if (e.target.nodeName === "A" || e.target.nodeName === "BUTTON") { 
               return;
           }
        
           // Mark the selected player in the players table
           battlereport.personaId = $(this).attr("data-personaId");
           battlereport.markSelectedPersona();
        
           // Remove the current player report and load the new one
           $S("battlereport-personalstats").update({"playerReport": null});
           common.initLoadingSpinners();
           if(!$(this).attr("data-path")){
               battlereport.loadPlayer($('.battlereport-teamstats-player-row[data-personaid="' + $(this).attr('data-personaid') + '"]').attr("data-path"));
           } else {
               battlereport.loadPlayer($(this).attr("data-path"));
           }
        });
    });

    battlereport.doSortTables = function() {
        $.tablesorter.addParser({
            id: "squads",
            is: function() { return false; },
            format: function(s) {
                // Sort squad letters (a-z) in inverted alphabetic order, after charCode. (Give empty string 1000 to make sure they end up last)
                return -($.trim(s).toLowerCase().charCodeAt(0) || 1000);
            },
            type: "numeric"
        });

        $('.battlereport-teamstats-list').tablesorter({
            sortInitialOrder: "desc",
            headers: {
                1: { sorter: "squads" },
                2: { sorter: false }
            },
            sortList: battlereport.tableSorting
        }).pageBind("sortEnd", function(e) {
            battlereport.tableSorting = e.target.config.sortList;
        });
    };


    battlereport.loadGeneral = function(url) {
        $.ajax({
            url: url,
            dataType: "json",
            type: "GET",
            complete: base.onComplete(function(success, response) {
                if (success) {

                    response.gameReport = response.gameReport || false;
                    $S("battlereport").update(response);
                    battlereport.toggleFavoriteButton.update({visible: true});

                    common.initLoadingSpinners();
                    battlereport.doSortTables();
                    battlereport.markSelectedPersona();
                    battlereport.markMyFriends();

                    var playerUrl = $("#battlereport-player-url").val();
                    if (playerUrl) {
                        battlereport.loadPlayer(playerUrl);
                    }

                    if (response.gameReport && response.gameReport.gameServer.mapMode == gameServerMapMode.GUNMASTER){
                        serverguide.setupGunMasterReport();
                    }
                }

                comment.fixCommentPlaceHolders();
                // Setup comment pagination
                var reportMetaId = $("#battlereport-comments").attr("data-meta-id"),
                    commentsSurfaceId = "comment" + reportMetaId;
                $("#battlereport").on("click", "#battlereport-comments a[data-url]", function(e){
                    $.get($(this).attr("data-url"), function(response){
                        $S(commentsSurfaceId).update(response);
                    });
                });

                $("#battlereport").on("click", ".gamereport-comment-delete", function(e){
                    popup.prompt({ "header": profile.locales["ID_WEB_SHOWRECEIPT_COMMENT_DELETED_HEADER"]}, function(){
                        var _this = $(this),
                            commentId = _this.attr("data-comment-id"),
                            commentUrl = _this.attr("data-comment-url"),
                            commentElem = _this.parents(".comment-body");

                        $.ajax({
                            url: commentUrl,
                            type: "POST",
                            data: {
                                "post-check-sum": S.globalContext.session.postChecksum,
                                "commentId": commentId
                            },
                            complete: base.onComplete(function (success, response) {
                                if (success && response == "DELETE_SUCCESS") {
                                    var dataMetaId = $("#battlereport-comments").data("meta-id"),
                                        surface = $S("comment"+dataMetaId),
                                        state = surface.getState(),
                                        i;

                                    // Remove comment from current state
                                    for (i = 0; i < state.data.comments.length; i++) {
                                        if (state.data.comments[i].id === commentId) {
                                            state.data.comments.splice(i, 1);
                                            state.data.totalCommentCount--;
                                            break;
                                        }
                                    }

                                    surface.setState(state);

                                    commentElem.fadeOut("fast", function () {
                                        surface.refresh();
                                    });

                                    base.showReceipt(profile.locales["ID_WEB_SHOWRECEIPT_COMMENT_DELETED"], "checkbox");
                                } else {
                                    base.showReceipt(profile.locales["ID_WEB_SHOWRECEIPT_COMMENT_DELETED_ERROR"], "skull");
                                }
                            }, false)
                        });
                    }, this);
                });

                battlereport.bindEvents();
            }, false)
        });


    };

    battlereport.on("pageleave", function() {
        battlereport.unbindEvents();

        $("#battlereport").off("click", "#battlereport-comments a[data-url]");
        $("#battlereport").off("click", ".gamereport-comment-delete");
    });


    battlereport.loadPlayer = function(url) {
        $.ajax({
            url: url,
            dataType: "json",
            type: "GET",
            complete: base.onComplete(function(success, response) {
                if (success) {

                    if (response.playerReport){
                        // We need the user object for the selected player in the surface as well, fetch it from the battlereport state
                        var battlereportState = $S("battlereport").getState();
                        if (battlereportState && battlereportState.gameReport && battlereportState.gameReport.players) {
                            var teams = battlereportState.gameReport.players;
                            for (var team in teams) {
                                for (var player in teams[team]) {
                                    if (response.playerReport.personaId == teams[team][player].personaId && teams[team][player].user){
                                        response.playerReport.user = teams[team][player].user;
                                        response.playerReport.disableAddButton = S.Modifier.contains(battlereport.friendsRequestsSent, response.playerReport.user.userId);
                                    }
                                }
                            }
                        }

                    } else {

                        $("#battlereport-personalstats").hide();
                        response.playerReport = false;
                    }

                    // Update the surface
                    $S("battlereport-personalstats").update(response);

                    $("#battlereport-personal-awards-slider-wrapper").sodaSlider({ centered: false });
                }
            }, false)
        });

    };

    /**
     * Mark squad members for selected
     */
    battlereport.markSelectedPersona = function() {
        if(!battlereport.personaId) return;

        $(".battlereport-teamstats-list .selectedRowSquads").removeClass("selectedRowSquads");
        $(".battlereport-teamstats-list .selected").removeClass("selected");

        var $selected = $(".battlereport-teamstats-list tr.battlereport-teamstats-player-row[data-personaId='" + battlereport.personaId + "']").addClass("selected");
        var currentSquad = $selected.attr("data-squad");
        var $squadMemberRows = $selected.closest(".battlereport-teamstats-list").find("tr.battlereport-teamstats-player-row[data-squad='" + currentSquad + "']");

        if ($squadMemberRows.length > 0) {
            $squadMemberRows.addClass("selectedRowSquads");
        }
        if ($(".gm-progress .players div").length > 0){
            $(".gm-progress .players div").removeClass("selected");
            $('.gm-progress .players div[data-personaid="'+ battlereport.personaId +'"]').addClass("selected").parents('.gunmaster-level-arrow').addClass('darkBg').siblings('.gunmaster-level-arrow').removeClass('darkBg');
        }
    };

    /**
     * Mark which players who are your friends
     */
    battlereport.markMyFriends = function () {
        var friends = comcenter.getFriendsListFromLs();

        for (var i = 0; i < friends.length; i++) {
            $("#battlereport-teamstats div[rel='"+friends[i].userId+"']").parents("tr.battlereport-teamstats-player-row").addClass("myfriend");
            $("#battlereport-playerscore-content div[rel='"+friends[i].userId+"']").addClass("myfriend");
        }
    };

    function ToggleFavoriteButton() {
        var _isLoading = false,
            _this = this;

        function getSurface(){
            return $S('battlereport-actionbuttons');
        }

        function onButtonClick() {
            var btn = $(this);
            if (premium.isPremiumRequiredOn(btn) || _isLoading) return;

            var data = getSurface().getState(),
                newState = !data.isFavorite,
                newFavoriteCount = data.numFavorites + (newState ? 1 : -1);

            // If adding a new favorite and the limit has been reached we need to warn the user about the procedure
            if (newState && newFavoriteCount > data.maxFavorites) {
                popup.render('battlereport.popupConfirmFavorite', {maxFavorites: data.maxFavorites}, true);
                return;
            }

            // Make server request
            _isLoading = true;
            _this.update({enabled: false});
            $.ajax({
                type: 'post',
                url: btn.attr('data-url'),
                cache: false,
                data: {"post-check-sum": S.globalContext.session.postChecksum},
                dataType: 'json',
                success: function() {
                    Surface.log("battlereport success response", arguments);
                    handleResponse(true);
                },
                error: function(xhr) {
                    handleResponse(false, S.parseJSON(xhr.responseText).data);
                }
            });

            function handleResponse(success, data) {
                _isLoading = false;

                // Update button ui
                _this.update(success ? { enabled: true, isFavorite: newState, numFavorites: newFavoriteCount }: { enabled: true });

                // Max favorite limit has been reached (race condition)
                if (!success && data && data.error == "LIMIT_REACHED") {
                    popup.render('battlereport.popupConfirmFavorite', {maxFavorites: data.maxFavorites}, true);
                    return;
                }

                // Show notice
                base.showReceipt(success
                    ? (newState ? battlereport.locales["ID_WEB_BATTLEREPORT_ADDED_TO_FAVORITES"] : battlereport.locales["ID_WEB_BATTLEREPORT_REMOVED_FROM_FAVORITES"])
                    : (newState ? battlereport.locales["ID_WEB_BATTLEREPORT_ADD_TO_FAVORITES_FAILED"] : battlereport.locales["ID_WEB_BATTLEREPORT_REMOVE_FROM_FAVORITES_FAILED"]),
                    success ? receiptTypes.OK : receiptTypes.ERROR
                );
            }
        }

        // Public update method
        this.update = function(state) {
            var surface = getSurface();
            if (!surface.rendered()) return false;
            if (state) surface.update(state);
            else surface.refresh();
            $("#battlereport-actionbuttons-favorite").unbind().click(onButtonClick);
        }
    }
}(jQuery, window));;(function ($, window, undefined) {

    profile.setupLoadouts = function () {
        $("#profile-stats-loadout-action-use").pageLive("click", profile.loadoutUse);
        $("#profile-stats-loadout-action-save-existing").pageLive("click", profile.loadoutSaveExisting);
        $("#profile-stats-loadout-action-save-as").pageLive("click", profile.loadoutSaveAs);

        $("#available-loadout-favourites").pageLive("change", function () {
            var url = $(this).data("url");
            url = url.replace("##LOADOUTID##", $(this).val());
            base.redirect(url);
        });

        profile.loadoutSlider($(".profile-stats-loadout-box-selector-arrow-appearance"), ".profile-stats-loadout-box-selector-appearance-wrapper");
        profile.loadoutSlider($(".profile-stats-loadout-box-selector-arrow-camo"), ".profile-stats-loadout-box-inner-secondary-box-wrapper");
        profile.loadoutSlider($(".profile-stats-loadout-box-selector-arrow"), ".profile-stats-loadout-box-selector-item-wrapper");
        profile.loadoutSlider($(".profile-stats-loadout-box-inner-secondary-box-arrow"), ".profile-stats-loadout-box-inner-secondary-box-item-wrapper");

        $(".profile-stats-loadout-box-selector-item, .profile-stats-loadout-box-inner-secondary-box-item").pageLive("click", function () {
            profile.spawnLoadoutPopup($(this));
        });
    };

    profile.spawnLoadoutPopup = function (element) {
        var $this = element;
        var parentGuid;
        var itemIsAccessory = false;
        var camo = "";
        var $thisParent = $this.parent();

        if ($this.hasClass("profile-stats-loadout-box-inner-secondary-box-item")) {
            itemIsAccessory = true;
        }

        if ($this.parent().parent().hasClass("disable-popup")) {
            return true;
        }

        if ($(".loadout-items-popup").length) {
            return false;
        }
        try {
            camo = $this.siblings(".profile-stats-loadout-box-inner-secondary").find(".weapon-camo").val();
        } catch (e) {
        }

        var itemType = $thisParent.data("type");
        var itemlist = [], getKit;
        var selectedItem = $thisParent.data("key");
        if (itemIsAccessory) {
            getKit = $thisParent.parent().siblings(".profile-stats-loadout-selected-item-accessory-key").data("kit");
        } else {
            getKit = $thisParent.parent().siblings(".profile-stats-loadout-selected-item-key").data("kit");
        }

        switch (itemType) {
            case "gadget1":
            case "gadget2":
                kititemsAll = S.globalContext.kititemsAll;
                weaponsAll = S.globalContext.weaponsAll;
                itemlist = $.merge($.merge([], kititemsAll), weaponsAll);
                popup.render("loadoutitems", { itemsAll: itemlist, slot: $thisParent.data("slot"), kit: $thisParent.data("kit"), "fullslot": $thisParent.data("fullslot"), "selectedItem": selectedItem  }, false, false);
                break;
            case "specialization":
                var itemlist = [];
                for(var x in S.globalContext.soldierspecializationsAll[0]){
                    itemlist[itemlist.length] = S.globalContext.soldierspecializationsAll[0][x];
                }
                itemlist = { 0 : itemlist };
                popup.render("loadoutitems", { showNoSelection: false, itemsAll: itemlist, slot: $thisParent.data("slot"), kit: $thisParent.data("kit"), "fullslot": "ID_M_SOLDIER_SPECIALIZATION", "selectedItem": selectedItem  }, false, false);
                break;
            case "secondary":
            case "primary":
                itemlist = S.globalContext.weaponsAll;
                popup.render("loadoutitems", {  showNoSelection: false, itemsAll: itemlist, slot: $thisParent.data("slot"), kit: getKit, "kitId": getKit, "fullslot": $thisParent.data("fullslot"), selectedItem: selectedItem, camo: camo }, false, false);
                break;
            case "accessory":
                parentGuid = $thisParent.data("parent");
                weaponList = S.globalContext.weaponsAll;

                for (var oi = 0; oi < weaponList.length; oi++) {
                    for (var i = 0; i < weaponList[oi].length; i++) {
                        if (weaponList[oi][i].guid == parentGuid) {
                            try {
                                itemlist = weaponList[oi][i].unlocks;
                            } catch (e) {
                                itemlist = []
                            }
                            break;
                        }
                    }

                    if (itemlist.length > 0) {
                        break;
                    }
                }

                if (itemlist.length == 0) {
                    S.debug("Found no unlocks for this weapon!");
                }

                popup.render("loadoutitems", {  type: "accessory", showNoSelection: false, itemsAll: itemlist, slot: $thisParent.data("slot"), kit: getKit, "kitId": getKit, "fullslot": $thisParent.data("slot"), selectedItem: selectedItem }, false, false);
                break;
            default:
                itemlist = S.globalContext.vehicleUnlocksAll;
                popup.render("loadoutitems", { itemsAll: itemlist, slot: $thisParent.data("slot"), kit: $thisParent.data("kit"), "fullslot": "vehicle", "selectedItem": selectedItem  }, false, false);
                break;
        }

        $(".profile-stats-loadout-box-selector-item-wrapper-special").pageBind("click", function () {
            var oi, i;
            var $t = $(this);
            var slot = $t.data("slot");
            var kit = $t.data("kit");
            var itemkit = $t.data("itemkit");
            var guid = $t.data("key");
            var itemType = $t.data("itemtype");
            var itemData;
            if (slot == "primary" || slot == "secondary") {
                itemType = "weapon";
            }
            switch (itemType) {
                case "weapon":
                case "gadget1":
                case "gadget2":
                    for (oi = 0; oi < itemlist.length; oi++) {
                        for (i = 0; i < itemlist[oi].length; i++) {
                            if (itemlist[oi][i].guid == guid) {
                                itemData = itemlist[oi][i];
                                break;
                            }
                        }
                        if (itemData !== undefined) {
                            break;
                        }
                    }
                    break;
                case "specialization":
                    for (i in itemlist){
                        for (var key in itemlist[i]){
                            if (itemlist[i][key].guid == guid) {
                                itemData = itemlist[i][key];
                                break;
                            }
                        }
                    }

                    break;
                case "accessory":
                    for (i = 0; i < itemlist.length; i++) {
                        if (itemlist[i].unlockId == guid) {
                            itemData = itemlist[i];
                            break;
                        }
                    }
                    if (itemData !== undefined) {
                        break;
                    }
                    break;
                default:
                    // Default is vehicle
                    itemType = "vehicle";
                    for (oi = 0; oi < itemlist[kit][slot].length; oi++) {
                        for (i = 0; i < itemlist[kit][slot][oi].length; i++) {
                            if (itemlist[kit][slot][oi][i].unlockId == guid) {
                                itemData = itemlist[kit][slot][oi][i];
                                break;
                            }
                        }
                        if (itemData !== undefined) {
                            break;
                        }
                    }
                    break;
            }

            var infoSurf = "loadout-extras-info";
            if (itemType == "accessory") {
                infoSurf = "loadout-extras-info-accessory";
            } else if (itemType == "vehicle") {
                infoSurf = "loadout-extras-info-vehicle";
            }

            /* Elusive Surface bug makes this necessary, or S.globalContext.weaponsAll[x][y].weaponData gets overwritten */
            var itemDataCopy = jQuery.extend(true, {}, itemData);

            $S(infoSurf).update({itemType: itemType, itemId: guid, dimmed: $t.children(":last").hasClass("dimmed"), itemData: itemDataCopy, kitId: getKit, camo: camo });
            $(this).addClass("selected").siblings().removeClass("selected");

            $("#loadout-close-button").bind("click", function () {
                var $this2 = $(".profile-stats-loadout-box-selector-item-wrapper-special.selected");
                var slot2 = $this2.data("slot");
                var kit2 = $this2.data("kit");
                var itemkit2 = $this2.data("itemkit");
                var guid2 = $this2.data("key");
                var itemType2 = $this2.data("itemtype");
                var selectedItem2;
                if (slot2 == "primary" || slot2 == "secondary") {
                    itemType2 = "weapon";
                }

                switch (itemType2) {
                    case "pilot active":
                    case "pilot passive":
                    case "pilot stance":
                    case "gunner active":
                    case "gunner passive":
                    case "gunner stance":
                    case "active":
                    case "passive":
                    case "stance":
                        $(".profile-stats-loadout-selected-vehicle-key[data-kit='" + kit2 + "'][data-slot='" + slot2 + "']").val(guid2);
                        //selectedItem2 = $(".profile-stats-loadout-box-selector-item-wrapper[data-key='" + guid2 + "'][data-slot='" + slot2 + "'][data-itemkit='" + itemkit2 + "'][data-kit='" + kit + "']").siblings(".profile-stats-loadout-box-selector-item-wrapper.selected").removeClass("selected").css("left", "-100%").end().addClass("selected").css("left", 0);
                        selectedItem2 = $(".profile-stats-loadout-box-selector-item-wrapper[data-key='" + guid2 + "'][data-slot='" + slot2 + "'][data-kit='" + kit + "']").siblings(".profile-stats-loadout-box-selector-item-wrapper.selected").removeClass("selected").css("left", "-100%").end().addClass("selected").css("left", 0).show();
                        break;
                    case "specialization":
                        $(".profile-stats-loadout-selected-item-key[data-kit='" + kit2 + "'][data-slot='" + slot2 + "']").val(guid2);
                        selectedItem2 = $(".profile-stats-loadout-box-selector-item-wrapper[data-key='" + guid2 + "'][data-slot='" + slot2 + "'][data-itemkit='0'][data-kit='" + kit2 + "']").siblings(".profile-stats-loadout-box-selector-item-wrapper.selected").removeClass("selected").css("left", "-100%").end().addClass("selected").css("left", 0).show();
                        break;
                    case "accessory":
                        $(".profile-stats-loadout-box-inner-secondary-box-item-wrapper[data-type='accessory'][data-kit='" + kit2 + "'][data-parent='" + parentGuid + "'][data-slot'" + slot2 + "'][data-key='" + guid2 + "']").siblings(".profile-stats-loadout-box-inner-secondary-box-item-wrapper.selected").removeClass("selected").css("left", "-100%").end().addClass("selected").css("left", 0);
                        var kitlist = [1,2,8,32];
                        for(var k in kitlist){
                            $(".profile-stats-loadout-selected-item-accessory-key[data-kit='" + kitlist[k] + "'][data-parent='" + parentGuid + "'][data-slot='" + slot2 + "']").val(guid2);
                        }
                        break;
                    default:
                        $(".profile-stats-loadout-selected-item-key[data-kit='" + kit2 + "'][data-slot='" + slot2 + "']").val(guid2);
                        selectedItem2 = $(".profile-stats-loadout-box-selector-item-wrapper[data-key='" + guid2 + "'][data-slot='" + slot2 + "'][data-itemkit='" + (guid2 ? itemkit2 : getKit) + "'][data-kit='" + kit2 + "']").siblings(".profile-stats-loadout-box-selector-item-wrapper.selected").removeClass("selected").css("left", "-100%").end().addClass("selected").css("left", 0).show();
                        break;
                }

                // Update the counter
                if (selectedItem2) {
                    var wrapper = selectedItem2.parent();
                    wrapper[0].count_container.text((selectedItem2.index() + 1) + "/" + wrapper[0].total_count);
                }

                profile.indicateLoadoutChange();
            });
        });
        $(".profile-stats-loadout-box-selector-item-wrapper-special.selected").trigger("click");
    };


    profile.loadoutScrollSticky = function () {
        S.C.base.stickify($("#profile-stats-loadout-header"), $("#profile-stats-loadout-header-sticky-content"));
    };

    profile.indicateLoadoutChange = function () {
        $("#profile-stats-loadout-action-use").attr("disabled", false);
    };

    profile.loadoutSlider = function ($arrows, itemsSelectorString) {
        $arrows.pageLive("click", function (e) {
            e.preventDefault();
            var $this = $(this);
            var $wrapper = $this.parent();
            var $slideWrapper = $wrapper;
            var goLeft = $this.hasClass("arrow-left");

            if ($wrapper.find(itemsSelectorString).length < 2) {
                return;
            }

            var selected_item = $wrapper.find(itemsSelectorString).filter('.selected');
            var item_slot = selected_item.attr("data-slot");
            var item_type = selected_item.attr("data-type");
            var item_name = item_slot == item_type ? item_slot : [item_type, item_slot.split(" ").join(".")].join(".");

            if(item_name){
                $.ga.trackClickEvent(["loadout.slider", item_name].join('.'));
            }

            if (goLeft) {
                $wrapper.removeClass("next-right").addClass("next-left");
            } else {
                $wrapper.removeClass("next-left").addClass("next-right");
            }

            var $current;
            if ($wrapper.hasClass("profile-stats-loadout-weapon-camo")) {
                $wrapper = $(".profile-stats-loadout-box-selector-wrapper[data-current='" + $wrapper.data('itemId') + "']");
                $current = $(".profile-stats-loadout-weapon-camo .profile-stats-loadout-box-inner-secondary-box-wrapper.selected");
            } else {
                $current = $wrapper.find(itemsSelectorString + ".selected");
            }
            var $trueKit = $wrapper.siblings(".profile-stats-loadout-selected-item-key").data("kit")
                , $next = [];

            if (goLeft) {
                $next = $current.prev(itemsSelectorString);
            } else {
                $next = $current.next(itemsSelectorString);
            }

            if ($next.length === 0) {
                $next = $slideWrapper.find(itemsSelectorString + ":" + (goLeft ? "last" : "first"));
            }
            var itemKey = $next.data("key");
            var itemKit = $next.data("kit");
            var itemSlot = $next.data("slot");
            if ($next.data("type") === "accessory") {
                var itemParent = $next.data("parent");
                // add [data-kit='" + itemKit + "'] if we only want to change for the particular kit
                $(".profile-stats-loadout-selected-item-accessory-key[data-parent='" + itemParent + "'][data-slot='" + itemSlot + "']").val(itemKey);
            } else if ($next.data("type") === "vehicle") {
                $(".profile-stats-loadout-selected-vehicle-key[data-kit='" + itemKit + "'][data-slot='" + itemSlot + "']").val(itemKey);
            } else if ($next.data("type") === "appearance") {
                $(".profile-stats-loadout-selected-item-key[data-kit='" + itemKit + "'][data-slot='" + itemSlot + "']").val(itemKey);
            } else {
                $(".profile-stats-loadout-selected-item-key[data-kit='" + $trueKit + "'][data-slot='" + itemSlot + "']").val(itemKey);
            }

            profile.indicateLoadoutChange();

            if ($wrapper.hasClass("profile-stats-loadout-box-selector-wrapper")) {
                $current.css("left", "0%").show().removeClass("selected");

                if (goLeft) {
                    $next.css("left", "-100%");
                    $current.stop(true, true, true).animate({
                        left: "100%"
                    }, 250, function () {
                        $current.hide().css("left", "");
                    });
                } else {
                    $next.css("left", "100%");
                    $current.stop(true, true, true).animate({
                        left: "-100%"
                    }, 250, function () {
                        $current.hide().css("left", "");
                    });
                }

                $next.show().addClass("selected").stop(false, false, false).animate({
                    left: "0%"
                }, 250, function () {
                });

                // Update the counter
                $wrapper[0].count_container.text(($next.index() + 1) + "/" + $wrapper[0].total_count);

            } else {
                $current.removeClass("selected");
                $next.addClass("selected");
            }
        });
    };

    profile.initLoadoutCounters = function () {
        // Find all slider containers
        $(".profile-stats-loadout-box:has(.profile-stats-loadout-box-selector-arrow)").each(function () {
            var wrapper = $(this).find(".profile-stats-loadout-box-selector-arrow").first().parent(),
                sel = wrapper.children(".selected").first();

            // Store total count and count container in the wrapper object, to save some work when updating
            wrapper[0].total_count = wrapper.find(".profile-stats-loadout-box-selector-item-wrapper").size();
            wrapper[0].count_container = $("<span/>").text((sel.index() + 1) + "/" + wrapper[0].total_count);

            $(this).find("h2").append(wrapper[0].count_container);
        });
    };

    profile.loadoutSerialize = function () {
        var $items = $(".profile-stats-loadout-selected-item-key")
            , $itemAccessories = $(".profile-stats-loadout-selected-item-accessory-key")
            , $vehicles = $(".profile-stats-loadout-selected-vehicle-key")
            , _items = {}
            , _itemAccessories = {}
            , _vehicles = {};

        $vehicles.each(function () {

            var $this = $(this);

            // Think this is the correct way of finding out current selected weapon unlock?
            //if($this.val().length < 1)
            {
                var keytest = $this.siblings(".profile-stats-loadout-box-selector-wrapper").find(".profile-stats-loadout-box-selector-item-wrapper.selected").data("key");
                $this.val(keytest);
            }

            _vehicles || (_vehicles = {});
            _vehicles[$this.data("kit")] || (_vehicles[$this.data("kit")] = {});

            _vehicles[$this.data("kit")][$this.data("slot")] = $this.val();
        });

        $items.each(function () {
            var $this = $(this);
            _items[$this.data("loadouts")] || (_items[$this.data("loadouts")] = {});
            _items[$this.data("loadouts")][$this.data("kit")] || (_items[$this.data("loadouts")][$this.data("kit")] = {});
            _items[$this.data("loadouts")][$this.data("kit")][$this.data("slot")] = $this.val();
        });
        var relevantAccessoryParents = [];
        $(".profile-stats-loadout-selected-item-key").each(function () {
            relevantAccessoryParents.push($(this).val());
        });

        if (_items["kits"]["32"]["gadget2"] == "0")
        {
            // Special case for empty slot in gadget2, support class.
            _items["kits"]["32"]["gadget2"] = $('.filterByKit_32 div[data-fullslot="ID_M_SOLDIER_GADGET2"]').length -1 ;
        }
        if (_items["kits"]["1"]["gadget2"] == "0")
        {
            // Special case for empty slot in gadget2, Assault class.
            _items["kits"]["1"]["gadget2"] = $('.filterByKit_1 div[data-fullslot="ID_M_SOLDIER_GADGET2"]').length -1 ;
        }

        $itemAccessories.each(function () {
            var $this = $(this);
            _itemAccessories || (_itemAccessories = {});
            _itemAccessories[$this.data("parent")] || (_itemAccessories[$this.data("parent")] = {});
            _itemAccessories[$this.data("parent")][$this.data("slot")] = $this.val();

        });
        return { "items": _items, "accessories": _itemAccessories, "vehicles": _vehicles };
    };

    profile.loadoutSave = function (e, name) {
        e.preventDefault ? e.preventDefault() : e.returnValue = false;
        S.log("Saving loadout...");

        $.ajax({
            url: $("#profile-stats-loadout-save-path").val(),
            type: "post",
            data: {
                "post-check-sum": S.globalContext.session.postChecksum,
                "name": (name || $("#profile-stats-loadout-header-title").text()),
                "id": $("#loadout-loadoutId").val(),
                "loadout": S.encodeJSON(profile.loadoutSerialize())
            },
            complete: base.onComplete(function (success, response) {
                S.log(success, response);
                if (success) {
                    $.ga.trackClickEvent("loadout.save.new.success");
                    base.showReceipt(profile.locales["ID_WEB_SHOWRECEIPT_LOADOUT_SAVED"], 'checkbox');
                    base.redirect(response.message.redirectUrl);
                } else {
                    $.ga.trackClickEvent("loadout.save.new.fail");
                    base.showReceipt(profile.locales["ID_WEB_SHOWRECEIPT_LOADOUT_SAVE_FAIL"], 'skull');
                }
            })
        });
    };

    profile.loadoutSaveExisting = function () {
//        e.preventDefault ? e.preventDefault() : e.returnValue = false;
        S.log("Saving existing loadout...");

        $.ajax({
            url: $("#profile-stats-loadout-save-path").val(),
            type: "post",
            data: {
                "post-check-sum": S.globalContext.session.postChecksum,
                "id": $("#loadout-loadoutId").val(),
                "loadout": S.encodeJSON(profile.loadoutSerialize())
            },
            complete: base.onComplete(function (success, response) {
                S.log(success, response);
                if (success) {
                    $.ga.trackClickEvent("loadout.save.existing.success");
                    base.showReceipt(profile.locales["ID_WEB_SHOWRECEIPT_LOADOUT_SAVED"], 'checkbox');
                } else {
                    $.ga.trackClickEvent("loadout.save.existing.fail");
                    base.showReceipt("Loadout failed to save", 'skull');
                }
            })
        });
    };


    profile.loadoutUse = function () {

        S.log("Using loadout...");
        $("#profile-stats-loadout-action-use").attr("disabled", true);

        $.ajax({
            url: $("#profile-stats-loadout-use-path").val(),
            type: "post",
            data: {
                "post-check-sum": S.globalContext.session.postChecksum,
                "loadout": S.encodeJSON(profile.loadoutSerialize())
            },
            complete: base.onComplete(function (success, response) {
                S.log(success, response);
                if (success) {
                    $.ga.trackClickEvent("loadout.use.success");
                    base.showReceipt("This loadout is now being used!", 'checkbox');
                } else {
                    $.ga.trackClickEvent("loadout.use.fail");
                    base.showReceipt("Failed to apply loadout", 'skull');
                    $("#profile-stats-loadout-action-use").attr("disabled", false);
                }
            })
        });
    };

    profile.loadoutSaveAs = function (e) {
        // Show user a "select name" popup and continue when the user press OK
        popup.render("loadoutsaveas", { });
        $(".loadout-saveas-popup form input[type=submit]").click(function (e) {
            e.preventDefault();
            var name = $("#loadout-saveas").val();
//            $("#loadout-loadoutId").val("");
            var popup_id = $("div.loadout-saveas-popup").attr("id");
            profile.loadoutSave(e, name);

            popup.closePopup(popup_id);
        });
    };

}(jQuery, window));;(function ($, window, undefined) {

    profile.flags = [];

    profile.getBlazeClubs = function () {
        var container = $(".profile-platoons");
        if (container.length) {
            var url = container.data("url");
            if (url) {
                $.ajax({
                    url: url,
                    dataType: "json",
                    type: "GET"
                }).complete(
                        base.onComplete(function (success, response) {
                            // Populate platoons container
                            $S("profile-blazeclubs").update({"blazeClubs": response.data.clubs});

                            // Show potentially hidden platoons section
                            if (response.data.clubs.length > 0) {
                                $("#profile-platoons").show();
                            }
                        })
                    );
            }
        }
    };

    profile.updateDogtagSort = function(type,isCriteria){
        var arrFilters = [];
        var filters = '';
        if(!type || isCriteria){
            arrFilters = type.split(',');
            type = $("#profile-dogtags-type-filter").find('.selected .filter-option').attr('data-filter');
        } else {
            arrFilters = $("#profile-dogtags-criteria-filter").find('.selected .filter-option').attr('data-filter').split(',');
        }
        for(var i=0; i < arrFilters.length;i++){
            if(i != 0){
                filters += ',';
            }
            filters += type + arrFilters[i].trim();
        }
        if(filters == '**'){
            filters = '*';
        }
        $('#dogtags-list-isotope').isotope({ filter: filters});
    };

    profile.openOriginFriendsImport = function (originUrl) {

        var newwindow = window.open(null, 'Import Friends', 'height=420,width=701');
        var url = "";
        if (S.globalContext.staticContext.sslAvailable) {
            url += S.globalContext.staticContext.currentHostSecure;
        }
        else {
            url += S.globalContext.staticContext.currentHost;
        }
        url += "/" + base.gameToSection(S.globalContext.realm.section) + "/launcher/token/";

        var ajaxOptions = { url: url, dataType: "jsonp",
            success: function (response) {
                newwindow.document.location = originUrl + '/web/importFriendsFromWeb?authToken=' + response.data['authToken'];
                if (window.focus) {
                    newwindow.focus();
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                base.showReceipt(profile.locales["ID_WEB_SHOWRECEIPT_ORIGIN_TOKEN_NOT_FOUND"], "skull");
                newwindow.close();
            }
        };
        $.ajax(ajaxOptions);
    };

    profile.showAddFriends = function (e) {
        if ($("#profile-friends-content").length < 1) {
            return;
        }

        var friends = comcenter.getFriendsListFromLs();
        var displayedFriends = $S('profile_friends_list').getState().friends;

        for (var i = 0; i < displayedFriends.length; i++) {
            var showMe = true;
            for (var j = 0; j < friends.length; j++) {
                if (friends[j].userId == displayedFriends[i].userId) {
                    showMe = false;
                    break;
                }
            }
            if (showMe) {
                $("#profile_friends_list_" + displayedFriends[i].userId + " .profile-add-friend-friendlist").show();
            }
        }
    };

    profile.handleUserRemovedFriend = function (e) {
        $('.mayaddfriends').addClass('yes');
        //$S("profileFriends").remove({userId: e.data.friendUserId});
    };

    profile.setProfilePortrait = function (current_portrait) {
        var $container = $("#soldierportraits-container");
        var $portraits = $container.find("li");
        if (current_portrait) {
            $portraits.removeClass("selected");
            $("#" + current_portrait).addClass("selected");
        }
        if ($portraits.filter(".selected").length == 0) {
            $portraits.not(".disabled").first().addClass("selected");
        }

        $portraits.click(function () {
            var $this = $(this);
            if ($this.hasClass("disabled")) {
                return false;
            }
            $portraits.removeClass("selected");
            $this.addClass("selected");
        });

        $(".popup-soldierportrait").find("form").submit(function(e) {
            e.preventDefault();

            var soldier_id = $container.find("input#soldier").attr("value");
            var soldier_game_id = $container.find("input#soldierGameId").attr("value");
            var soldier_portrait = $portraits.filter(".selected").attr("id");

            var soldier_img_html = $S("profile.showsoldierpic").render({
                "picture": soldier_portrait,
                "size": "small",
                "game": soldier_game_id
            });

            var $li = $("li#" + soldier_id + "[data-soldierGame='" + soldier_game_id + "']");
            $li.find("div.profile-solder-picture").html(soldier_img_html);
            $li.find("input.soldier-picture-input").val(soldier_portrait);

            popup.closePopup($("div.popup-soldierportrait").attr("id"));

            return true;
        });
    };

    /**
     *  Show/Create/Edit Dog tags page
     */
    profile.showDogTags = function (dogtag1_image, dogtag2_image) {
        if ($("#createdogtag").length) {
            var dogtag1, dogtag1_bg, dogtag2, dogtag2_bg;

            function put_name_on_dogtag(imgUrl) {
                var font_size = 21;
                var font_weight = "normal";
                var persona_clan_tag = $("#createdogtag #profile-dogtags-form-tag").val();
                var persona_display_name = $("#createdogtag #profile-dogtags-form-persona").val();
                if (persona_display_name.length > 13) {
                    font_size = 15;
                    font_weight = "bold";
                }

                if (persona_clan_tag.length > 0) {
                    persona_clan_tag = "[" + persona_clan_tag + "]";
                    persona_display_name = persona_clan_tag + "\n" + persona_display_name;
                }

                var dogtag_highlight = dogtag1.text(83, 97, persona_display_name);
                var dogtag_name = dogtag1.text(81, 95, persona_display_name);

                dogtag_highlight.attr({ "font-size": font_size, "font-weight": font_weight, "font-family": "Arial", "text-anchor": "start", "fill": "#ffffff", "opacity": "0.6" });
                dogtag_name.attr({ "font-size": font_size, "font-weight": font_weight, "font-family": "Arial", "text-anchor": "start", "fill": "#353535", "opacity": "0.7" });

                var isPremiumTag = function(image) {
                    return image.indexOf("premium") != -1;
                };
                if(isPremiumTag(imgUrl)) {
                    dogtag_name.attr("fill", "#ffdf7a");
                    dogtag_highlight.attr({"fill": "#000000"});
                }
                dogtag_name.rotate(10);
                dogtag_highlight.rotate(10);
            }

            function put_stat_on_dogtag(stat_name, stat_value) {
                if (stat_name && stat_value) {
                    var stat_text = stat_value + "\n" + stat_name;
                    var dogtag_highlight = dogtag2.text(237, 107, stat_text);
                    var dogtag_name = dogtag2.text(235, 105, stat_text);

                    dogtag_highlight.attr({ "font-size": 16, "font-family": "Arial", "text-anchor": "end", "fill": "#ffffff", "opacity": "0.6" });
                    dogtag_name.attr({ "font-size": 16, "font-family": "Arial", "text-anchor": "end", "fill": "#353535", "opacity": "0.7" });
                }
            }

            /**
             * Show first big dogtag by looking at what is selected in the list
             */
            function show_first_selected_dogtag() {
                if ($(".stats-dogtags-list").length) $(".first-dogtag .stats-dogtags-list .selected").trigger("click");
                else $("div#first-dogtag .profile-dogtags-dogtagslist li.profile-dogtags-dogtag.selected").trigger("click");
            }

            /**
             * Show second big dogtag by looking at what is selected in the list
             */
            function show_second_selected_dogtag() {
                if ($(".stats-dogtags-list").length) $(".second-dogtag .stats-dogtags-list .selected").trigger("click");
                else $("div#second-dogtag .profile-dogtags-dogtagslist li.profile-dogtags-dogtag.selected").trigger("click");
            }

            // Use Raphael JS to make the big dog tags and add some text to them
            $.getScript(base.asset("/public/profile/bf3/raphael-min.js"), function () {
                dogtag2 = Raphael("dogtag2-render", 320, 200, 0, 0);
                dogtag1 = Raphael("dogtag1-render", 320, 200, 0, 0);

                if (dogtag1_image && dogtag2_image) {    // Show these dogtags
                    dogtag2_bg = dogtag2.image(dogtag2_image, 10, 0, 256, 148);
                    var stat_name = $("#dogtag2-render").data("statunit");
                    var stat_value = $("#dogtag2-render").data("statvalue");
                    put_stat_on_dogtag(stat_name, stat_value);

                    var rotate = true;
                    /*!  */
                    if (S.globalContext["realm"]["game"] == games.WARSAW){
                        rotate = true;
                    };
                    /*!  */
                    if (rotate){
                        dogtag1_bg = dogtag1.image(dogtag1_image, 10, 20, 256, 148);
                        dogtag1_bg.rotate(10);
                    } else {
                        dogtag1_bg = dogtag1.image(dogtag1_image, 10, 0, 278, 191);
                    }

                    put_name_on_dogtag(dogtag1_image);
                } else {
                    show_second_selected_dogtag();    // Important to show second dogtag before first overlapping one
                    show_first_selected_dogtag();     // due to some bug in Internet Explorer 8 and Raphael JS?
                }
            });

            $("#first-dogtag .common-box-tab-content:not(:first)").hide();
            $("#second-dogtag .common-box-tab-content:not(:first)").hide();

            $("#createdogtag .common-box-tab-content li, .stats-dogtags-list li").click(function (e) {
                var $this = $(this);
                var $this_id = $this.attr("id");
                var $this_img = $this.data("image");
                var $this_index = $this.data("index");
                $this.siblings().removeClass("selected");
                $this.addClass("selected");

                if ($this.data("side") == 1) {
                    dogtag1.clear();
                    var rotate = true;
                    /*!  */
                    if (S.globalContext["realm"]["game"] == games.WARSAW){
                        rotate = true;
                    };
                    /*!  */
                    if (rotate){
                        dogtag1_bg = dogtag1.image($this_img, 10, 20, 256, 148);
                        dogtag1_bg.rotate(10);
                    } else {
                        dogtag1_bg = dogtag1.image($this_img, 10, 0, 278, 191);
                    }

                    put_name_on_dogtag($this_img);
                    $("#createdogtag #profile-dogtags-form-basic").val($this_index);
                }
                else {
                    var dogtag_stat_name = $this.data("statunit");
                    var dogtag_stat_value = $this.data("statvalue");

                    dogtag2.clear();
                    dogtag2_bg = dogtag2.image($this_img, 10, 0, 256, 148);

                    if (dogtag_stat_name && dogtag_stat_value) {
                        put_stat_on_dogtag(dogtag_stat_name, dogtag_stat_value);
                    }

                    $("#createdogtag #profile-dogtags-form-advanced").val($this_index);
                    show_first_selected_dogtag();    // Need to re-render this again due to a bug in Internet Explorer 8
                }
            });

            $("#createdogtag .common-box-tab-nav li div").click(function (e) {
                $this = $(this);
                $this.parent().siblings().removeClass("selected");
                $this.parent().addClass("selected");

                tab_dog_tag_category = $this.data("dt-category");

                if (tab_dog_tag_category == "") { // all
                    $this.parents(".common-box-tab").find(".profile-dogtags-dogtagslist li.profile-dogtags-dogtag").show();
                } else if (tab_dog_tag_category == "DTC_Ribbons") {
                    // We're gonna add DTC_Medals to the DTC_Ribbons category
                    $this.parents(".common-box-tab").find(".profile-dogtags-dogtagslist li.profile-dogtags-dogtag").hide();
                    $this.parents(".common-box-tab").find(".profile-dogtags-dogtagslist li.profile-dogtags-dogtag.profile-dogtags-category-DTC_Ribbons").show();
                    $this.parents(".common-box-tab").find(".profile-dogtags-dogtagslist li.profile-dogtags-dogtag.profile-dogtags-category-DTC_Medals").show();
                } else {
                    $this.parents(".common-box-tab").find(".profile-dogtags-dogtagslist li.profile-dogtags-dogtag").hide();
                    $this.parents(".common-box-tab").find(".profile-dogtags-dogtagslist li.profile-dogtags-dogtag.profile-dogtags-category-" + tab_dog_tag_category).show();
                }
            });

            $("#dogtag-set form").submit(function (e) {
                e.preventDefault();
                var $this = $(this);

                $.ajax({
                    url: $this.attr("action"),
                    dataType: "json",
                    type: "POST",
                    data: $this.serialize(),
                    complete: base.onComplete(function (success, response) {
                        if (success) {
                            base.showReceipt(profile.locales["ID_WEB_SHOWRECEIPT_DOGTAGS_SAVED"], 'checkbox');
                        }
                    }, false)
                });
            });

            $('#dogtags-list-isotope').isotope({
                layoutMode: 'fitRows',
                itemSelector: '.dogtag-item',
                //sortBy: 'alphabetical',
                animationEngine: 'css',
                filter: '*',
                sortAscending: true,
                getSortData: {
                    unlocked : function($element){
                        var name = $element.find('.dogtag-name').text();
                        if($element.hasClass('unlocked')){
                            return '0 ' + name;
                        } else {
                            return '1 ' + name;
                        }
                    },
                    alphabetical: function($element) {
                        var name = $element.find('.dogtag-name'),
                            itemText = name.length ? name : $element;
                        return itemText.text();
                    }
                }
            });
        }
    };

    profile.toggleSelectAllFrends = function () {
        var obs = $.find('#friendRequestForm input:checkbox');
        if (!$('#selectall').attr('checked')) {
            $(obs).attr('checked', false);
            $('#selectall').attr('checked', false);
        } else {
            $(obs).attr('checked', true);
            $('#selectall').attr('checked', true);
        }
    };



    /**
     * Assignments
     */
    profile.bindAssignments = function () {
        $(".assignments_list .container").pageLive("click", function () {
            var $this = $(this);
            var assignment_id = $this.attr("id");
            var expansion_id = $this.data("expansion");

            $this.closest(".assignments_list").find(".container").removeClass("active");
            $this.addClass("active");

            $S("assignment-" + expansion_id).update({"show_assignment": assignment_id});
        });

        var headerOffset = $("#base-header").height();
        $('#assignments-progress a').pageLive('click', function (e) {
            e.preventDefault();
            var scroll_destination = $(this).attr('href'),
                offset = $(scroll_destination).offset().top - headerOffset;

            $.scrollTo(offset, 800);
        });
    };

    profile.soldierStatsFetch = function () {
        var soldierStatsFetch = $("#profile-stats-fetch-url");
        if (soldierStatsFetch.length && soldierStatsFetch.attr("url")) {
            var url = soldierStatsFetch.attr("url");
            soldierStatsFetch.removeAttr("url");
            $.ajax({
                url: url,
                dataType: "json",
                type: "GET",
                complete: base.onComplete(function (success, response) {
                    if (success) {

                        // Get the personaName from the view
                        if ($(".profile-venicestats-header-soldier-info-name span").length){
                            response.data.personaName = $.trim($(".profile-venicestats-header-soldier-info-name span").text());
                        } else if ($(".soldier-info-name span").length){
                            response.data.personaName = $.trim($(".soldier-info-name span").text());
                        }

                        var html = $S(response.data.statsTemplate).render(response.data);
                        soldierStatsFetch.replaceWith($(html));

                        $(".profile-stats-type-container .statisticstable").each(function () {
                            var $this = $(this),
                                my_headers = {},
                                tableId = $this.attr("id");

                            $this.find("th.nosort").each(function () {
                                my_headers[$(this).index()] = { sorter: false };
                            });

                            // Store current sorting in a global variable
                            if (!window.tablesort) window.tablesort = [];

                            $this.tablesorter({
                                sortList: [((tableId && window.tablesort[tableId]) ? window.tablesort[tableId] : [0, 0])],
                                sortInitialOrder: "desc",
                                headers: my_headers,
                                textExtraction: function (node) {
                                    var $node = $(node);
                                    var nodeAttr = $node.attr("data-sort-value");
                                    if (typeof nodeAttr !== 'undefined' && nodeAttr !== false) {
                                        return nodeAttr;
                                    } else if ($node.find(".common-percentbar-container").length > 0 && $node.find(".item-object[data-count]").length > 0) {
                                        var myProgress = parseInt($node.find(".common-percentbar-container:first div").css("width"), 10) / 100;
                                        myProgress += parseInt($node.find(".item-object").attr("data-count"), 10);
                                        return myProgress;
                                    } else if ($node.find(".common-percentbar-container").length > 0) {
                                        return $node.find(".common-percentbar-container:first div").css("width").replace("px", "");
                                    } else if ($node.find(".item-object").length > 0) {
                                        if ($.trim($node.find(".item-object").text()) == "-") {
                                            return "-100.0%";
                                        } else {
                                            return $.trim($node.find(".item-object").text());
                                        }
                                    } else if ($node.find("p.item-name").length > 0) {
                                        return $.trim($node.find("p.item-name").text());
                                    } else {
                                        return $node.text();
                                    }
                                }
                            });
                            $this.bind("sortEnd",function(e) {
                                var table = $(this),
                                    tableId = table.attr("id");
                                if ($(".headerSortDown", table).length){
                                    window.tablesort[tableId] = [$(".headerSortDown", table).index(), 0];
                                } else if ($(".headerSortUp", table).length){
                                    window.tablesort[tableId] = [$(".headerSortUp", table).index(), 1];
                                }
                            });

                        });

                        profile.showDogTags($("#dogtag1-render").data("url"), $("#dogtag2-render").data("url"));
                        profile.setupLoadouts();

                        common.initFlags();
                        common.initKitSpinners();
                        common.initPressureMeters();
                        base.scrollToAnchor();

                        if ($("#profile-stats-loadout-header-sticky-content").length) {
                            profile.loadoutScrollSticky();
                        }

                        if ($(".assignments-container").length) {
                            var $header = $("#base-header"),
                                offset = $header.find(".community-bar").height() + $header.find(".game-bar").height();
                            $(".col-2.assignments_details:first").sticky(".assignments-group");
                        }
                    }
                }, false)
            });
        }
    };


    profile.on("pageshow", function (e) {
        profile.soldierStatsFetch();

        var dogtagBodyFetch = $("#dogtag-create-fetch-url");
        if (dogtagBodyFetch.length) {
            var createdogtagUrl = dogtagBodyFetch.data("url");
            $.ajax({
                url: createdogtagUrl,
                dataType: "json",
                type: "GET",
                complete: base.onComplete(function (success, response) {
                    if (success) {
                        var context = response.data;
                        var dogtagGameData = $S.callFunction("gamedata.get", S.globalContext.realm.section, "dogtag");
                        context["dogtags"] = dogtagGameData['dogtags'];
                        var html = $S(response.data.template).render(context);
                        dogtagBodyFetch.replaceWith($(html));

                        profile.showDogTags($("#dogtag1-render").data("url"), $("#dogtag2-render").data("url"));
                    }
                }, false)
            });
        }

        $("#profile-dogtags-type-filter").find('.filter-option').pageLive("click", function () {
            profile.updateDogtagSort($(this).attr('data-filter'),false);
        });

        $("#profile-dogtags-criteria-filter").find('.filter-option').pageLive("click", function(){
            profile.updateDogtagSort($(this).attr('data-filter'),true);
        });

        $(".profile-button-chat").pageLive("click", function () {
            var userId = $(this).data('userId');
            S.debug("Opening chat through profile with " + userId);
            $("#comcenter-" + userId).click();
        });

        $("#profile-main-column").pageDelegate("#friendRequestForm", "submit", function (e) {
            e.preventDefault();
            $.ajax({
                url: $("#friendRequestForm").attr("action"),
                dataType: "json",
                type: "POST",
                data: $("#friendRequestForm").serialize(),
                complete: base.onComplete(function (success, response) {
                    switch (response.message) {
                        case "OK":
                            if (response.data["success"].length) {
                                base.showReceipt(response.data["success"].length + " " + profile.locales["ID_WEB_SHOWRECEIPT_NUM_REQUESTS_SENT_SUCCESSFULLY"], "checkbox");
                            }

                            for (var lst in response.data["errors"]) {
                                var err = response.data["errors"][lst];

                                switch (err.error) {
                                    case "FRIENDSHIPREQUEST_EXISTS":
                                        base.showReceipt(
                                            profile.locales["ID_WEB_SHOWRECEIPT_INVITE_NOT_SENT_FRIENDSHIPREQUEST_EXISTS"].replace("%x", err.username),
                                            "skull"
                                        );
                                        break;

                                    case "ALREADY_FRIENDS":
                                        base.showReceipt(
                                            profile.locales["ID_WEB_SHOWRECEIPT_INVITE_NOT_SENT_ALREADY_FRIENDS"].replace("%x", err.username),
                                            "skull"
                                        );
                                        break;
                                    case "TOO_MANY_ACCEPTED":
                                        base.showReceipt(
                                            profile.locales["ID_WEB_SHOWRECEIPT_INVITE_NOT_SENT_TOO_MANY_ACCEPTED"].replace("%x", err.username),
                                            "skull"
                                        );
                                        break;
                                    case "TOO_MANY_OUTGOING":
                                        base.showReceipt(
                                            profile.locales["ID_WEB_SHOWRECEIPT_INVITE_NOT_SENT_TOO_MANY_OUTGOING"].replace("%x", err.username),
                                            "skull"
                                        );
                                        break;
                                    case "TOO_MANY_INCOMING":
                                        base.showReceipt(
                                            profile.locales["ID_WEB_SHOWRECEIPT_INVITE_NOT_SENT_TOO_MANY_INCOMING"].replace("%x", err.username),
                                            "skull"
                                        );
                                        break;
                                    case "NOT_ALLOWED":
                                        base.showReceipt(
                                            profile.locales["ID_WEB_SHOWRECEIPT_INVITE_NOT_SENT_NOT_ALLOWED"].replace("%x", err.username),
                                            "skull"
                                        );
                                        break;
                                    case "TOO_MANY_ACCEPTED_AND_OUTGOING":
                                        base.showReceipt(
                                            profile.locales["ID_WEB_SHOWRECEIPT_INVITE_NOT_SENT_TOO_MANY_ACCEPTED_AND_OUTGOING"].replace("%x", err.username),
                                            "skull"
                                        );
                                        break;
                                    case "DISABLED":
                                        base.showReceipt(
                                            profile.locales["ID_WEB_SHOWRECEIPT_INVITE_NOT_SENT_DISABLED"].replace("%x", err.username), "skull");
                                        break;
                                    case "UNKNOWN_FRIENDSHIPEXCEPTION":
                                    case "GENERIC_EXCEPTION":
                                        base.showReceipt(
                                            profile.locales["ID_WEB_SHOWRECEIPT_INVITE_NOT_SENT_UNKNOWN_FRIENDSHIP_EXCEPTION"].replace("%x", err.username),
                                            "skull"
                                        );
                                        break;
                                        break;
                                }
                            }
                            /*
                             response.data["errors"] contains dicts of usedId : { "username" : username, "error" : error }...
                             response.data["success"] contains array of successfully sent requests.
                             */
                            break;
                    }
                }, false)
            });
        });

        if (navigator.userAgent.toLowerCase().indexOf("msie 7") >= 0) {
            var statsHovers = $('.profile-stats-awarditem, .profile-stats-gadgetitem');
            statsHovers.pageBind('mouseover', function (e) {
                statsHovers.css("z-index", "");
                $(this).css("z-index", "20");
            });
        }

        var parts = S.globalContext.currentUrl.split('|');
        var key = "";

        if (parts.length > 4) {
            var profiletab = $(".profile-venicestats-tab");
            profiletab.removeClass("active");
            profiletab.find('a[href*="' +
                S.globalContext.currentUrl.replace(/\|/g, "/") + '"]').parent().addClass("active");

            key = (parts.length < 6 ? parts[4] : parts[5]);
            key = parts[4];

            $(".profile-stats-tab").removeClass("active");
            $(".profile-stats-tab." + key).addClass("active");
        }
        // Hide soldiers on profile home, if there are more than 3 soldiers available, and add click to show event
        if ($("#profile-user ul#soldier-list li").length > 3) {
            $("#profile-user .view-all-soldiers").show().pageBind("click", function (e) {
                e.preventDefault();
                $(this).hide();
                $("#profile-user ul#soldier-list li.hidden").show();
                return false;
            });
        }

        var soldierList = $("#soldier-list");
        if (soldierList.length) {
            var params =  {"userId": S.globalContext.profileUserId};
            var url = Surface.Modifier.urlformat('/{_section}/{_language}/user/overviewBoxStats/{userId}/', Surface.urlContext, params);
            if (url) {
                $.ajax({
                    url: url,
                    dataType: "json",
                    type: "GET",
                    complete: base.onComplete(function (success, response) {
                        if (success && response.data) {
                            var soldiers = response.data.soldiersBox;
                            var $lists = $("#profile-soldiers, #profile-other-games");
                            $(soldiers).each(function(){
                                var $elm = $lists.find("li[data-id="+this.persona.personaId+"][data-game="+this.game+"]");
                                // Check if soldier is for current realm or not
                                var current = S.globalContext.realm.game === this.game;
                                if ($elm.length) {
                                    var $rankElm = $elm.find(".soldier-rank");
                                    var statsUrl = $rankElm.data("url");
                                    var rankHtml = $S("profile.showrank").render({
                                        rank_game: this.game,
                                        rank_size: current ? "small" : "tiny",
                                        rank: this.rank,
                                        stats_url : statsUrl,
                                        tag_class: "soldier-rank"
                                    });
                                    // Replace rank placeholder
                                    $rankElm.replaceWith(rankHtml);
                                    // If current game, we need to populate some more data
                                    if (current) {
                                        // Replace stats placeholder
                                        var statsHtml = $S("profile.overviewsoldierstats").render({ boxStats: this });
                                        $elm.find(".stats").replaceWith(statsHtml);
                                        // Replace extra placeholder
                                        var extraHtml = $S("profile.overviewsoldierextra").render({ boxStats: this, stats_url: statsUrl })
                                        $elm.find(".soldier-extra").replaceWith(extraHtml);
                                    }
                                }
                            });
                        }
                    }, false)
                });
            }
        }

        var soldierEdit = $("#soldier-getStats");
        if (soldierEdit.length) {
            var url = soldierEdit.attr("action");
            if (url) {
                $.ajax({
                    url: url,
                    dataType: "json",
                    type: "POST",
                    data: soldierEdit.serialize(),
                    complete: base.onComplete(function (success, response) {
                        if (success) {
                            for (var personaId in response.data.stats) {
                                var personaStats = response.data.stats[personaId];
                                var html = $S("profile.showrank").render({"rank_game": response.data.currentGame, "rank_size": "tiny", "rank": personaStats.rank});
                                $("#profile-rank-" + personaId).html(html);
                            }
                        }
                    }, false)
                });
            }
        }

        $("#profile-main-column").pageDelegate(".ajax-mytargetsform", "submit", function () {

            var form = $(this);

            var button = form.find(".profile-mytarget:first");
            if (button.hasClass("stored")) {
                var url = $("#profile-removeTargetURL").val();
            }
            else {
                var url = $("#profile-addTargetURL").val();
            }

            $.ajax({
                url: url,
                dataType: "json",
                type: "POST",
                data: form.serialize(),
                complete: base.onComplete(function (success, response) {
                    switch (response.message) {
                        case "ALREADY_ADDED":
                        case "ADDED_OK":
                            form.parents(".profilestats-item").find(".profile-mytarget").addClass("stored");
                            base.showReceipt(profile.localse["ID_WEB_SHOWRECEIPT_STATS_TARGET_ADDED"]);
                            break;
                        case "REMOVED_OK":
                        case "REMOVED_ERROR":
                            form.parents(".profilestats-item").find(".profile-mytarget").removeClass("stored");
                            base.showReceipt(profile.localse["ID_WEB_SHOWRECEIPT_STATS_TARGET_REMOVED"]);
                            break;
                    }

                }, false)
            });
            return false
        });

        if ($("#newSoldierPersonaName").length) {
            $("#newSoldierPersonaName").focus();
        }

        $(".profile-friends-remove").pageBind("click", function () {
            var row = $(this).parent("li");
            var friend = $(this).attr("id");
            friend = friend.split("-");
            //S.info(friend);
            var url = $(this).attr("rel");
            var data = { questionType: "PROFILE_REMOVE_FRIEND" };
            var continueCallback = function () {
                $("#profile-friends-count").html(parseInt($("#profile-friends-count").html()) - 1, 10);

                $.ajax({type: "POST", dataType: "json",
                    url: url,
                    success: function (response) {
                        if (response['type'] == "success") {
                            $(row).remove();

                            var friendstate = $S("comcenter-surface-friends").getState();
                            var newfriends = [];
                            S.debug("Newfriends is ");
                            S.debug(newfriends);
                            for (var n = 0; n < friendstate.friendscomcenter.length; n++) {

                                S.debug(("" + friendstate.friendscomcenter[n].userId) + " vs " + response['data']['id']);
                                if ("" + friendstate.friendscomcenter[n].userId != response['data']['id']) {
                                    newfriends.push(friendstate.friendscomcenter[n]);
                                }
                            }
                            S.debug("Setting friendscomcenter to ");
                            S.debug(newfriends);
                            friendstate.friendscomcenter = newfriends;
                            $S("comcenter-surface-friends").setState(friendstate);

                            comcenter.updateLocalStorage();
                            $S("comcenter-surface-friends").refresh();
                        } else {
                            alert("Error: Could not remove friend.");
                        }
                    }
                });
            };
            popup.prompt(data, continueCallback)
        });

        $("#unlocks-load-more").pageLive("click", function(event) {
            event.preventDefault();
            event.stopPropagation();
            $this = $(this);
            var url = $this.attr("href");
            $.ajax({
                url: url,
                dataType: "json",
                type: "GET",
                complete: base.onComplete(function (success, response) {
                    if (success) {
                        $this.hide();
                        var container = $this.parent();
                        var template = $S("profile.mohwupcomingunlocksdetailed");
                        $.each(response.data.upcomingClassUnlocks, function(i, unlock){
                            var html = template.render({
                                "classUnlock" : unlock,
                                "platformInt" : response.data.platformInt,
                                "personaName" : response.data.personaName,
                                "personaId" : response.data.personaId
                            });
                            container.append(html);
                        });
                    }
                })
            });

        });

        var wallMessageExpanded = 0;
        $(".wall-message").pageBind("click", function () {
            if (wallMessageExpanded == 0) {
                $(this).addClass("wall-message-expanded").val("");
                $(".base-button-arrow-small.wall-message-button").show();
                wallMessageExpanded = 1;
            }
        });

        $("#feed-optionsbutton-container").pageLive("click", function (e) {
            $("#feed-optionsbutton-dropdown").show();
        });

        $("#feed-optionsbutton-container").pageLive("mouseout", function () {
            $("#feed-optionsbutton-dropdown").hide();
        });

        $(".feed-story-delete").pageLive("click", function (e) {
            popup.prompt({ "header": profile.locales["ID_WEB_SHOWRECEIPT_ENTRY_DELETED_CONFIRMATION"]}, function () {
                var feedEntry = $(this).parents("li:first");
                var storyUrl = $(this).attr("storyUrl");
                var data = $(this).siblings(".feed-story-ids").find("input[name='feed-eventIds[]']").serialize();

                data += "&post-check-sum=" + S.globalContext.session.postChecksum;
                $.ajax({
                    url: storyUrl,
                    type: "POST",
                    data: data,
                    complete: base.onComplete(function (success, response) {
                        if (success && response == "Deleted") {
                            feedEntry.fadeOut("fast", function () {
                                feedEntry.fadeOut("fast", function () {
                                    feedEntry.remove();
                                });
                            });
                            base.showReceipt(profile.locales["ID_WEB_SHOWRECEIPT_ENTRY_DELETED"], "checkbox");
                        } else {
                            base.showReceipt(profile.locales["ID_WEB_SHOWRECEIPT_ENTRY_DELETED_ERROR"], "skull");
                        }
                    }, false)
                });
            }, this);
        });

        $(".feed-story-comment-delete").pageLive("click", function (e) {
            popup.prompt({ "header": profile.locales["ID_WEB_SHOWRECEIPT_COMMENT_DELETED_HEADER"]}, function () {
                var feedComment = $(this).parents(".feed-comments-item");
                var commentId = $(this).attr("commentId");
                var commentUrl = $(this).attr("commentUrl");

                var data = { "post-check-sum": S.globalContext.session.postChecksum, "commentId": commentId};
                $.ajax({
                    url: commentUrl,
                    type: "POST",
                    data: data,
                    complete: base.onComplete(function (success, response) {
                        if (success && response == "Deleted") {
                            feedComment.fadeOut("fast", function () {
                                feedComment.remove();
                            });
                            base.showReceipt(profile.locales["ID_WEB_SHOWRECEIPT_COMMENT_DELETED"], "checkbox");
                        } else {
                            base.showReceipt(profile.locales["ID_WEB_SHOWRECEIPT_COMMENT_DELETED_ERROR"], "skull");
                        }
                    }, false)
                });
            }, this);
        });

        $(document.body).pageDelegate("form.wallpost", "submit", function (event) {
            event.preventDefault();
            wallMessageExpanded = 0;

            var form = $(this);
            var $wall_message = $(form).find(".wall-message");
            var wall_message_text = $.trim($wall_message.val());

            if (wall_message_text.length > 1) {
                $wall_message.addClass("disabled");
                $(".base-button-arrow-small.wall-message-button").hide();

                $.ajax({
                    url: form.attr("action"),
                    dataType: "json",
                    type: "POST",
                    data: form.serialize(),
                    complete: base.onComplete(function (success, response) {
                        $(form).find(".feed-textlimit-counter").text("");    // Reset text limit counter
                        $wall_message.removeClass("disabled wall-message-expanded").val(
                            profile.locales["ID_WEB_PROFILE_OVERVIEW_LEAVE_MESSAGE_IN_FEED"]
                        );
                    }, false)
                });
            }
            else {
                base.showReceipt(profile.locales["ID_WEB_SHOWRECEIPT_ENTRY_TOO_SHORT"], "skull");
            }
        });

        $(".textlimit-count").pageLive("keydown", function () {
            var max_text_length = parseInt($(this).attr('textlimit-max'), 10) || 1000;
            var max_text_length_warning = parseInt($(this).attr('textlimit-warning'), 10) || (max_text_length / 2);

            var textLength = $(this).val().length;
            var remaining = max_text_length - textLength;

            if (remaining < 1) {
                presentation_text = $(this).val();
                remaining = 0;
                $(this).val(presentation_text.substr(0, max_text_length - 1));
            }

            if (remaining < max_text_length_warning) {
                $(this).siblings(".textlimit-counter").text(remaining.toString() + " " + profile.locales["ID_WEB_PROFILE_CHARACTERS_REMAINING"]);
            }
            else {
                $(this).siblings(".textlimit-counter").text("");    // Remove counter
            }
        });

        $("#profile-status-message").pageDelegate("#profile-status-message-area, #profile-edit-status-button", "click", function () {
            if ($("#profile-edit-status-button").length) {
                var $edit = $("#profile-status-message-edit").select();
                $(".profile-toggle-edit").toggle();
                $("#feed-addlink-container").show();
                $("#feed-addlinkwithpreviewarea").hide();
                $edit.focus();

                var message = $edit.val();
                if (message == $edit.attr("placeholder")) {
                    $edit.val("");
                }
                $.trim($("#profile-status-message-area").html());

                $(document.body).bind("click.profileEditClick", function (e) {
                    if ($(e.target).parents("#profile-status-message").length) {
                        return true;
                    }
                    else {
                        $(document.body).unbind("click.profileEditClick");
                        $(".profile-toggle-edit").toggle();
                    }
                });

            }
        });

        $('#profile-stats-awards-upcoming-table').tablesorter({
            textExtraction: function (node) {
                return $(node).find('.common-sorting-value').html();
            }
        });

        if (S.globalContext.session.isLoggedIn) {
            $('#dogtags-list-isotope').isotope({
                layoutMode: 'fitRows',
                itemSelector: '.dogtag-item',
                sortBy: 'alphabetical',
                animationEngine: 'css',
                filter: '*',
                sortAscending: true,
                getSortData: {
                    unlocked : function($element){
                        var name = $element.find('.dogtag-name').text();
                        if($element.hasClass('unlocked')){
                            return '0 ' + name;
                        } else {
                            return '1 ' + name;
                        }
                    },
                    alphabetical: function($element) {
                        var name = $element.find('.dogtag-name'),
                            itemText = name.length ? name : $element;
                        return itemText.text();
                    }
                }
            });
        }

        /**
         * Show soldier portrait select popup
         */
        $("#profile-edit-row-clantag .profile-edit-picture").click(function () {
            var $this = $(this);
            if ($this.hasClass("disabled")) {
                return false;
            }
            var soldierGameId = $this.attr("gameId");
            var soldierId = $this.parent().attr("id");
            var $current_portrait = $this.find(".soldier-picture-input").val();

            popup.render("profileSoldierImage", { "soldierId": soldierId, "soldierGameId": soldierGameId }, false, false);
            profile.setProfilePortrait($current_portrait);
        });

        $(".unlockFilterByKitButton").pageLive("click", function (e) {
            var state = $S("unlocks").getState();
            state["filterByKit"] = $(this).attr("filterByKit");
            $S("unlocks").refresh();
        });

        $(".filterByKitButton").pageLive("click", function (e) {
            var kitId = $(this).attr("filterByKit");
            if (kitId == "Other") {
                $(".filterByKit").show();
            } else {
                $(".filterByKit").hide();
                $(".filterByKit_" + kitId).show();
            }
        });

        $(document).on("click", ".profile-stats-type-container-filters .common-selector li", function () {
            $(this).addClass("selected").siblings().removeClass("selected");
        });

        $(".profile-add-friend input.allow-add").removeAttr("disabled");

        search.initUserSearch("#profile-friends-user-search-form");

        profile.showAddFriends();

        profile.showDogTags();

        profile.bindAssignments();

        $('#profile-venicestats-resetstatsbutton')
            .pageLive('click', function () {
                if (premium.isPremiumRequiredOn($(this))) {
                    return;
                }

                var $holder = $('#profile-stats-personadata');
                var data = {
                    personaId: $holder.attr('data-personaId'),
                    personaName: $holder.attr('data-personaName'),
                    namespace: $holder.attr('data-namespace')
                };
                popup.render('profile.statsResetPopup', data, true, false);
            })
            .tooltip();

        $('.profile-venicestats-resetpopup-confirmbutton').pageLive('click', function () {
            var $button = $(this);
            var popupId = $(this).closest('.common-popup').attr('id');
            $button.siblings().add($button).each(function () {
                $(this).attr('disabled', 'disabled');
            });

            $.ajax({
                url: $('#profile-stats-reseturl').attr('url'),
                cache: false,
                type: 'POST',
                dataType: 'json',
                data: {"post-check-sum": S.globalContext.session.postChecksum},
                success: function () {
                    base.showReceipt(profile.locales["ID_WEB_PROFILE_STATS_RESETSTATS_SHOWRECEIPT_SUCCESS"]);
                    $.ga.trackClickEvent("statsreset.success");
                },
                error: function () {
                    base.showReceipt(profile.locales["ID_WEB_PROFILE_STATS_RESETSTATS_SHOWRECEIPT_FAILURE"], 'skull');
                    $.ga.trackClickEvent("statsreset.fail");
                },
                complete: function () {
                    base.redirect($('.tabs>.stats>a').attr('href'));
                    popup.closePopup(popupId);
                }
            });
        });

        $('#view-all-weapon-unlocks').pageLive('click',function(){
            $(this).css({'display':'none'});
            $('#mohw-locked-weapons-list').find('li').css({'display':'block'});
        })

        // Link the medal and ribbons together through dependencies
        $(".profile-stats-awards-progression-item-medal").pageLive("mouseover",function () {
            var dependencies = $(this).data("dependencies")
            if (dependencies) {
                $("#award-ribbon-" + dependencies.split(" ")[0]).addClass("active");
            }
        }).pageLive("mouseout", function () {
                var dependencies = $(this).data("dependencies");
                if (dependencies) {
                    $("#award-ribbon-" + dependenciesdependencies.split(" ")[0]).removeClass("active");
                }
            });
        $(".profile-stats-awards-progression-item-ribbon").pageLive("mouseover",function () {
            var id = $(this).attr("id").split("-")[2];
            $('[data-dependencies~="' + id + '"]').addClass("active");
        }).pageLive("mouseout", function () {
                var id = $(this).attr("id");
                if (id) {
                    $('[data-dependencies~="' + id.split("-")[2] + '"]').removeClass("active");
                }
            });

        // Get platoons
        profile.getBlazeClubs();

        $('.profile-friends-innercontent .hoverbutton').pageLive("click", function() {
            profile.openOriginFriendsImport($(this).data("url"));
        });
        setTimeout(function(){ $('.sticky-scroll').trigger("resize.stickyelement.page"); }, 1000);

    });

    profile.on("pageleave", function () {
        // Remove embedded iframes
        $("#feed-media-preview-view-now-embed iframe").remove();
    });

}(jQuery, window));;/**
 * FilterControl
 * @dependency jquery.esn.pagebind.js
 */
;(function($, window, document, undefined) {

  var pluginName = "filterControl",
      defaults = {
        // Which input elements to include
        inputElements: "select, :checkbox",
        // Which filter items to ignore
        ignoreClick: ".ignore",
        // What to do on click
        onClick: null
      };

  /**
   * Plugin constructor
   * @param elm
   * @param options
   */
  function FilterControl (elm, options) {
    this.options = $.extend({}, defaults, options);
    this.element = $(elm);
    this.items = $("ul li", this.element);
    this.init();
  }

  /**
   * Init plugin
   */
  FilterControl.prototype.init = function() {
    var self = this;

    // Loop through each filter item
    self.items.each(function(){
      var filter = $(this),
          input = filter.find(self.options.inputElements);

      if (input.length === 0) return;

      var opts = filter.find("option"),
          label = filter.find("label"),
          type = input[0].type;

      // Remove default behavior from label
      label.pageBind("click", function(e){ e.preventDefault(); });

      // Bind to input change to reflect programmatical changes
      input.pageBind("change.filtercontrol", function(){
        // Get new state
        // On/off for selects, on/empty for checkbox
        var state = (this.checked || (type !== "checkbox" && this.value == 1)) ?
                "On" : ((type !== "checkbox" && this.value == 0) ? "Off" : "");

        // Set filter class based on state
        filter.removeClass("on off").addClass(state.toLowerCase());
        
        // Trigger filterchange
        self.element.trigger({
          type: "filterchange",
          label: label.text(),
          value: state
        });
      }).trigger("change");

      // Set provided onClick function or use default
      self.onClick = self.options.onClick === "function" ? self.options.onClick : function (e) {
        e.preventDefault();
        var currIdx, newVal, nextIdx;
        switch (type) {
          // Checkbox
          case "checkbox":
            newVal = input[0].checked ? "" : "On";
            input[0].checked = !input[0].checked;
          break;
          // Select
          case "select-one":
            currIdx = input[0].selectedIndex;
            currIdx = currIdx === -1 ? 0 : currIdx;
            nextIdx = currIdx+1 === opts.length ? 0 : currIdx+1;
            newVal = input.find("option").eq(nextIdx).attr("value");
            input.val(newVal);
            opts.eq(nextIdx).attr("selected", "selected");
          break;
        }
        // Trigger change event on input
        input.trigger("change");
      };

      // Bind onClick handler
      filter.not(self.options.ignoreClick).pageBind("click.filtercontrol", self.onClick);
    });

    $('input[type="text"]', self.element).pageLive('keyup', function () {
         self.element.trigger({
            type: "filterchange",
            label: $(this).attr('placeholder') || $(this).attr('name'),
            value: $(this).val()
        });
    });
  };

  /**
   * Destroy plugin
   */
  FilterControl.prototype.destroy = function() {
    this.items.each(function(){
      var filter = $(this),
          input = filter.find(":input"),
          type = input[0].type;

      input.unbind(".filtercontrol");

      filter.unbind(".filtercontrol")
        .removeClass("on off");
    });
    this.element.removeData("filtercontrol");
  };

  /**
   * Plugin wrapper
   * @param options
   */
  $.fn[pluginName] = function (options) {
    return this.each(function(){
      var lcName = pluginName.toLowerCase();
      if (!$.data(this, lcName)) {
        $.data(this, lcName, new FilterControl(this, options));
      }
    });
  };

  // Instantiate based on markup
  $(function(){
    $("[data-filtercontrol]").filterControl();
  });

}(jQuery, window, document));

/**
 * ServerBrowser
 *
 * @dependency jquery.esn.pagebind.js
 */
;(function($, window, document, undefined){

  var pluginName = "serverBrowser",
    defaults = {
      component: null,
      scrollAnimation: { duration: "fast", easing: "swing" }
    };

  /**
   * Plugin constructor
   * @param elm
   * @param options
   */
  function ServerBrowser (elm, options) {
    this.element = $(elm);
    this.options = $.extend({}, defaults, options);
    this.game = S.globalContext["realm"]["game"];
    this.sorter = $.fn.serverBrowser.initSorter();
    this.init();
    return this;
  }

  // Extend prototype with additional methods
  $.extend(ServerBrowser.prototype, {

    // Cache container
    cache: {},

    // Data container
    data: {},

    // Server railer
    serverRailer: false,

    // Other properties
    hasPluginAndGame: false,
    filterSearchTimeout: false,
    rowSelect: false,
    activeScoreboard: false,
    serverHighlightIndex: 0,
    invitesTimeout: 0,
    filterSurfaceTimeout: 0,

    /**
     * Init
     */
    init: function() {
      var self = this;

      // Setup selectors
      self.selectors = {
        servers: "#server-page",
        serverBodyCells: ".serverguide-bodycells",
        filterToggle: "#serverguide-filtertoggle",
        filters: "#serverguide-filters",
        rows: "#selected-server-info table tr",
        ping: ".serverguide-bodycells.active > .serverguide-cell-ping",

        advFilter: ".advanced-server-filter",
        advFilterOpen: "#serverguide-open-advanced-link",
        advFilterSave: ".serverguide-save-advanced-filter",
        advFilterCancel: ".advanced-cancel",

        regionFilter: ".region-server-filter",
        regionFilterOpen: "#serverguide-open-region-link",
        regionFilterShow: ".serverbrowser-region-filter-show",
        regionFilterSave: ".serverguide-save-region-filter",
        regionFilterCancel: ".region-cancel"
      };

      // Initial caching of selectors
      self.cacheSelectors();

      // Renders filter header based on what is selected
      self.renderFilterHeader();

      // Update selected server box with appropriate ping when server browser is first loaded
      // TODO: css should be set with css
      self.elems.rows.last().html(self.elems.ping.text()+" ms ping").css("fontWeight", "bold");
      var pingResult = function(event, serverLatencys)
      {
          $.each(serverLatencys, function(serverId, latency) {
           try {
             var surf = $S("serverguide-server-" + serverId);
             if (surf && surf.getState !== undefined) {
                 var serverState = surf.getState();
                 if (serverState !== undefined) {
                     serverState.ping = (parseInt(latency, 10) < 0 ? "-" : latency);
                     surf.refresh();
                 }
             }
           } catch(e) {
               S.error(e);
           }
          });
          self.sorter.sortByPing();
          self.refreshHighlight();
      };

      launcher.registerForEvent("pingResult", pingResult);

      var col_height = 0;
      self.elems.filterCols.map(function(){
          col_height = ($(this).height() > col_height) ? $(this).height() : col_height;
      });
      self.elems.filterCols.height(col_height);
      
      // Bind onPageShow
      /* New way when we get it to work
      $(window).bind("pageshow.serverguide", function (e) {
        self.onPageShow();
      });
      */
    },

    /**
     * Cache selectors
     */
    cacheSelectors: function() {
      // Update selectors
      this.elems = {
        servers: $(this.selectors.servers),
        filterToggle: $(this.selectors.filterToggle),
        filters: $(this.selectors.filters),
        rows: $(this.selectors.rows),
        ping: $(this.selectors.ping),

        advFilter: [],
        regionFilter: [],
        filterCols: $(".filter-col", self.element)
      };
    },

    /**
     * ScrollTo
     * @param elm
     */
    scrollTo: function(elm) {
      var scrollTop = $(elm).offset().top - 250;
      $(document.body).animate({ scrollTop: scrollTop }, this.options.scrollAnimation);
    },

    /**
     * Setup live bindings
     */
    bindEventHandlers: function() {
      var self = this;
      // Open advanced filter
      // TODO: still propagates for some reason, fix it
      $(self.selectors.advFilterOpen).pageBind("click", function(e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        if(S.globalContext.filterAdvancedSettings == null){
          S.globalContext.filterAdvancedSettings = [];
        }
        self.showAdvancedFilterPopup();
        return false;
      });

      $(self.selectors.advFilterCancel).pageLive("click", function () {
          $(self.selectors.advFilter).hide();
      });

      // Save advanced filters
      // TODO: clean up selectors
      $(self.selectors.advFilterSave).pageLive("click", function(e) {
        var filterOptions = [];
        var container = $(self.selectors.advFilter);
        var form = $("#serverfilter-advancedfilters-form").find(".popup-serveradvancedfilter-value");

        form.each(function() {
          var $this = $(this);
          var isBoolValue = $this.data("type") === "bool";
          var key = $this.data("key");
          var defaultValue = $this.data("default");

          if (isBoolValue) {
            var val;
            if (val == undefined) {
                val = $this.find("input[name='settings-"+key+"']").val();
            }
            if (val !== "-" && val != "")
              filterOptions.push(key + "," + val + "," + val);
          } else {
              var setting = $S.callFunction("gamedata.get", S.globalContext.realm.section, "gameserver").advancedsettings;
                  setting = setting[$this.data('filter')].filters[key];
            var min = $this.find("input[name='"+ key +"-min']").val();
            var max = $this.find("input[name='"+ key +"-max']").val();

            if(parseInt(setting["min"]) != min || parseInt(setting["max"]) != max) { // Don't want to add them to the list if they haven't been changed from their defaults
              filterOptions.push(key + "," + (min == "" ? defaultValue : min) + "," + (max == "" ? defaultValue : max));
            }
          }
        });

        if (filterOptions.length)
          S.globalContext.filterAdvancedSettings = filterOptions;

        $("#serverguide-filter-settings-input").val(Surface.Modifier.join(filterOptions, "|"));

        if(filterOptions.length) {
            $("#serverguide-advanced-settings-checkbox")
                .removeClass('off')
                .addClass('on');
            $('#useAdvanced').attr('checked', true);
            //TODO: Remove this following if-block when moved to same filters for all game
            if($("#serverguide-advanced-settings-checkbox").hasClass("serverguide-exclude")) {
                $("#serverguide-advanced-settings-checkbox").trigger("mousedown");
            }
        } else {
            $("#serverguide-advanced-settings-checkbox")
                .removeClass('on');
            $('#useAdvanced').attr('checked', false);

            if ($(self.selectors.advFilterOpen).data('label')) {
                $(self.selectors.advFilterOpen).html(
                    $(self.selectors.advFilterOpen).data('label')
                );
            }
        }
        container.hide();
        self.renderFilterHeader();
      });

      // Open region filters
      // TODO: clean up selectors
      $(self.selectors.regionFilterOpen).pageBind("click", function(e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        if (self.cache.regions) {
          self.showRegionFilterPopup(self.cache.regions);
        } else {
          $.ajax({
            "url": $(this).attr("url"),
            "dataType": "json",
            "type": "GET",
            "complete": base.onComplete(function(success, response) {
              if (success) {
                self.cache.regions = response.message;
                self.showRegionFilterPopup(self.cache.regions);
              } else {
                base.showReceipt("Could not open region filter", "skull");
              }
            })
          });
        }
      });

      // Show region filters
      // TODO: clean up selectors
      $(self.selectors.regionFilterShow).pageLive("click", function(e) {
        var region = $(this).data("region");
        $("#serverbrowser-country-serverfilter-popup h1").show();
        $(this).addClass("showing").siblings().removeClass("showing");
        $("#serverbrowser-region-countries-"+region).show().siblings().hide();
      });


      $(self.selectors.regionFilterCancel).pageLive("click", function (e) {
          self.elems.regionFilter.hide();
      });

      // Save region filters
      // TODO: clean up selectors
      $(self.selectors.regionFilterSave).pageLive("click", function(e) {

        // Cache selectors
        var c = $(".region-server-filter");
        var elems = {
          filterRegions: $("#filter-regions-input"),
          filterCountries:  $("#filter-countries-input"),
          inputRegions: $("#serverguide-filter-regions-input"),
          inputCountries: $("#serverguide-filter-countries-input"),
          checkboxes: $("#serverguide-region-settings-checkbox"),
          useLoc: $("#useLocation-input"),
          locationPopupAnchor: $(self.selectors.regionFilterOpen)
        };

        try {
          var regions, countries;
          regions = elems.filterRegions.val();
          elems.inputRegions.val(regions);

          countries = elems.filterCountries.val();
          elems.inputCountries.val(countries);

          if (regions.length || countries.length)  {
            elems.checkboxes
              .addClass("on")
              .removeClass("off ignore");

              elems.useLoc.attr({'checked': true}).val(1);
            S.globalContext.filterRegionSettings = regions.split("|");
            S.globalContext.filterCountrySettings = countries.split("|");
            elems.locationPopupAnchor.html(S.globalContext.filterCountrySettings.length + " " + elems.locationPopupAnchor.data('isset'));
          } else {
              elems.checkboxes
                .removeClass("on");
              elems.useLoc.attr({'checked': false});

            elems.locationPopupAnchor.html(elems.locationPopupAnchor.data('noset'));
          }
          self.elems.regionFilter.hide();
        } catch(err) {
          S.debug("Could not save region filter")
        }
        self.renderFilterHeader();
      });

      // TODO: what is this and is it still in use?
      $(self.selectors.serverBodyCells).pageLive("mouseleave", function() {
        var $this = $(this);
        $this.find(".base-button-general-dropdown").removeClass("active");
        $this.find(".base-general-dropdown-area").hide();
      });
    },

    /**
     * onPageShow
     */
    // TODO: in need of refactoring
    onPageShow: function () {
      var self = this;
      self.initSearchField();
      self.renderFilterHeader();
      self.greyOutGameSelectionMaps();

      serverguideList.setServerShowPosition();
      serverguideList.setServerShowHeight();
      // Update cached selectors
      self.cacheSelectors();
      // Bind event handlers
      self.bindEventHandlers();
      // If we have servers, show them
      if (self.elems.servers.length > 0) {
          serverguideShow.initServerShow();
      }

      if($.browserStorage.get("serverfilter-hidden")) {
        self.elems.filterToggle
          .removeClass("serverguide-filtertoggle-expanded")
          .addClass("serverguide-filtertoggle-contracted");
        self.elems.filters.css({"display":"none"});
        $("#serverguide-apply-filters").css({"display":"none"});
      }

      $(".serverguide-bodycells").pageLive("mouseleave", function() {
        var $this = $(this);
        $this.find(".base-button-general-dropdown").removeClass("active");
        $this.find(".base-general-dropdown-area").hide();
      });

      self.serverRailer = $('#serverguide-show-column').railer($('#serverguide-list-outer-wrapper'), $('.serverguide-list:first'));

      $(".serverguide-apply-filter-button").pageBind("click", function() {
        $(".serverguide-list").hide();
        $("#serverguide-show-column").hide();
        $("#serverguide-loading-list-indicator").show();
        $(this).addClass("disabled");

        gamemanager._deleteMatchmakingFilter(S.globalContext["realm"]["game"]);
      });

      $(".show-all-scoreboard").pageLive("click", function() {
        popup.render('serverplayers', {"scoreboard": {}});
        self.liveScoreboard();
      });

      // self.updateServerScoreboard();    // Send an initial render scoreboard call

      $(".serverguide-add-favorite").pageLive("click", function() {
        var form = $(this).children("form");
        var url = form.attr('action');
        var guid = form.children("input").val();
        var surface_id;

        $(".serverguide-add-favorite-toggle").hide();
        $(".serverguide-add-favorite-loading").show();

        if ($(this).attr("id") == "serverguide-page-favourite") {
          surface_id = "serverguide-page";
        } else {
          surface_id = "serverguide-show";
        }
        self.addFavorite(url, guid, surface_id);
      });

      $(".serverguide-server-link").pageLive("click", function(e) {
        e.preventDefault();
        popup.render("serverurl", $(this).attr("href"));
      });

      $(".serverguide-server-link-field").pageLive("click", function(e) {
        $(this).focus().select();
      });

      $("#serverguide-show-friends-with-server-toggle").pageLive("click", function() {
        $("#serverguide-show-friends-with-server").toggle();
      });

      $(".base-button-dropdown a").pageLive("click", function(e) {
        $(this).closest(".base-button-dropdown").hide();
        return false;
      });

      $("#serverguide-result .serverguide-bodycell, #serverguide-result .serverguide-cell-name a").pageLive("click", function(e) {
        if (e.target.tagName == "INPUT")
          return;
        if (e.target.tagName == "A")
          e.preventDefault();

        if ($(e.target).hasClass("serverguide-cell-expansion-button-play"))
          return;

        if(self.rowSelect) self.rowSelect.abort();

        var serverRow = $(e.target).parents(".serverguide-bodycells");
        var idx = serverRow.attr("idx");
        var guid = serverRow.attr("guid");
        var url = $("#serverguide-numplayers-url").val().replace("%GUID%", guid);
        var ping = serverRow.children(".serverguide-cell-ping").children("span").html();
        var rowSurface = $S("serverguide-server-" + idx);

        var showserverinfo = $.browserStorage.get("serverinfo-more-info-visible");
        if(showserverinfo) {
          $("#serverinfo-more-info-expanded").show();
        }
        var friends = comcenter.getFriendsPlayingOnServer(guid);
        self.highlightServerIndex(idx);
        var server = rowSurface.getState().server;
        $S("serverguide-show").update({serverinfo: server, friends: friends});

        try {
          self.serverRailer.sendToHook();
        } catch(e) {
          S.error(e);
        }

        self.rowSelect = base.ajaxGetJson(url, function(success, response) {
          if(success && response.mapMode) {
            var updatedInfo = {slots: response.slots, map: response.map, mapMode: response.mapMode};
            $S("serverguide-show").update({ loading: false, serverinfo: updatedInfo });
            var mapinfo = $S.callFunction("common.mapinfo", server.game, response.map);
            $S("serverguide-server-"+idx).update({ server: updatedInfo, mapinfo: mapinfo });
            self.refreshHighlight();
          }

          self.liveScoreboard();
        });

        return false;
      });

      $(".serverguide-reset-filter-button").pageBind("click", function() { self.resetFilters(); });

      // Create filter controls
      self.initGuideFilters();

      if ($("#serverguide-result").length) {
        serverguideList.initServerListing();
        self.sorter.init();
      }



      if($("#serverguide-autobrowse-on").length > 0 && $(".serverguide-bodycells").length >= 30) {
          serverguideList.setServerListAutoBrowse();
      }

      if ($("#serverguide-show-serverjoin").length) {
          serverguideShow.initServerShow();
      }

      self.selectFirstServer();

      /* This must be placed last so the other functions have had a chance to bind to its events */
      $( self.initPlugin );
      var currentServerGuid = false;
      if( $("#serverguide-show").length ) {
        try {
          var sgshow = $S("serverguide-show");
          if (sgshow && sgshow.getState() && sgshow.getState().serverinfo && sgshow.getState().serverinfo.guid)
          {
              currentServerGuid = $S("serverguide-show").getState().serverinfo.guid;
          }
        } catch(e) {
            S.error(e);
        }
      }

      $('#serverinfo-more-info-view').pageLive("click", function() {
        $('#serverinfo-more-info-view').hide();
        $('#serverinfo-more-info-hide').show();
        $.browserStorage.set("serverinfo-more-info-visible", true);
        $("#serverinfo-more-info-expanded").stop(true, true).slideDown(150);
      });

      $('#serverinfo-more-info-hide').pageLive("click", function() {
        $('#serverinfo-more-info-hide').hide();
        $('#serverinfo-more-info-view').show();
        $.browserStorage.deleteKey("serverinfo-more-info-visible");
        $("#serverinfo-more-info-expanded").stop(true, true).slideUp(150);
      });

      if( S.globalContext.session.isLoggedIn ) {

        // Update all friends count from Comcenter state
        // wait a second if its a full pageload
        if(S.globalContext.isAjaxNavigation) {
            self.updateFriendsPlayingOnServers();
        } else {
            setTimeout(function(){ self.updateFriendsPlayingOnServers(); }, 1000);
        }
      }

      $('#serverinfo-players-all-view').pageLive("click", function() {
        $('#serverinfo-players-all-view').hide();
        $("#serverinfo-players-all-wrapper").html($S("serverguide.serverplayerlist").render({})).show();
        common.initLoadingSpinners();
        var guid = $(this).attr("data");
        var numPlayers = $(this).attr("data-numPlayers");
        var url = $("#serverguide-players-url").val().replace("%GUID%", guid);
        base.ajaxGetJson(url, function(success, response) {
          var players = [];
          if (success)
            players = response.players;

          $('#serverinfo-players-all-hide').show();
          $("#serverinfo-players-all-wrapper").html($S("serverguide.serverplayerlist").render({players: players, numPlayers: numPlayers}));
          try { self.serverRailer.sendToHook(); } catch(e) { S.error(e); }
        });
      });

      $('#serverinfo-players-all-hide').pageLive("click", function() {
        $('#serverinfo-players-all-hide').hide();
        $('#serverinfo-players-all-view').show();
        $("#serverinfo-players-all-wrapper").stop(true, true).slideUp(150, function() {
            try { self.serverRailer.sendToHook(); } catch(e) { S.error(e); }
        });
      });
    },

    /**
     * Advanced filter popup
     */
    showAdvancedFilterPopup: function() {
      this.elems.advFilter = $(".advanced-server-filter");
      if (this.elems.advFilter.length) {
        this.elems.advFilter.show();
      } else {
        var serverSettings = {};
        for (var i=0, length=S.globalContext.filterAdvancedSettings.length; i<length; i++) {
          var settingString = S.globalContext.filterAdvancedSettings[i];
          var values = settingString.split(",");

          serverSettings[values[0]] = {
            "min": values[1],
            "max": values[2]
          };
        }
        popup.render("serverguide.popupadvancedfilter", { "serverSettings": serverSettings }, true, false);
        this.elems.advFilter = $(".advanced-server-filter");
        this.addAdvancedSelectableTriggers();
      }
    },

    /**
     * Show region filter
     */
    showRegionFilterPopup: function (existingRegions) {
      // BUG: For some reason, elems.regionFilter is reset
      // TODO: Fix the cached selector issue
      this.elems.regionFilter = $(".region-server-filter");
      if (this.elems.regionFilter.length) {
          this.elems.regionFilter.show();
          this.addRegionSelectableTriggers();
      } else {
        popup.render("serverguide.regionfilter", {
            existingRegions: existingRegions,
            regionFilters: S.globalContext.filterRegionSettings,
            countryFilters: S.globalContext.filterCountrySettings
          },
          true,
          false
        );
        // Cache selector
        this.elems.regionFilter = $(".region-server-filter");
        this.addRegionSelectableTriggers();
      }
    },

    /**
     * Reset filters
     */
    resetFilters: function (element) {
      gamemanager._deleteMatchmakingFilter(S.globalContext["realm"]["game"]);
      $(".serverguide-selectable.serverguide-include").removeClass(".serverguide-include").click();
      $("#serverguide-search-input").val("");

      S.globalContext.searchQuery = "";
      $S("serverguide-filterstring").update({ searchQuery:false });

      var resetUrl = $(element).attr("href");
      base.redirect(resetUrl);
    },

    /**
     * Add region selectable triggers
     */
    addRegionSelectableTriggers: function () {
      var self = this;
      $(".serverguide-regionfilter-selectable, .serverguide-regionfilter-selectable-selectall").each(function() {
        var filter = $(this).attr("filter");
        if (!filter) return;

        $(this).off("mousedown").pageBind("mousedown", function (e) {
          var $this = $(this);

          if($this.hasClass("serverguide-disabled"))
            return;

          var isSelected = $this.hasClass("serverguide-include");
          var isSelected2 = $this.hasClass("serverguide-noinclude");

          var isMultiSelectable = $this.hasClass("serverguide-selectable-multi");

          var checked = 0;

          if (isSelected || isSelected2) {
              $this.removeClass('serverguide-include');
              checked = 0;

              if (isMultiSelectable && !isSelected2) {
                  $this.addClass('serverguide-noinclude');
                  checked = 2;
              } else {
                  $this.removeClass('serverguide-noinclude').addClass('serverguide-exclude');
                  checked = 0;
              }
          } else {
            $this.removeClass('serverguide-exclude').addClass('serverguide-include');
            checked = 1;
          }

          var value = $this.attr("value");

          if (isMultiSelectable) {
            var selectOptions = value.split(",");
            value = (checked === 1 ? selectOptions[0] : (checked === 2 ? selectOptions[1] : null));
          }


          var inp = $("input[name=" + filter + "]");
          var elements = inp.val().split("|");
          if (inp.val() == "") {
              elements = [];
          }
          if (isSelected && !isMultiSelectable) {
            var index = $.inArray(value, elements);
            if (index > -1) {
              elements.splice(index, 1);
            }
          } else if (isMultiSelectable) {
            elements = [value];
          } else {
            elements.push(value);
          }

          inp.val(elements.join("|"));

          var subselection = 0;

          if(!$this.hasClass("serverguide-regionfilter-selectable-selectall")) {
            var numSiblings = $(this).siblings().length;
            $this = $(this);
            var len = $this.siblings(".serverguide-regionfilter-selectable.serverguide-include").length;
            var i = ($this.is(".serverguide-include") ? 1 : 0) + len;

            subselection += i;

            if((i == numSiblings && $this.siblings(".serverguide-regionfilter-selectable-selectall").hasClass("serverguide-exclude"))) {
              $this.siblings(".serverguide-regionfilter-selectable-selectall").trigger("mousedown");
            } else if(i != numSiblings && $this.siblings(".serverguide-regionfilter-selectable-selectall").hasClass("serverguide-include")) {
              $this.siblings(".serverguide-regionfilter-selectable-selectall").trigger("mousedown");
            }
          }

           var counter = $($('#serverbrowser-region-filter-show-' + $(this).parent().data("region") + ' span').get(1));
           if(subselection)
               counter.html("(" + subselection + ")");
           else
               counter.html("");


        });
      });

      var selectAll;
      $(".serverguide-regionfilter-selectable-selectall").pageBind("click", function(e) {
        selectAll = $(this);
        if (selectAll.hasClass("serverguide-include")) {
          selectAll.siblings(":not(.serverguide-include)").trigger("mousedown");
        } else {
          selectAll.siblings(":not(.serverguide-exclude)").trigger("mousedown");
        }
      });
    },

    /**
     * Highlight server
     * @param idx
     */
    highlightServerIndex: function(idx) {
      //S.debug("Highlighting server " + idx +  " (prev: " + this.serverHighlightIndex + ")");
      this.serverHighlightIndex = idx;
      this.refreshHighlight();
    },

    /**
     * Refresh highlight
     */
    refreshHighlight: function() {
      $('.serverguide-bodycells').removeClass("active");
      $('#serverguide-server-' + this.serverHighlightIndex + ' .serverguide-bodycells').addClass("active");
    },

    /**
     * Update friends playing on servers
     */
    updateFriendsPlayingOnServers: function() {
      var el = $("#serverguide-listcontainer");
      if (el.length) {
        var playingFriends = comcenter.getFriendsPlaying();
        var surfaces = el.find(".serverguide-surface-finder").parent();
        var surfaceCount = surfaces.length;

        for(var i=0; i<surfaceCount; i++) {
            var surface = $S(surfaces[i].id);
            var state = surface.getState();
            surface.update({"friendsOnServer": playingFriends[state.server.guid]});
        }
      }
      this.refreshHighlight();
    },
    
    /**
     * Set filter descriptions
     */
    setFilterDescription: function(greyOutMaps) {
      // This doesn't seem to be used anymore
      return;
      var self = this;
      clearTimeout(self.filterSurfaceTimeout);
      // TODO: feature detection instead of browser detection
      self.filterSurfaceTimeout = setTimeout(function() {
        if (greyOutMaps) {
          self.greyOutGameSelectionMaps();
        }
      }, ($.browser.msie ? 1200 : 300));
    },

    /**
     * Init search field
     */
    initSearchField: function() {
      var self = this;
      var q = $("#serverguide-search-input");
      var clear = function() {
        if (q.val() == q.attr("title")) { q.val(""); }
        // Show "filter-is-saved-receipt";
      };

      var submitfilter = function() {
        $("#serverguide-filter-saved").stop(true, true).fadeIn(200);
        clear();
      };

      var fill = function() {
        if (q.val() == "") { q.val(q.attr("title")); }
      };

      q.pageBind("focus", clear);
      q.pageBind("blur", function() {
        self.setFilterDescription();
        fill();
      });

      $("#serverguide-filter-form").pageBind("submit", submitfilter);
      fill();
    },

    /**
     *  renderFilterHeader loops through server filters and creates header
     */
    renderFilterHeader: function() {
        var filters = $("section.filter", self.element),
            filterString = "<ul>";

        filters.each(function (index, item) {
            var collectionName = $(item).find('h3').text(),
                checkboxes = $(':input[type="checkbox"]', item),
                checkedBoxes = $(':input[type="checkbox"][checked]', item),
                selectElements = $('select', item),
                textInputs = $('input[type="text"]', item);

            var id = checkboxes.attr("id");
            if (id === "useAdvanced") {
                var active = 0;
                if (checkedBoxes.length > 0) {
                    $("#serverfilter-advancedfilters-form input").each(function(){
                        if (this.type === "hidden") {
                            if (this.value === "1" || this.value === "0") active++;
                        } else if (this.type === "number") {
                            if (this.value != this.min && this.value != this.max) {
                                active++;
                            }
                        }
                    });
                    if (active > 0) filterString += '<li><strong>' + Surface.valOut(collectionName) + '</strong>: ' + active +'</li>';
                }
            } else if (id === "useLocation-input") {
                if (checkedBoxes.length > 0) {
                    var regions = $("#serverbrowser-country-serverfilter-popup input[name=countries]").val() || "";
                    regions = regions.split("|").length;
                    if (regions > 0) filterString += '<li><strong>' + Surface.valOut(collectionName) + '</strong>: ' + regions +'</li>';
                }
            } else {
                if(checkedBoxes.size() > 0) {
                    if(checkboxes.size() == checkedBoxes.size()) {
                        filterString += '<li><strong>' + Surface.valOut(collectionName) + '</strong>: All </li>'
                    } else {
                        filterString += '<li><strong>' + Surface.valOut(collectionName) + '</strong>: ' + $.map(checkedBoxes, function(element, i){
                            var filterLabel = "";
                            var  labelElement = $('label[for="' + $(element).attr('id') + '"]');
                            if ( labelElement.text()) {
                                filterLabel = labelElement.text();
                            }
                            else if ( labelElement.find('img').size) {
                                filterLabel =  labelElement.find('img').attr('alt');
                            }
                            return ' ' + Surface.valOut(filterLabel);
                        }).join() + '</li>';
                    }
                }

                if (checkboxes.size() == 0 && collectionName.length > 0) {

                    selectElements.each(function(){
                        if($(this).val() != -1) {
                            filterName = $('label[for="' + $(this).attr('id') + '"]').text();
                            if (filterName == '') {
                                filterName = $('label[for="' + $(this).attr('id') + '"] img').attr("alt");
                            }
                            filterString += '<li><strong>' + Surface.valOut(filterName) + '</strong>: ' + ($(this).val() == 1 ? "On" : "Off") + '</li>';
                        }
                    });

                    textInputs.each(function () {
                        if($(this).val().length > 0) {
                            filterName = $(this).attr('placeholder') ||  $(this).attr('name');
                            filterString += '<li><strong>' + Surface.valOut(filterName) + '</strong>: ' + Surface.valOut($(this).val()) + '</li>';
                        }
                    });

                }
            }
        });
        filterString += "</ul>";
        $('#custom-filter-list-content').html(filterString);
        
    },

    /**
     * Init guide filters
     */
    initGuideFilters : function() {
      var self = this;

      // Init new server filters
      $("section.filter", self.elems.filters)
        .filterControl()
        .pageBind("filterchange", function(e){
          S.debug("Filter "+e.label+" was changed to " + (e.value || "Any"));
          $(".serverguide-reset-filter-button").css("display", "inline");

          self.renderFilterHeader();
        });

      // Rest is old filters
      $("#serverguide-search-input").pageBind("focus", function() {
        $(".serverguide-apply-filter-button").attr("disabled", false);
      });

      $("#serverguide-filtertoggle").pageBind("click", function(e) {
        if($(e.target).hasClass("serverguide-reset-filter-button")) {
          self.resetFilters(e.target);
          return false;
        }

        if (  !$(e.target).is("input[type='submit']") &&
                !$(e.target).hasClass("serverguide-apply-filter-button") &&
                !$(e.target).parent().hasClass("serverguide-apply-filter-button")
          ) {

          //var elements = $("#serverguide-filters, #serverguide-apply-filters");

          if ($("#serverguide-filters").is(":visible")) {
            $("#serverguide-filters").hide();
            $("#serverguide-apply-filters").hide();
            $("#serverguide-filtertoggle").addClass("serverguide-filtertoggle-contracted").removeClass("serverguide-filtertoggle-expanded");
            $("#serverguide-filter-form").addClass("serverguide-filter-form-contracted");
            $("#serverguide-change-link").show();
            $.browserStorage.set("serverfilter-hidden", true);
          } else {
            $("#serverguide-filters").show();
            $("#serverguide-apply-filters").show();
            $("#serverguide-filtertoggle").removeClass("serverguide-filtertoggle-contracted").addClass("serverguide-filtertoggle-expanded");
            $("#serverguide-filter-form").removeClass("serverguide-filter-form-contracted");
            $("#serverguide-change-link").hide();
            $("#serverguide-search-input").focus();
            $.browserStorage.deleteKey("serverfilter-hidden");
          }
        }
      });

      self.setFilterDescription();
      $("input[type=hidden]").pageLive("newvalue", function(e) {
        self.setFilterDescription();
      });

      self.addSelectableTriggers();

      $("#serverguide-join-random").pageBind("click", function() {
          // Select a random server from the list
          var itemCount = $("#serverguide-result .serverguide-cell-join form").size();
          var idx = Math.floor(Math.random() * itemCount);
          $("#serverguide-server-" + idx + " .serverguide-cell-join form input[type=submit]").click();
      });
    },

    /*
     * Add selectable triggers
     */
    addSelectableTriggers: function() {
      var self = this;
      $(".serverguide-selectable").each(function() {
        var filter = $(this).attr("filter");
        if (!filter) return;

        $(this).pageBind("mousedown", function(e) {
          var $this = $(this);
          if($this.hasClass('serverguide-disabled')) return;

          var isSelected = $this.hasClass('serverguide-include');
          var isSelected2 = $this.hasClass('serverguide-noinclude');

          var isMultiSelectable = $this.hasClass("serverguide-selectable-multi");

          var checked = 0;

          if (isSelected || isSelected2) {
            $this.removeClass('serverguide-include');
            checked = 0;

            if (isMultiSelectable && !isSelected2) {
              $this.addClass('serverguide-noinclude');
              checked = 2;
            } else {
              $this.removeClass('serverguide-noinclude').addClass('serverguide-exclude');
              checked = 0;
            }
          } else {
            $this.removeClass('serverguide-exclude').addClass('serverguide-include');
            checked = 1;
          }

          var value = $this.attr("value");

          if (isMultiSelectable) {
            var selectOptions = value.split(",");
            value = (checked === 1 ? selectOptions[0] : (checked === 2 ? selectOptions[1] : null));
          }

          var inp = $("input[name=" + filter + "]");
          var elements = inp.val().split("|");
          if (inp.val() == "") {
            elements = [];
          }
          if (isSelected && !isMultiSelectable) {
            var index = $.inArray(value, elements);
            if (index > -1) {
              elements.splice(index, 1);
            }
          } else if (isMultiSelectable) {
            elements = [value];
          } else {
            elements.push(value);
          }

          inp.val(elements.join("|"));

          // gray out maps that aren't supported
          if (filter == "gamemodes" && false) {

            // currently all maps have all modes
            var noGameModesSelected = true;
            $(".serverguide-selectable[filter='gamemodes']").each(function() {
              if($(this).hasClass("serverguide-include"))
                noGameModesSelected = false;
            });

            if(noGameModesSelected) {
              $(".serverguide-filter-gamemode input[name='gamemodes']").val("");
              $(".serverguide-selectable[filter='maps']").removeClass("serverguide-disabled");
            }

            // Don't gray out if none is selected
            if(!noGameModesSelected) {
              $(".serverguide-selectable[filter='maps']").each(function() {
                var mapmode = false;
                var mapmodes = $(this).attr("modes").toLowerCase();

                for (var i = 0; i <= elements.length; i++) {
                    if(elements[i] === undefined)
                      continue;

                    if (mapmodes.indexOf(elements[i].toLowerCase()) > -1)
                      mapmode = true;
                }

                if (mapmode)
                    $(this).removeClass("serverguide-disabled");
                else
                    $(this).addClass("serverguide-disabled");
              });
            }
          }

          var val = $(this).attr("value");
          self.setFilterDescription(val == "bfbc2" || val == "bfbc2nam");
        });
      });
    },

    /*
     * Add advanced selectable triggers
     */
    addAdvancedSelectableTriggers: function() {
      $('.popup-serveradvancedfilter-input[type="number"]').forceNumeric();

      // Fix max length attribute for chrome
      $('.popup-serveradvancedfilter-input[type="number"][maxlength]').keyup(function(e){
        if (this.value.length > $(this).attr("maxlength")){
          this.value = this.value.slice(0, $(this).attr("maxlength"));
        }
      });

      $(".serverguide-advancedfilter-selectable").each(function() {
        var filter = $(this).attr("filter");
        if (!filter) return;

        $(this).pageBind("mousedown", function(e) {
          var $this = $(this);

          if ($this.hasClass('serverguide-disabled')) return;

          var isSelected = $this.hasClass('serverguide-include');
          var isSelected2 = $this.hasClass('serverguide-noinclude');
          var isMultiSelectable = $this.hasClass("serverguide-selectable-multi");
          var checked = 0;

          if (isSelected || isSelected2) {
            $this.removeClass('serverguide-include');
            checked = 0;

            if (isMultiSelectable && !isSelected2) {
              $this.addClass('serverguide-noinclude');
              checked = 2;
            } else {
              $this.removeClass('serverguide-noinclude').addClass('serverguide-exclude')
              checked = 0;
            }
          } else {
            $this.removeClass('serverguide-exclude').addClass('serverguide-include');
            checked = 1;
          }

          var value = $this.attr("value");

          if (isMultiSelectable) {
            var selectOptions = value.split(",");
            value = (checked === 1 ? selectOptions[0] : (checked === 2 ? selectOptions[1] : null));
          }

          var inp = $("input[name=" + filter + "]");
          var elements = inp.val().split("|");
          if (inp.val() == "") {
              elements = [];
          }
          if (isSelected && !isMultiSelectable) {
            var index = $.inArray(value, elements);
            if (index > -1) {
              elements.splice(index, 1);
            }
          } else if (isMultiSelectable) {
            elements = [value];
          } else {
            elements.push(value);
          }

          inp.val(elements.join("|"));
        });
      });
    },


    /*
     * Grey out game selection maps
     */
    greyOutGameSelectionMaps: function() {
      var bc2 = $(".serverguide-selectable[value='bfbc2']")
              .hasClass("serverguide-include");
      var nam = $(".serverguide-selectable[value='bfbc2nam']")
              .hasClass("serverguide-include");

      $("[filter='maps']").removeClass("serverguide-disabled");

      if(bc2 && !nam) {
        $(".serverguide-include[value*='NAM']").trigger('click');
        $("div[value*='NAM']")
                .addClass("serverguide-disabled")
                .removeClass("serverguide-include")
                .addClass("serverguide-exclude");
      }

      if(!bc2 && nam) {
        $(".serverguide-include[filter='maps']:not([value*='NAM'])").trigger('click');
        $("[filter='maps']:not([value*='NAM'])")
                .addClass("serverguide-disabled")
                .removeClass("serverguide-include")
                .addClass("serverguide-exclude");
        $("div[value*='NAM']").removeClass("serverguide-disabled");
      }

      var maps = "";
      $(".serverguide-selectable[filter='maps']").filter(".serverguide-include").each(function() {
        maps = maps+"|"+ $(this).attr("value");
      });

      if ($("input[name='maps']").size == 1) {
        $("input[name='maps']").val(maps);
      }
        
      this.setFilterDescription();
    },

    /*
     * Show query server result
     */
    showQueryServerResult : function(game, server) {
      S.debug("QueryServerResults: " + server);
    },

    /*
     * Invite to server
     */
    inviteToServer : function(userId, guid) {
      var params = {"userId": userId, "guid": guid};
      var url = Surface.Modifier.urlformat('/{_section}/{_language}/comcenter/inviteToServer/', Surface.urlContext, params);
      base.ajaxPostJson(url, function(success, response) {
        if (success) S.debug(response);
      });
    },

    /*
     * Add favorite
     */
    addFavorite: function(url, guid, surface_id) {
      var self = this,
          surf = $S(surface_id);
      $.ajax({
        url: url,
        dataType: "json",
        type: "POST",
        data: "guid="+guid+"&post-check-sum=" + S.globalContext.session.postChecksum, //form.serialize(),
        complete: base.onComplete(function(success, response) {
          if (success) {
            var favorite_row_id = ".serverguide-favorites-list div[guid='" + guid + "']";
            if (response.message == "GAMESERVERBOOKMARK_REMOVED") {
              base.showReceipt("Removed server from favorites", "checkbox");

              if ($(favorite_row_id).length) {
                  $(favorite_row_id).fadeOut();
              }
            }
            else {
              base.showReceipt("Added server to favorites", "checkbox");

              if ($(favorite_row_id).length) {
                  $(favorite_row_id).fadeIn();
              }
            }

            S.globalContext.favGuids.push(guid);
            surf.refresh();
          }
          else {
            surf.refresh();
          }

          // Update the live scoreboard box
          self.liveScoreboard();

          $(".serverguide-add-favorite-loading").hide();
          $(".serverguide-add-favorite-toggle").show();

          if (response.message == "GAMESERVERBOOKMARK_REMOVED") {
              $(".serverguide-add-favorite-toggle").removeClass("isFavorite").find("span").text ("Add as favorite");
          }
        }, false)
      });
    },


    /*
     * Select first server in list
     */
    selectFirstServer: function() {
      $("#serverguide-result .serverguide-bodycells:first .serverguide-bodycell:first").click();
    },
    
    /**
     * Update the server page and scoreboard with current live data
     */
    updateServerScoreboard: function() {
      var guid = $("#server-guid").attr("value");
      var url = $("#serverguide-show-url").val().replace("%GUID%", guid);
  
      base.ajaxGetJson(url, function(success, response) {
        if (success) {
          var serverinfo = response['message']['SERVER_INFO'];
          $S("serverguide-scoreboard").update({ "scoreboard": serverinfo });
        }
      });
    },
  
    /**
     * Continuous live updating of the scoreboard. This function calls itself.
     */
    liveUpdateServerScoreboard: function() {
      this.updateServerScoreboard();
      this.activeScoreboard = setTimeout(serverguide.pageLiveUpdateServerScoreboard, 5000);
    },
  
    /**
     * Stop live updating the server scoreboard
     */
    stopUpdateServerScoreboard: function() {
      clearTimeout(this.activeScoreboard);
    },

      /**
       * Live Scoreboard
       */
      liveScoreboard: function() {
        if (base.liveScoreboardEnabled(S.globalContext.realm.section, platforms.PC)) {
              var $joinMpServerButton = $("#serverguide-show").find("button[data-bind-action$=join-mp-gameserver]");
              var update, server = {
                  ip: $joinMpServerButton.data("ip"),
                  gameId: $joinMpServerButton.data("gameid"),
                  port: $joinMpServerButton.data("port"),
                  game: $joinMpServerButton.data("game"),
                  guid: $joinMpServerButton.data("guid")
              };
              launcher.queryServer({"gameId": server.gameId, "game": server.game, "ip": server.ip, "port": server.port, "guid": server.guid}, function(queryInfo) {
                  switch (queryInfo.status) {
                      case "OK":
                          // 205 is a bug that will make the scoreboard look bad
                          if ((queryInfo.result.teams.length > 0) && (queryInfo.result.teams[0].status.teamId == 205)) {
                              update = { "errormessage": "ID_WEB_SERVERGUIDE_SCOREBOARD_NO_DATA" };
                          } else {
                              update = { "scoreboard": queryInfo };
                          }
                          break;

                      case "NOT_SUPPORTED":
                          update = { "errormessage": "ID_WEB_SERVERGUIDE_SCOREBOARD_NOT_SUPPORTED" };
                          break;

                      case "NO_PLUGIN":
                          update = { "errormessage": "ID_WEB_SERVERGUIDE_SCOREBOARD_NO_PLUGIN" };
                          break;

                      case "TIMEOUT":
                          update = { "errormessage": "ID_WEB_SERVERGUIDE_SCOREBOARD_TIMEOUT" };
                          break;

                      default:
                          update = { "errormessage": "ID_WEB_SERVERGUIDE_SCOREBOARD_UNKNOWN_ERROR" };
                          break;
                  }
                  $S("selected-server-scoreboard").update(update);
              });
          }

      }
  });

  // Plugin wrapper
  $.fn.serverBrowser = function(options){
    return this.each(function () {
      if (!$.data(this, pluginName.toLowerCase())) {
        $.data(this, pluginName.toLowerCase(), new ServerBrowser(this, options));
      }
    });
  };

}(jQuery, window, document));

var browser;
var serverguide = {
  init: function() {
      browser = $("#serverguide-content").serverBrowser().data("serverbrowser");
  },
  onPageShow: function() {
      if(!browser) {
          serverguide.init();
      }

      if(browser) {
          browser.onPageShow();
      }
  },
  setupGunMasterReport: function(){
    if ($(".gm-progress").size() == 0) return;
    $(".gm-progress .players div").tooltip();

    if (!this.gm_event_set_up){
        this.gm_event_set_up = true;
        $(".gm-progress .players div")
            .pageLive("mouseenter", function(){
                $('.players-score-table tr[data-personaid="'+ $(this).data("personaid") +'"]').addClass("highlighted");
            })
            .pageLive("mouseleave", function(){
                $('.players-score-table tr[data-personaid="'+ $(this).data("personaid") +'"]').removeClass("highlighted");
            });
        $(".players-score-table tr")
            .pageLive("mouseenter", function(){
                $('.gm-progress .players div[data-personaid="'+ $(this).data("personaid") +'"]').addClass("highlighted");
            })
            .pageLive("mouseleave", function(){
                $('.gm-progress .players div[data-personaid="'+ $(this).data("personaid") +'"]').removeClass("highlighted");
            });
    }
  },
    reportServer : function(id, type){
        if(confirm("Do you really want to report this server?")){
            rep = ""
            switch(type){
                case 2: rep = "Report boosting"; break;
                case 3: rep = "Report content"; break;
            }

            if(rep){
                $.ajax( { url: "/bf3/servers/reportserver",
                dataType: "json",
                type: "POST",
                data: {
                    guid: id,
                    reason: rep,
                    "post-check-sum": S.globalContext.session.postChecksum
                }}).complete(function(){
                    $.ga.trackServerReportEvent(rep);
                    base.showReceipt("A report has been sent", "checkbox");
                }, false);
            }
        }
        $(".common-reportbutton-container").removeClass("active");
    }
};
;var serverguideList = {

    autobrowseCount: 30,
    windowWidth: jQuery(window).width(),
    windowHeight: jQuery(window).height(),
    fixPosition: 0,

    initServerListing : function()
    {
        serverguideList.fixPosition = (serverguideList.windowWidth-992)/2+656;
        var isResized = false;
        var keepPolling = false;

        var poller = setInterval(function()
        {
            if (!isResized) return;
            isResized = false;
            serverguideList.onResize();
        }, 350);

        $.leavePage(function() { clearInterval(poller); });
        $.leavePage(function() {
            $("#serverguide-listcontainer").autobrowse("unbind");
        });
        $(window).pageBind("resize", function() { isResized = true; });



        /* User has javascript, enable all buttons (we handle missing login/plugin/etc on the click instead */
        browser.sorter.getAllServerSurfaceIds();
        for (var i in browser.sorter.serverguideSurfaceIds)
        {
            $S(browser.sorter.serverguideSurfaceIds[i]).getState()["formEnabled"] = 1;
        }

        serverguideList.pingServerList();
    },

    debugPingServers : function(ips)
    {
        return launcher.getInstance(function(obj) {
            return obj.pingBatch("LOG_INSTEAD_OF_CALLBACK", ips);
        });
    },
    debugMakeIps : function(n, prefix)
    {
        if (!prefix) prefix = "192.168.1.";
        ips = [];
        for (var i = 0; i < n; i++) {
            ips.push(prefix + i);
        }
        return ips;
    },

    pingServerList : function()
    {
        // Ping servers
          var serversToPing = {};
          $("#serverguide-result .serverguide-bodycells").each(function()
          {
              var item = $(this);
              serversToPing[item.attr("idx")] = item.attr("ip");
          });

          launcher.pingServers(serversToPing);
    },

    measureSurfUpdate : function()
    {
          var serverIds = [];
          $("#serverguide-result .serverguide-bodycells").each(function()
          {
              serverIds.push($(this).attr("idx"));
          });
          var times = [];
          for (var i in serverIds)
          {
              var idx = serverIds[i];
              var surf = $S("serverguide-server-" + idx);
              if (surf.rendered())
              {
                  surf.getState()["ping"] = parseInt(Math.random() * 100);
                  var start = new Date();
                  surf.refresh();
                  var end = new Date();
                  times.push(end - start);
              }
          }
          S.debug(times);
    },


    onResize : function()
    {
        serverguideList.windowWidth = jQuery(window).width();
        serverguideList.windowHeight = jQuery(window).height();

//        var fixElement = $("#serverguide-show-column");
//        serverguideList.fixPosition = (serverguideList.windowWidth-992)/2+656;
//        if (fixElement.css("position") == "fixed")
//        {
//            fixElement.css({"left": serverguideList.fixPosition });
//            serverguideList.setServerShowHeight();
//        }

    },

    setServerShowPosition : function() {

    },

    setServerShowHeight : function()
    {
        var initialContentHeight = $("#serverguide-middle").height();
        if(initialContentHeight < 615)
            initialContentHeight = 615;
        $("#serverguide-middle").css("min-height", initialContentHeight+"px");
    },

    setServerListAutoBrowse : function()
    {
        var pingServers = {};
        var ipArray = new Array();
        $("#serverguide-listcontainer").autobrowse(
        {
            url: function (offset, count)
            {
                var urlParts = Surface.ajaxNavigation.getCurrentUrl().split("?");
                if(urlParts[1] == undefined) {
                    urlParts = Surface.ajaxNavigation.getCurrentUrl().split("%3F");
                }
                var addParams = urlParts.length > 1 ? ("&" + urlParts[1]) : "";
                var request = $("#serverguide-autobrowse-url").val() + "?offset="+offset+"&count="+count+addParams;
                return request;
            },

            template: function (response)
            {
                var markup="<div class='serverguide-autobrowse-divider'></div>";

                var surfaceIds = browser.sorter.getAllServerSurfaceIds();
                var currentTopSurfaceId = 0;
                for (var i = 0; i < surfaceIds.length; i++)
                {
                    var sId = surfaceIds[i];
                    var id = parseInt(sId.split("-")[2]);
                    currentTopSurfaceId = Math.max(id, currentTopSurfaceId);
                }

                var playingFriends = comcenter.getFriendsPlaying();

                for (var i=0; i<response.data.length; i++) {
                    var idx = i + parseInt(currentTopSurfaceId) + 1 ;
                    pingServers[idx] = response.data[i]['ip'];
                    var serverGame = response.data[i].game;
                    var serverMap = response.data[i].map;
                    var mapInfo = $S.callFunction("common.mapinfo", serverGame, serverMap);
                    var friendsOnServer =  playingFriends[response.data[i].guid];
                    var server = { server: response.data[i], ping: "-", isFavourite: false, friendsOnServer: friendsOnServer, formEnabled: 0, mapinfo: mapInfo, idx: idx, iteration: parseInt(idx)+1};
                    markup += $S("serverguide.serverrow").render(server);
                }

                return markup;
            },

            itemsReturned: function (response) { return response.data.length; },
            onComplete: function () {
                launcher.pingServers(pingServers);
                browser.sorter.refreshSortings();
                browser.sorter.getAllServerSurfaceIds();

//                $(".serverguide-autobrowse-divider").animate({display: "none"}, "slow");
                pingServers = {};
            },


            count: serverguideList.autobrowseCount,
            offset: S.globalContext.staticContext.serverBrowserPageSize || 30,
            totalCount: S.globalContext.staticContext.serverBrowserMaxSize || 300,
            loader: '<div class="loader"></div>',
            useCache: false,
            sensitivity: 0
        });
    }
};;var serverguideShow = {
    active_scoreboard: 0,
    live_scoreboard_storage: [],

    initServerShow : function()
    {
        if($("#server-header").length == 0) {
           //S.debug("Not a valid server.");
           return;
        }

        serverguideShow.serverShowPlayersSelector();

        var refreshPing = function()
        {
            return launcher.getInstance(function(plugin) {
                // Don't try to ping if the user doesn't have the plugin installed
                if (!plugin) {
                    return;
                }

                // Get the ip
                try {
                    var ip = $("#server-info").attr("ip");
                }
                catch(e)
                {
                    S.error(e);
                    return false;
                }

                var pingResult = function(event, serverLatencys)
                {
                    launcher.unregisterForEvent('pingResult', pingResult);

                    jQuery.each(serverLatencys, function(serverId, latency)
                    {
                        if (serverId == ip && latency >= 0)
                        {
                            var latencyString = parseInt(latency) < 0 ? "-" : latency;
                            $S("serverguide-show-info-ping").update({"server": {"ping": latencyString}});
                        }
                    });
                };

                launcher.registerForEvent('pingResult', pingResult);
                var pingServer = {};
                pingServer[ip] = ip;
                launcher.pingServers(pingServer);
            });
        };

        $("#serverguide-show-favorite").pageLive("click", function()
        {
            $(this).hide();
            $("#serverguide-show-favorite-loader").show();
            var form = $(this).children("form");

            $.ajax( {url: form.attr("action"), dataType: "json", type: "POST", data: form.serialize(),
                     complete: base.onComplete(function(success, response)
                     {
                        if (success)
                        {
                            surf.update({"isFavorite": response.message == "GAMESERVERBOOKMARK_ADDED"});
                        }
                        else
                        {
                            surf.refresh();
                        }
                     }, false)
                   });
        });

        refreshPing();

        $("#serverguide-show-refresh").pageLive("click", function()
        {
            refreshPing();
        });

        var setLiveUpdateStatus = function(status){
            if (status){
                $("#live-selector-off").removeClass("selected");
                $("#live-selector-on").addClass("selected");
                serverguideShow.live_update_server_scoreboard();
            } else {
                $("#live-selector-on").removeClass("selected");
                $("#live-selector-off").addClass("selected");
                clearTimeout(serverguideShow.active_scoreboard);
                serverguideShow.active_scoreboard = 0;
            }
        };

        $("#live-selector li").pageLive("click", function(e){
            var update_status = ($(this).attr("id") == "live-selector-on");
            window.location.hash = (update_status) ? "live" : "";
            setLiveUpdateStatus(update_status);
        });

        // Check if live-update is turned on through hash
        if (new RegExp("live").test(window.location.hash)) setLiveUpdateStatus(true);
        if (serverguideShow.active_scoreboard) window.location.hash = "live";

        // Make sure the live-update status is passed along when the scoreboard is refreshed
        $(".serverguide-header-refresh-button a").on("click", function(){
            $(this)[0].hash = (serverguideShow.active_scoreboard) ? "live" : "";
        });

        serverguideShow.highlight_squads();

        setTimeout(function() {
            $("#server-info-maprotation-slider-wrapper").sodaSlider({ centered: false });
        }, 1000);
    },

    serverShowPlayersSelector: function() {
        if (base.liveScoreboardEnabled(S.globalContext.realm.section, platforms.PC)) {
            serverguideShow.live_scoreboard_storage = [];
            serverguideShow.update_server_scoreboard();
        } else {
            $S("serverguide-scoreboard").update({ "showplayers": "true" });
        }
    },

    /**
     * Update the server page and scoreboard with current live data
     */
    update_server_scoreboard: function() {
        // If the user is no longer on the show view, abort live updating..
        if ($("#serverguide-scoreboard").size() == 0){
            clearTimeout(serverguideShow.active_scoreboard);
            serverguideShow.active_scoreboard = 0;
            return;
        }

        var $joinMpServerButton = $("#server-header").find("button[data-bind-action$=join-mp-gameserver]");
        var server = {
          ip: $joinMpServerButton.data("ip"),
          gameId: $joinMpServerButton.data("gameid"),
          port: $joinMpServerButton.data("port"),
          game: $joinMpServerButton.data("game"),
          guid: $joinMpServerButton.data("guid")
        };

        launcher.queryServer({"gameId": server.gameId, "game": server.game, "ip": server.ip, "port": server.port, "guid": server.guid}, function(queryInfo) {
            if (queryInfo.status == "OK") {
                S.debug(queryInfo);
                var teams = queryInfo.result.teams;
                var live_updating = false;

                if (teams[0].status.teamId != 205) {    // If a team have number 205, game is in EOR or restarting, so we just don't refresh
                    if (serverguideShow.active_scoreboard) {
                        // If there's an active setTimeout, send variable live_updating to template to show the correct state
                        live_updating = true;
                    }
                    $S("serverguide-scoreboard").update({ "scoreboard": queryInfo, "liveupdating": live_updating });

                    for (var team in teams) {
                        for (var player in teams[team].players) {
                            var player_data = JSON.stringify(teams[team].players[player]);
                            var player_id = teams[team].players[player].personaId;

                            if (serverguideShow.live_scoreboard_storage[player_id] != player_data) {
                                $("#p-" + player_id).animate({ backgroundColor: "#ffe6a1" }, "slow", function() {
                                    $(this).animate({ backgroundColor: "#FFF" }, "slow", function(){
                                        // When the animation is done, reset background color to enable hover highlights again
                                        $(this).css("background-color", "");
                                    });
                                });
                                serverguideShow.live_scoreboard_storage[player_id] = player_data;
                            }
                        }
                    }

                    serverguide.setupGunMasterReport();

                } else {
                    $("#serverguide-scoreboard table").addClass("locked");
                }
            } else {
                // Live Scoreboard is not supported and we'll show the list of players instead
                $S("serverguide-scoreboard").update({ "showplayers": "true" });
            }
        });
    },

    live_update_server_scoreboard: function() {
        clearTimeout(serverguideShow.active_scoreboard);
        serverguideShow.update_server_scoreboard();
        serverguideShow.active_scoreboard = setTimeout(serverguideShow.live_update_server_scoreboard, 3000);
    },

    /**
     * Highlight players squad members when user hovers on a player
     */
    highlight_squads: function() {
        $("#serverguide-scoreboard tbody tr").pageLive("mouseenter", function() {
            var squad = $(this).attr("class");
            $("#serverguide-scoreboard ." + squad).find(".squad-box").addClass("active");
        }).pageLive("mouseleave", function() {
            $("#serverguide-scoreboard .squad-box").removeClass("active");
        });
    }
};;;(function($, window, document, undefined){

  // Constructor
  function ServerBrowserSorter () { }

  // Plugin
  $.extend(ServerBrowserSorter.prototype, {
    surfaceIds: [],
    sortings: [],

    /**
     * Init
     */
    init: function() {
      this.refreshSortings();
      this.setupSort();
    },

    /**
     * Refresh sortings
     */
    refreshSortings: function() {
      var ASC = false,
          DESC = !ASC;

      /* Object with sortable columns
       defaultOrder: default sort order
       sortFunc: function to return sort value from surface state] */
      this.sortings = {
            friend: {
               defaultOrder: DESC,
                sortFunc: function(state){ return (state["friendsOnServer"]) ? state["friendsOnServer"].length : 0; }
            },
            name: {
                defaultOrder: ASC,
                sortFunc: function(state){ return state["server"]["name"].toLowerCase(); }
            },
            players: {
                defaultOrder: DESC,
                sortFunc: function(state) {
                    // TODO: Use proper enums for GameServerSlotType.SOLDIER
                    return state["server"]["slots"][2].current + state["server"]["slots"][2].max/1000;
                }
            },
            map: {
                defaultOrder: ASC,
                sortFunc: function(state){ return state["mapinfo"]["name"]; }
            },
            mode: {
                defaultOrder: ASC,
                sortFunc: function(state){ return S.translations["ID_WEB_COMMON_GAMEMODE_" + state["server"]["mapMode"]]; }
            },
            ranked: {
                defaultOrder: DESC,
                sortFunc: function(state){ return state["server"]["ranked"]; }
            },
            pb: {
                defaultOrder: DESC,
                sortFunc: function(state){ return state["server"]["punkbuster"]; }
            },
            type: {
                defaultOrder: ASC,
                sortFunc: function(state){ return state["server"]["preset"] === 2 ? 1337 : state["server"]["preset"]; }
            },
            ping: {
                defaultOrder: ASC,
                sortFunc: function(state){ return state["ping"]; }
            }
        };
    },

    /**
     * Setup sort
     */
    setupSort: function() {
      var self = this,
        sortings = self.sortings,
        divider = $(".serverguide-autobrowse-divider");

      for (var key in sortings) {
        $(".serverguide-sorting-" + key)
          .data("sort", key)
          .css("cursor", "pointer")
          .pageBind("click", function(){
            var cell = $(this),
              sort_key = cell.data("sort"),
              sorting = sortings[sort_key],
              reverse = cell.hasClass("serverguide-sort-up");

            if (divider.length){
              divider.remove();
            }

            /* This is not already sorted, use the default sort order */
            if (!reverse && !cell.hasClass("serverguide-sort-down")){
              reverse = sorting.defaultOrder;
            }

            // Perform sort
            self.doSort(sort_key, reverse);

            // Store current search values in cookie
            var cookieVal = sort_key + "###" + reverse;
            S.cookieSet("serverguide-sort-by-value", cookieVal, 360, "/");
        });
      }

      // Get the default sorting from cookie, unless we're on the history tab
      if ($("#serverguide-middle .tabs").data("active") != "history"){
        try {
          var sortBys = S.cookieGet("serverguide-sort-by-value").split("###"),
            reverse = sortBys[1] !== "false";
          if (sortBys[0] != "ping"){
            this.doSort(sortBys[0], reverse);
          } else {
            $(".serverguide-sorting-ping").addClass( reverse ? "serverguide-sort-down" : "serverguide-sort-up" );
          }
        } catch(err) {
          S.debug(err);
        }
      }
    },

    /**
     * Do sort
     * @param key
     * @param reverse
     */
    doSort: function(key, reverse){
      $(".serverguide-sorter").removeClass("serverguide-sort-down").removeClass("serverguide-sort-up");
      $(".serverguide-sorting-" + key).addClass( reverse ? "serverguide-sort-down" : "serverguide-sort-up" );
      $(".serverguide-list").attr("data-sorting", key);

      if (this.sortings.hasOwnProperty(key) && this.sortings[key] !== undefined) {
          this.sortSurfaces($("#serverguide-listcontainer"), this.getAllServerSurfaceIds(), this.sortings[key].sortFunc, reverse);
      }

      browser.selectFirstServer();
    },


    /**
     * Sort by ping
     */
    sortByPing: function() {
      try {
        var sortByValue = S.cookieGet("serverguide-sort-by-value");
        var sortBys = sortByValue.split("###");
        if(sortBys[0] == "ping") {
          var container = $("#serverguide-listcontainer");
          var path = function(state) { return state["ping"]; }
          var reverse = sortBys[1] === "false" ? false : true;
          this.sortSurfaces(container, this.getAllServerSurfaceIds(), path, reverse);
        }
       // browser.selectFirstServer();  // e3 issue
      } catch (err) { }
    },


    /**
     * Get all surface Ids
     */
    getAllServerSurfaceIds: function() {
      var ids = [];
      $("#serverguide-listcontainer").children().each(function() {
          var thisId = $(this).attr("id"); // AJAX loading a new set of servers adds a div without serverguide id
          if (thisId != undefined){
              thisId = thisId.split("-");
              if (thisId[2] != undefined){
                  ids.push( "serverguide-server-" + thisId[2] );
              }
          }
      });
      this.surfaceIds = ids;
      return ids;
    },

    /**
     * Sort all surfaces
     * @param containerElement
     * @param surfaceIds
     * @param getStateValue
     * @param reverse
     */
    sortSurfaces: function(containerElement, surfaceIds, getStateValue, reverse) {
      /*
          containerElement: the jQuery element that surrounds the surfaces ( ie .parent() )
          surfaceIds: a list of strings with ids of the surfaces to sort
          getStateValue: a function that takes a surface state object and returns a value to sort by
          reverse: boolean whether to reverse the sort or not
       */
      this.surfaceIds.sort(function(surfA, surfB) {

        var valA = getStateValue( $S(surfA).getState() ),
            valB = getStateValue( $S(surfB).getState() );

        typeof valA === 'undefined' && typeof valB === 'string' && (valA = '');
        typeof valB === 'undefined' && typeof valA === 'string' && (valB = '');
        typeof valA === 'undefined' && typeof valB === 'undefined' && (valA = 9999, valB = 9998);

        if (valA === "-")
            valA = 9999;

        if (valB === "-")
            valB = 9998;

        var cmp = surfA > surfB ? 1 : -1; /* Never return 0 since Array.sort in chrome/mozilla is not stable */
        if (valA > valB) cmp = 1;
        else if (valA < valB) cmp = -1;

        return cmp;
      });

      var elements = [], i, surfaceId;
      for (i in this.surfaceIds) {
        surfaceId = this.surfaceIds[i];
        elements.push($("#" + surfaceId).detach());
      }

      if (reverse) {
        elements.reverse();
      }

      for (i in elements) {
        elements[i].appendTo(containerElement);
      }
    }
  });

  // Extend serverBrowser
  var singleton;
  $.extend($.fn.serverBrowser, {
    initSorter: function () {
      if (!singleton) singleton = new ServerBrowserSorter();
      return singleton;
    }
  });

}($, window, document));;var block_serverguide_base = new Surface.BlockConfig('base.ajaxindex', {'titleComponent': 'serverguide.base.block_titleComponent', 'bodyClass': 'serverguide.base.block_bodyClass', 'serverguideContent': 'serverguide.base.block_serverguideContent', 'mainContent': 'serverguide.base.block_mainContent', 'serverguideFilters': 'serverguide.base.block_serverguideFilters'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('base'));
serverguide.base.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_base;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.base');
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('base.ajaxindex', o, b, kwargs);
}
;
serverguide.base.block_titleComponent = new Surface.Block('serverguide.base.block_titleComponent');
serverguide.base.block_titleComponent.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(Surface.valOut("Multiplayer"));
	c.push(" - ");
	return c.join("");
}
;
serverguide.base.block_bodyClass = new Surface.Block('serverguide.base.block_bodyClass');
serverguide.base.block_bodyClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" ");
	c.push(Surface.valOut(((typeof(o) != "undefined" && o !== null && typeof(o.serverguideAction) != "undefined" && o.serverguideAction !== null) ? o.serverguideAction : "")));
	c.push("\n");
	return c.join("");
}
;
serverguide.base.block_serverguideFilters = new Surface.Block('serverguide.base.block_serverguideFilters');
serverguide.base.block_serverguideFilters.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	return c.join("");
}
;
serverguide.base.block_serverguideContent = new Surface.Block('serverguide.base.block_serverguideContent');
serverguide.base.block_serverguideContent.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	return c.join("");
}
;
serverguide.base.block_mainContent = new Surface.Block('serverguide.base.block_mainContent');
serverguide.base.block_mainContent.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_url;
	var l_session;
	c.push(" ");
	c.push(Surface.importTemplate(("popup" + ("." + "showIntro")), {"section": "serverbrowser"}, null, kwargs));
	c.push("\n");
	l_session = S.Modifier.get(Surface.globalContext, "session");
	c.push("\n <div style=\"margin-bottom:10px;top:0px;\" class=\"base-usermsg-general base-usermsg-");
	c.push(Surface.valOut(((typeof(o) != "undefined" && o !== null && typeof(o.userMessageBox) != "undefined" && o.userMessageBox !== null && typeof(o.userMessageBox.type) != "undefined" && o.userMessageBox.type !== null) ? o.userMessageBox.type : "information")));
	if (((typeof(o) != "undefined" && o !== null && typeof(o.userMessageBox) != "undefined" && o.userMessageBox !== null) && o.userMessageBox)) {
		c.push(" base-show");
	}
	c.push("\">\n <p>");
	c.push(Surface.valOut(((typeof(o) != "undefined" && o !== null && typeof(o.userMessageBox) != "undefined" && o.userMessageBox !== null && typeof(o.userMessageBox.message) != "undefined" && o.userMessageBox.message !== null) ? o.userMessageBox.message : "")));
	c.push("</p>\n </div>\n <div class=sitenotification>\n");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.notification) != "undefined" && o.notification !== null) ? o.notification : 0)) {
		c.push(" ");
		c.push(Surface.importTemplate(("main" + ("." + "notice")), {"notification": o.notification}, null, kwargs));
		c.push("\n");
	}
	c.push(" </div>\n <div id=\"serverguide-middle\" class=\"base-middle\">\n <div class=\"tabs-outer\">\n <div class=\"tabs-container\">\n <h1 class=\"base-big-title wfont\">");
	c.push(Surface.valOut("Multiplayer"));
	c.push("</h1>\n <div class=\"serverguide-button-actions-wrapper\">\n");
	if (S.compat.eq(o.serverguideTab, "history")) {
		l_url = S.Modifier.urlformat("/{_section}/{_language}/servers/history/{platform}/", Surface.urlContext);
		c.push(" ");
		c.push(Surface.importTemplate(("common" + ("." + "button")), {"title": "Refresh list", "style": "medium-grey", "linkUrl": l_url}, null, kwargs));
		c.push("\n");
	}
	else if (S.compat.eq(o.serverguideTab, "favourites")) {
		l_url = S.Modifier.urlformat("/{_section}/{_language}/servers/favourites/{platform}/", Surface.urlContext);
		c.push(" ");
		c.push(Surface.importTemplate(("common" + ("." + "button")), {"title": "Refresh list", "style": "medium-grey", "linkUrl": l_url}, null, kwargs));
		c.push("\n");
	}
	else if (S.compat.eq(o.serverguideAction, "serverguide-action-show")) {
		l_url = $S.callFunction("common.showServerUrlByServer", o.server, b, kwargs);
		c.push(" ");
		c.push(Surface.importTemplate(("common" + ("." + "button")), {"title": "Refresh", "style": "medium-grey", "linkUrl": l_url}, null, kwargs));
		c.push("\n");
	}
	if (((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false)) {
		c.push(" ");
		c.push(Surface.importTemplate(("common" + ("." + "button")), {"title": "Quick match", "style": "medium", "extraClass": "base-quickmatch-serverfilter-menu", "type": "button", "additional": S.compat.add(S.compat.add(S.compat.add(S.compat.add(S.compat.add(S.compat.add(S.compat.add("data-track='serverbrowser.server.quickmatch' data-bind-action='quick-match' data-tooltip='", "Loading..."), "'"), " data-game='"), Surface.globalContext.realm.game), "' data-platform='"), 1), "'")}, null, kwargs));
		c.push("\n");
	}
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "bonusexpbar")), {"premium": o.isPremiumScoreMultiplierOn, "user": o.isUserScoreMultiplierOn}, null, kwargs));
	c.push("\n </div>\n <ul class=\"tabs\" data-active=\"");
	c.push(Surface.valOut(o.serverguideTab));
	c.push("\">\n <li class=\"tab-on ");
	if (S.compat.eq(o.serverguideTab, "index")) {
		c.push(" active");
	}
	c.push("\">\n <a href=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/{platform}/", Surface.urlContext)));
	c.push("\"><span class=\"tab-icon servers\"></span>");
	c.push(Surface.valOut("Server Browser"));
	c.push("</a>\n </li>\n <li class=\"");
	if (S.compat.eq(o.serverguideTab, "history")) {
		c.push(" active");
	}
	if (((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false)) {
		c.push(" tab-on");
	}
	else {
		c.push(" tab-off");
	}
	c.push("\">\n");
	if (((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false)) {
		c.push(" <a href=\"");
		c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/history/{platform}/", Surface.urlContext)));
		c.push("\"><span class=\"tab-icon history\"></span>");
		c.push(Surface.valOut("History"));
		c.push("</a>\n");
	}
	c.push(" </li>\n <li class=\"");
	if (S.compat.eq(o.serverguideTab, "favourites")) {
		c.push(" active");
	}
	if (((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false)) {
		c.push(" tab-on");
	}
	else {
		c.push(" tab-off");
	}
	c.push("\">\n");
	if (((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false)) {
		c.push(" <a href=\"");
		c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/favourites/{platform}/", Surface.urlContext)));
		c.push("\"><span class=\"tab-icon favourites\"></span>");
		c.push(Surface.valOut("Favorites"));
		c.push("</a>\n");
	}
	c.push(" </li>\n </ul>\n <div class=\"base-clear\"></div>\n </div>\n </div>\n <div id=\"serverguide-middle-content\">\n <div id=\"serverguide-content\">\n <input type=\"hidden\" id=\"serverguide-autobrowse-url\" value=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/getAutoBrowseServers/{platform}/", Surface.urlContext)));
	c.push("\" />\n <input type=\"hidden\" id=\"serverguide-show-url\"\n value=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/show/{platform}/{guid}/{slug}/", Surface.urlContext, {"guid": "%GUID%", "platform": "pc"})));
	c.push("?json=1\" />\n <input type=\"hidden\" id=\"serverguide-numplayers-url\"\n value=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/getNumPlayersOnServer/{platform}/{guid}/", Surface.urlContext, {"guid": "%GUID%", "platform": "pc"})));
	c.push("\" />\n <input type=\"hidden\" id=\"serverguide-players-url\"\n value=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/getPlayersOnServer/{platform}/{guid}/", Surface.urlContext, {"guid": "%GUID%", "platform": "pc"})));
	c.push("\" />\n");
	c.push(b.get('serverguideFilters')(o, b, kwargs));
	c.push(b.get('serverguideContent')(o, b, kwargs));
	c.push(" <div class=\"base-clear\"></div>\n </div>\n <div style=\"clear:both;\"></div>\n </div>\n <div style=\"clear:both;\"></div>\n </div>\n <div style=\"clear:both;\"></div>\n");
	return c.join("");
}
;
;var block_serverguide_bf3filters = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('bf3filters'));
serverguide.bf3filters.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_bf3filters;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.bf3filters');
	var l_forceExpandedFilter;
	c.push("\n");
	l_forceExpandedFilter = S.Modifier.get(Surface.globalContext, "forceExpandedFilter");
	c.push("\n");
	if ((S.compat.gt(S.Modifier.count(o.servers), 0) && S.compat.neq(l_forceExpandedFilter, 1))) {
		o.showFilters = 0;
	}
	else {
		o.showFilters = 1;
	}
	c.push("<input type=\"hidden\" id=\"serverguide-autobrowse-url\" value=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/getAutoBrowseServers/{platform}/", Surface.urlContext)));
	c.push("\" />\n<input type=\"hidden\" id=\"serverguide-show-url\"\n value=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/show/{platform}/{guid}/{slug}/", Surface.urlContext, {"guid": "%GUID%", "platform": "pc"})));
	c.push("?json=1\" />\n<form id=\"serverguide-filter-form\" ");
	if (!(o.showFilters)) {
		c.push("class=\"serverguide-filter-form-contracted\"");
	}
	c.push(" method=\"GET\" action=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/{platform}/", Surface.urlContext)));
	c.push("\">\n");
	c.push(Surface.importTemplate(("base" + ("." + "postChecksum")), o, null, kwargs));
	c.push("\n<input type=\"hidden\" name=\"filtered\" value=\"1\" />\n<input type=\"hidden\" name=\"expand\" value=\"");
	c.push(Surface.valOut(o.showFilters));
	c.push("\" />\n");
	c.push(Surface.importTemplate(("common" + ("." + "focusbar")), o, block_serverguide_bf3filters_use_19_6, kwargs));
	c.push("\n</form>");
	return c.join('');
}
;
var block_serverguide_bf3filters_use_19_6 = new Surface.BlockConfig('common.focusbar', {'content': 'serverguide.bf3filters._use_19_6_block_content', 'extraInnerClass': 'serverguide.bf3filters._use_19_6_block_extraInnerClass', 'extraClass': 'serverguide.bf3filters._use_19_6_block_extraClass'});
serverguide.bf3filters._use_19_6_block_extraClass = new Surface.Block('serverguide.bf3filters._use_19_6_block_extraClass');
serverguide.bf3filters._use_19_6_block_extraClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverguide-filter-width");
	return c.join("");
}
;
serverguide.bf3filters._use_19_6_block_extraInnerClass = new Surface.Block('serverguide.bf3filters._use_19_6_block_extraInnerClass');
serverguide.bf3filters._use_19_6_block_extraInnerClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverguide-filter-inner");
	return c.join("");
}
;
serverguide.bf3filters.surface_30_18 = new Surface.SingleSurface("serverguide.bf3filters.surface_30_18");
serverguide.bf3filters.surface_30_18.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_bf3filters;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.bf3filters');
	c.push("<surf:container id=\"serverguide-filterstring\"");
	c.push(">");
	var l_defaultServerBrowserFilter;
	l_defaultServerBrowserFilter = S.Modifier.get(Surface.globalContext, "defaultServerBrowserFilter");
	c.push("\n <div class=\"serverguide-filterlist-generic\">\n <div id=\"custom-filter-list\">\n <em>");
	c.push(Surface.valOut("Search for Servers"));
	c.push(":</em>\n <div id=\"custom-filter-list-content\"></div>\n <a class=\"serverguide-reset-filter-button\" href=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/clearFilter/{platform}/", Surface.urlContext)));
	c.push("\" ");
	if (((typeof(l_defaultServerBrowserFilter) != "undefined" && l_defaultServerBrowserFilter !== null) ? l_defaultServerBrowserFilter : false)) {
		c.push("style=\"display:none;\" ");
	}
	c.push(">");
	c.push(Surface.valOut("Reset to Default"));
	c.push("</a>\n </div>\n </div>\n <span class=\"serverguide-toggler\"></span>\n ");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.bf3filters", "surface_30_18", "serverguide-filterstring", o, b);
	return c.join('');
}
;
serverguide.bf3filters._use_19_6_block_content = new Surface.Block('serverguide.bf3filters._use_19_6_block_content');
serverguide.bf3filters._use_19_6_block_content.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_serverFilterOptions;
	c.push("\n");
	l_serverFilterOptions = $S.callFunction("gamedata.get", 2, "gameserver", b, kwargs);
	c.push("\n <div id=\"serverguide-filtertoggle\" class=\"serverguide-filtertoggle-");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.showFilters) != "undefined" && o.showFilters !== null) ? o.showFilters : 1)) {
		c.push("expanded");
	}
	else {
		c.push("contracted");
	}
	c.push("\">\n");
	c.push(serverguide.bf3filters.surface_30_18.render({"defaultServerBrowserFilter": ((typeof(o) != "undefined" && o !== null && typeof(o.defaultServerBrowserFilter) != "undefined" && o.defaultServerBrowserFilter !== null) ? o.defaultServerBrowserFilter : null)}, b, kwargs));
	c.push("\n <div class=\"serverguide-header-refresh-button\">\n ");
	c.push(Surface.importTemplate(("common" + ("." + "button")), {"title": "Refresh and save filter", "type": "submit", "style": "medium-grey", "extraClass": "serverguide-apply-filter-button"}, null, kwargs));
	c.push("\n </div>\n </div>\n <div id=\"serverguide-filters-container\">\n <div id=\"serverguide-filters\" ");
	if (!(o.showFilters)) {
		c.push("style=\"display:none;\"");
	}
	c.push(">\n <div class=\"filter-col span1\">\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtergameexpansion")), {"gameexpansions": S.Modifier.get(l_serverFilterOptions, "gameexpansions"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filterregion")), {"regions": S.Modifier.get(l_serverFilterOptions, "regions"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filterfreetext")), o, null, kwargs));
	c.push("\n </div>\n <div class=\"filter-col span1\">\n <!-- float: left; width:184px; padding-left: 16px; background: #ffc; -->\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filterpresets")), {"gamepresets": S.Modifier.get(l_serverFilterOptions, "gamepresets"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filterdetails")), {"gamedetails": S.Modifier.get(l_serverFilterOptions, "gamedetails"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filteradvanced")), {"filter": o.filter}, null, kwargs));
	c.push("\n </div>\n <div class=\"filter-col span1 pull1\">\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtergamesize")), {"gamesize": S.Modifier.get(l_serverFilterOptions, "gamesize"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtergameslots")), {"gameslots": S.Modifier.get(l_serverFilterOptions, "gameslots"), "filter": o.filter}, null, kwargs));
	c.push("\n </div>\n <div class=\"filter-col span2 push1\">\n <!-- style=\"float: left; width:374px; padding-left: 16px; background: #cff;\" -->\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtergamemode")), {"gamemodes": S.Modifier.get(l_serverFilterOptions, "gamemodes"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtermaps")), {"maps": S.Modifier.get(l_serverFilterOptions, "maps"), "filter": o.filter}, null, kwargs));
	c.push("\n </div>\n </div>\n </div>\n <input type=\"hidden\" name=\"settings\" id=\"serverguide-filter-settings-input\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.settings) != "undefined" && o.filter.settings !== null) ? o.filter.settings : []), "|")));
	c.push("\" />\n <input type=\"hidden\" name=\"regions\" id=\"serverguide-filter-regions-input\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.regions) != "undefined" && o.filter.regions !== null) ? o.filter.regions : []), "|")));
	c.push("\" />\n <input type=\"hidden\" name=\"country\" id=\"serverguide-filter-countries-input\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.country) != "undefined" && o.filter.country !== null) ? o.filter.country : []), "|")));
	c.push("\" />\n <div id=\"serverguide-apply-filters\" ");
	if (!(o.showFilters)) {
		c.push("style=\"display:none;\"");
	}
	c.push(">\n ");
	c.push(Surface.importTemplate(("common" + ("." + "button")), {"title": "Refresh and save filter", "type": "submit", "style": "medium-grey", "extraClass": "serverguide-apply-filter-button"}, null, kwargs));
	c.push("\n <div id=\"serverguide-filter-count\">\n ");
	c.push(Surface.valOut("Found"));
	c.push(" <span class=\"serverguide-filter-count-amount\">1337</span> ");
	c.push(Surface.valOut("servers"));
	c.push("\n </div>\n <div id=\"serverguide-filter-saved\">");
	c.push(Surface.valOut("Filter saved!"));
	c.push("</div>\n </div>\n ");
	return c.join("");
}
;
;var block_serverguide_bf3index = new Surface.BlockConfig('serverguide.index', {'serverSettings': 'serverguide.bf3index.block_serverSettings', 'serverguideFilters': 'serverguide.bf3index.block_serverguideFilters'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('bf3index'));
serverguide.bf3index.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_bf3index;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.bf3index');
	c.push("\n");
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('serverguide.index', o, b, kwargs);
}
;
serverguide.bf3index.block_serverguideFilters = new Surface.Block('serverguide.bf3index.block_serverguideFilters');
serverguide.bf3index.block_serverguideFilters.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("\n");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.showFilter) != "undefined" && o.showFilter !== null) ? o.showFilter : true)) {
		c.push(" ");
		c.push(Surface.importTemplate(("serverguide" + ("." + "bf3filters")), o, null, kwargs));
		c.push("\n");
	}
	else {
		c.push(" <div style=\"position: relative;clear:both;padding:16px 0\">\n <a href=\"");
		c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/{platform}/", Surface.urlContext)));
		c.push("\" style=\"font-weight:normal; font-size:12px;\" >");
		c.push(Surface.valOut("View all servers"));
		c.push("</a>\n </div>\n");
	}
	return c.join("");
}
;
serverguide.bf3index.block_serverSettings = new Surface.Block('serverguide.bf3index.block_serverSettings');
serverguide.bf3index.block_serverSettings.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "bf3serverinfo")), o, null, kwargs));
	c.push("\n");
	return c.join("");
}
;
;var block_serverguide_bf3serverinfo = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('bf3serverinfo'));
serverguide.bf3serverinfo.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_bf3serverinfo;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.bf3serverinfo');
	c.push("\n<div id=\"serverguide-show-column-rail\" class=\"base-secondary-right-column\">\n<div id=\"serverguide-show-column\">\n");
	c.push(serverguide.bf3serverinfo.surface_4_2.render({"favGuids": ((typeof(o) != "undefined" && o !== null && typeof(o.favGuids) != "undefined" && o.favGuids !== null) ? o.favGuids : null), "friends": ((typeof(o) != "undefined" && o !== null && typeof(o.friends) != "undefined" && o.friends !== null) ? o.friends : null), "loading": ((typeof(o) != "undefined" && o !== null && typeof(o.loading) != "undefined" && o.loading !== null) ? o.loading : null), "players": ((typeof(o) != "undefined" && o !== null && typeof(o.players) != "undefined" && o.players !== null) ? o.players : null), "serverinfo": ((typeof(o) != "undefined" && o !== null && typeof(o.serverinfo) != "undefined" && o.serverinfo !== null) ? o.serverinfo : null), "session": {"isLoggedIn": ((typeof(o) != "undefined" && o !== null && typeof(o.session) != "undefined" && o.session !== null && typeof(o.session.isLoggedIn) != "undefined" && o.session.isLoggedIn !== null) ? o.session.isLoggedIn : null)}}, b, kwargs));
	c.push("\n</div>\n</div>\n");
	return c.join('');
}
;
var block_serverguide_bf3serverinfo_use_132_22 = new Surface.BlockConfig('common.secondarycontent', {'content': 'serverguide.bf3serverinfo._use_132_22_block_content', 'title': 'serverguide.bf3serverinfo._use_132_22_block_title', 'extraClass': 'serverguide.bf3serverinfo._use_132_22_block_extraClass'});
var block_serverguide_bf3serverinfo_use_104_22 = new Surface.BlockConfig('common.secondarycontent', {'content': 'serverguide.bf3serverinfo._use_104_22_block_content', 'title': 'serverguide.bf3serverinfo._use_104_22_block_title', 'extraClass': 'serverguide.bf3serverinfo._use_104_22_block_extraClass'});
serverguide.bf3serverinfo.surface_4_2 = new Surface.SingleSurface("serverguide.bf3serverinfo.surface_4_2");
serverguide.bf3serverinfo._use_104_22_block_extraClass = new Surface.Block('serverguide.bf3serverinfo._use_104_22_block_extraClass');
serverguide.bf3serverinfo._use_104_22_block_extraClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverinfo-players-box");
	return c.join("");
}
;
serverguide.bf3serverinfo._use_104_22_block_title = new Surface.Block('serverguide.bf3serverinfo._use_104_22_block_title');
serverguide.bf3serverinfo._use_104_22_block_title.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(Surface.valOut(S.Modifier.count(o.friends)));
	c.push(" ");
	c.push(Surface.valOut(S.Modifier.pluralize(S.Modifier.count(o.friends), "Friend", "Friends")));
	return c.join("");
}
;
serverguide.bf3serverinfo._use_104_22_block_content = new Surface.Block('serverguide.bf3serverinfo._use_104_22_block_content');
serverguide.bf3serverinfo._use_104_22_block_content.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_for_serverguide_bf3serverinfo_111_30_isOdd;
	var l_for_serverguide_bf3serverinfo_111_30_isEven;
	var l_for_serverguide_bf3serverinfo_111_30_list;
	var l_for_serverguide_bf3serverinfo_111_30_iteration;
	l_for_serverguide_bf3serverinfo_111_30_list = o.friends;
	l_for_serverguide_bf3serverinfo_111_30_iteration = 0;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_bf3serverinfo_111_30_list), 0)) {
		for (var l_for_serverguide_bf3serverinfo_111_30_key in l_for_serverguide_bf3serverinfo_111_30_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_bf3serverinfo_111_30_list[l_for_serverguide_bf3serverinfo_111_30_key])) {
				continue;
			}
			var l_friend = l_for_serverguide_bf3serverinfo_111_30_list[l_for_serverguide_bf3serverinfo_111_30_key];
			l_for_serverguide_bf3serverinfo_111_30_iteration = S.compat.add(l_for_serverguide_bf3serverinfo_111_30_iteration, 1);
			l_for_serverguide_bf3serverinfo_111_30_isEven = S.compat.eq(Surface.modulo(l_for_serverguide_bf3serverinfo_111_30_iteration, 2), 0);
			l_for_serverguide_bf3serverinfo_111_30_isOdd = !(l_for_serverguide_bf3serverinfo_111_30_isEven);
			c.push(" <div class=\"serverguide-show-playerrow serverguide-show-friendrow\">\n <span ");
			if (l_for_serverguide_bf3serverinfo_111_30_isOdd) {
				c.push("class=\"serverguide-show-player-odd\"");
			}
			c.push(">\n ");
			c.push(Surface.importTemplate(("ui" + ("." + "avatar")), {"user": l_friend, "size": 22}, null, kwargs));
			c.push("\n <div class=\"serverguide-show-player\">\n <div class=\"serverguide-show-playerlink-container\">\n <a class=\"serverguide-show-playerlink\" href=\"");
			c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/user/{username}/", Surface.urlContext, {"username": l_friend.username})));
			c.push("\">");
			c.push(Surface.valOut(l_friend.username));
			c.push("</a>\n </div>\n </div>\n </span>\n </div>\n");
		}
	}
	c.push(" <div style=\"clear:both;\"></div>\n");
	return c.join("");
}
;
serverguide.bf3serverinfo._use_132_22_block_extraClass = new Surface.Block('serverguide.bf3serverinfo._use_132_22_block_extraClass');
serverguide.bf3serverinfo._use_132_22_block_extraClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverinfo-players-box");
	return c.join("");
}
;
serverguide.bf3serverinfo._use_132_22_block_title = new Surface.Block('serverguide.bf3serverinfo._use_132_22_block_title');
serverguide.bf3serverinfo._use_132_22_block_title.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	return c.join("");
}
;
serverguide.bf3serverinfo._use_132_22_block_content = new Surface.Block('serverguide.bf3serverinfo._use_132_22_block_content');
serverguide.bf3serverinfo._use_132_22_block_content.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_soldierSlots;
	l_soldierSlots = $S.callFunction("serverguide.getServerSlots", o.serverinfo, 2, b, kwargs);
	c.push(" <div id=\"serverinfo-players-all-wrapper\"></div>\n <div id=\"serverinfo-players-all-view\" class=\"base-link\" data-numPlayers=\"");
	c.push(Surface.valOut(l_soldierSlots.current));
	c.push("\" data=\"");
	c.push(Surface.valOut(o.serverinfo.guid));
	c.push("\">");
	c.push(Surface.valOut("Show"));
	c.push(" ");
	c.push(Surface.valOut(S.Modifier.pluralize(l_soldierSlots.current, "Player", "all players")));
	c.push("</div>\n <div id=\"serverinfo-players-all-hide\" class=\"base-link\">");
	c.push(Surface.valOut("Hide"));
	c.push(" ");
	c.push(Surface.valOut(S.Modifier.pluralize(l_soldierSlots.current, "Player", "all players")));
	c.push("</div>\n");
	return c.join("");
}
;
serverguide.bf3serverinfo.surface_4_2.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_bf3serverinfo;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.bf3serverinfo');
	c.push("<surf:container id=\"serverguide-show\"");
	c.push(">");
	var l_favGuids;
	var l_soldierSlots;
	var l_isFavorite;
	var l_session;
	var l_mapname;
	var l_mapinfo;
	o.players = o.players;
	c.push("\n <div class=\"serverguide-");
	if (!(((typeof(o) != "undefined" && o !== null && typeof(o.serverinfo) != "undefined" && o.serverinfo !== null && typeof(o.serverinfo.online) != "undefined" && o.serverinfo.online !== null) ? o.serverinfo.online : false))) {
		c.push("offline");
	}
	else {
		c.push("online");
	}
	c.push("-info\">\n");
	l_session = S.Modifier.get(Surface.globalContext, "session");
	l_favGuids = S.Modifier.get(Surface.globalContext, "favGuids");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.loading) != "undefined" && o.loading !== null) ? o.loading : false)) {
		c.push(" <div class=\"loading\"></div>\n");
	}
	else {
		if ((typeof(o) != "undefined" && o !== null && typeof(o.serverinfo) != "undefined" && o.serverinfo !== null)) {
			l_isFavorite = S.Modifier.contains(l_favGuids, S.Modifier.get(o.serverinfo, "guid", ""));
			l_mapinfo = $S.callFunction("common.mapinfo", o.serverinfo.game, o.serverinfo.map, b, kwargs);
			l_mapname = S.Modifier.get(l_mapinfo, "name");
			c.push("\n");
			l_soldierSlots = $S.callFunction("serverguide.getServerSlots", o.serverinfo, 2, b, kwargs);
			c.push("\n <span class=\"");
			c.push(Surface.valOut($S.callFunction("common.getGameIconCSS", o.serverinfo.game, o.serverinfo.platform, o.serverinfo.gameExpansions, b, kwargs)));
			c.push("\"></span>\n <h1 id=\"selected-server-name\" class=\"wfont\">\n <a href=\"");
			c.push(Surface.valOut($S.callFunction("common.showServerUrlByServer", o.serverinfo, b, kwargs)));
			c.push("\">\n ");
			c.push(Surface.valOut(o.serverinfo.name));
			c.push("\n </a>\n </h1>\n <div style=\"clear: both;\"></div>\n");
			if (o.serverinfo.online) {
				c.push(" <div id=\"serverguide-show-serverjoin\">\n <button\n class=\"base-button-arrow-almost-gigantic\n ");
				if (!($S.callFunction("serverguide.enableJoinButton", o.serverinfo, b, kwargs))) {
					c.push(" disabled");
				}
				c.push("\"\n data-bind-action=\"join-mp-gameserver\"\n data-role=\"");
				c.push(Surface.valOut(1));
				c.push("\"\n data-guid=\"");
				c.push(Surface.valOut(o.serverinfo.guid));
				c.push("\"\n data-game=\"");
				c.push(Surface.valOut(o.serverinfo.game));
				c.push("\"\n data-platform=\"");
				c.push(Surface.valOut(o.serverinfo.platform));
				c.push("\"\n data-gameid=\"");
				c.push(Surface.valOut(o.serverinfo.gameId));
				c.push("\"\n data-ip=\"");
				c.push(Surface.valOut(o.serverinfo.ip));
				c.push("\"\n data-port=\"");
				c.push(Surface.valOut(o.serverinfo.port));
				c.push("\"\n data-track=\"serverbrowser.server.selected.join\">\n ");
				c.push(Surface.valOut("Join server"));
				c.push("\n </button>\n <div class=\"base-clear\"></div>\n </div>\n <input type=\"text\" class=\"serverguide-server-link-field base-no-ajax\"\n value=\"");
				c.push(Surface.valOut($S.callFunction("serverguide.showAbsoluteServerUrlByServer", o.serverinfo, b, kwargs)));
				c.push("\" />\n <div style=\"clear: both;\"></div>\n <div id=\"selected-server-mapimage\">\n <img src=\"");
				c.push(Surface.valOut($S.callFunction("base.asset", S.Modifier.get(l_mapinfo, "imageBig"), b, kwargs)));
				c.push("\" alt=\"");
				c.push(Surface.valOut(S.Modifier.get(l_mapinfo, "name")));
				c.push("\" width=146 height=79 />\n </div>\n <div class=\"selected-server-info-wrapper\">\n");
				if (((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false)) {
					c.push(" <div class=\"serverguide-add-favorite\">\n <form action=\"");
					c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/gameserverbookmark/toggleFavourite/", Surface.urlContext)));
					c.push("\">\n <input type=\"hidden\" name=\"guid\" value=\"");
					c.push(Surface.valOut(o.serverinfo.guid));
					c.push("\" />\n </form>\n <div class=\"serverguide-add-favorite-toggle ");
					if (l_isFavorite) {
						c.push("isFavorite");
					}
					c.push("\" ><span>");
					if (l_isFavorite) {
						c.push(Surface.valOut("Favorite"));
					}
					else {
						c.push(Surface.valOut("Add as favorite"));
					}
					c.push("</span></div>\n <div class=\"serverguide-add-favorite-loading\">\n <img width=\"16\" height=\"16\" src=\"");
					c.push(Surface.valOut($S.callFunction("base.asset", "/public/base/shared/ajax-loader.gif", b, kwargs)));
					c.push("\" alt=\"");
					c.push(Surface.valOut("Loading..."));
					c.push("\" />\n </div>\n </div>\n <div class=\"base-clear\"></div>\n");
				}
				c.push("\n <ul id=\"selected-server-info\">\n <li>");
				c.push(Surface.valOut(l_soldierSlots.current));
				c.push(" / ");
				c.push(Surface.valOut(l_soldierSlots.max));
				c.push(" ");
				c.push(Surface.valOut("Players"));
				c.push("</li>\n <li>");
				c.push(Surface.valOut((S.translations[l_mapname] || l_mapname)));
				c.push("</li>\n <li>");
				c.push(Surface.valOut($S.callFunction("serverguide.gameServerModeStringLocalized", o.serverinfo.mapMode, o.serverinfo.game, b, kwargs)));
				c.push("</li>\n </ul>\n </div>\n <div style=\"clear: both;\"></div>\n");
				if ((Surface.globalContext.staticContext.checkPlugin && !($S.callFunction("base.useOriginLaunch", b, kwargs)))) {
					c.push(" <a id=\"serverinfoscore-link\" href=\"");
					c.push(Surface.valOut($S.callFunction("common.showServerUrlByServer", o.serverinfo, b, kwargs)));
					c.push("\">\n ");
					c.push(Surface.importTemplate(("serverguide" + ("." + "serverinfoscore")), o, null, kwargs));
					c.push("\n </a>\n");
				}
				c.push("\n <div style=\"clear: both;\"></div>\n <div id=\"serverinfo-more-info\">\n <div id=\"selected-server-settings\">\n <h2>");
				c.push(Surface.valOut("Server settings"));
				c.push("</h2>\n <ul id=\"server-settings\">\n <li>");
				c.push(Surface.valOut("Ranked"));
				c.push("<span class=\"selected-server-setting selected-server-setting-ranked selected-server-setting-ranked-");
				if (o.serverinfo.ranked) {
					c.push("on");
				}
				else {
					c.push("off");
				}
				c.push("\">");
				if (o.serverinfo.ranked) {
					c.push(Surface.valOut("On"));
				}
				else {
					c.push(Surface.valOut("Off"));
				}
				c.push("</span></li>\n <li>");
				c.push(Surface.valOut("Preset"));
				c.push("<span class=\"selected-server-setting selected-server-setting-type selected-server-setting-type-");
				c.push(Surface.valOut($S.callFunction("serverguide.gameServerPresetStringNoLocalization", o.serverinfo.preset, b, kwargs)));
				c.push("\">");
				c.push(Surface.valOut($S.callFunction("serverguide.gameServerPresetStringLocalized", o.serverinfo.preset, b, kwargs)));
				c.push("</span></li>\n <li>Punkbuster<span class=\"selected-server-setting selected-server-setting-pb selected-server-setting-pb-");
				if (o.serverinfo.punkbuster) {
					c.push("on");
				}
				else {
					c.push("off");
				}
				c.push("\">");
				if (o.serverinfo.punkbuster) {
					c.push(Surface.valOut("On"));
				}
				else {
					c.push(Surface.valOut("Off"));
				}
				c.push("</span></li>\n <li>");
				c.push(Surface.valOut("Password"));
				c.push("<span class=\"selected-server-setting selected-server-setting-password selected-server-setting-password-");
				if (o.serverinfo.hasPassword) {
					c.push("on");
				}
				else {
					c.push("off");
				}
				c.push("\">");
				if (o.serverinfo.hasPassword) {
					c.push(Surface.valOut("On"));
				}
				else {
					c.push(Surface.valOut("Off"));
				}
				c.push("</span></li>\n </ul>\n </div>\n </div>\n <div style=\"clear: both;\"></div>\n");
				if ((S.compat.gt(S.Modifier.count(o.friends), 0) && ((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false))) {
					c.push(Surface.importTemplate(("common" + ("." + "secondarycontent")), o, block_serverguide_bf3serverinfo_use_104_22, kwargs));
				}
				c.push("\n");
				if (S.compat.gt(l_soldierSlots.current, 0)) {
					c.push(" <div style=\"clear:both;\"></div>\n");
					c.push(Surface.importTemplate(("common" + ("." + "secondarycontent")), o, block_serverguide_bf3serverinfo_use_132_22, kwargs));
				}
				c.push("\n <div style=\"clear:both;\"></div>\n");
			}
			else {
				c.push(" <div class=\"common-secondary-column-line\"></div>\n <h1 id=\"serverinfo-serveroffline\">");
				c.push(Surface.valOut("Server is offline"));
				c.push("</h1>\n <div class=\"common-secondary-column-line\"></div>\n");
			}
		}
	}
	c.push(" </div>\n");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.bf3serverinfo", "surface_4_2", "serverguide-show", o, b);
	return c.join('');
}
;
;var block_serverguide_bf3show = new Surface.BlockConfig('serverguide.show', {'serverSettings': 'serverguide.bf3show.block_serverSettings', 'mapRotation': 'serverguide.bf3show.block_mapRotation', 'serverInfoShort': 'serverguide.bf3show.block_serverInfoShort', 'serverHeader': 'serverguide.bf3show.block_serverHeader', 'scoreBoard': 'serverguide.bf3show.block_scoreBoard'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('bf3show'));
serverguide.bf3show.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_bf3show;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.bf3show');
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('serverguide.show', o, b, kwargs);
}
;
serverguide.bf3show.block_serverHeader = new Surface.Block('serverguide.bf3show.block_serverHeader');
serverguide.bf3show.block_serverHeader.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "showserverheader")), {"server": o.server}, null, kwargs));
	c.push("\n");
	return c.join("");
}
;
serverguide.bf3show.surface_25_36 = new Surface.SingleSurface("serverguide.bf3show.surface_25_36");
serverguide.bf3show.surface_25_36.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_bf3show;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.bf3show');
	c.push("<surf:container id=\"serverguide-show-info-ping\"");
	c.push(">");
	c.push(Surface.valOut(o.server.ping));
	c.push(" ms");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.bf3show", "surface_25_36", "serverguide-show-info-ping", o, b);
	return c.join('');
}
;
serverguide.bf3show.block_serverInfoShort = new Surface.Block('serverguide.bf3show.block_serverInfoShort');
serverguide.bf3show.block_serverInfoShort.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_soldierSlots;
	var l_queueSlots;
	c.push(" <table id=\"server-info-short\">\n <thead>\n <tr>\n <th>");
	c.push(Surface.valOut("Players"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Ping"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Ranked"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Preset"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Punkbuster"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Password"));
	c.push("</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n");
	l_soldierSlots = $S.callFunction("serverguide.getServerSlots", o.server, 2, b, kwargs);
	l_queueSlots = $S.callFunction("serverguide.getServerSlots", o.server, 1, b, kwargs);
	c.push(" <td id=\"server-info-players\">");
	c.push(Surface.valOut(l_soldierSlots.current));
	c.push(" / ");
	c.push(Surface.valOut(l_soldierSlots.max));
	if (S.compat.gt(l_queueSlots.current, 0)) {
		c.push(" [<abbr title=\"");
		c.push(Surface.valOut(l_queueSlots.current));
		c.push(" ");
		c.push(Surface.valOut("player(s) queued"));
		c.push("\">");
		c.push(Surface.valOut(l_queueSlots.current));
		c.push("</abbr>]");
	}
	c.push("</td>\n <td id=\"server-info-ping\">");
	c.push(serverguide.bf3show.surface_25_36.render({"server": {"ping": ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.ping) != "undefined" && o.server.ping !== null) ? o.server.ping : null)}}, b, kwargs));
	c.push("</td>\n <td id=\"server-info-ranked\" ");
	if (!(o.server.ranked)) {
		c.push("class=\"server-info-off\"");
	}
	c.push(">");
	if (o.server.ranked) {
		c.push(Surface.valOut("On"));
	}
	else {
		c.push(Surface.valOut("Off"));
	}
	c.push("</td>\n <td id=\"server-info-preset\"");
	if (S.compat.neq(((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.preset) != "undefined" && o.server.preset !== null) ? o.server.preset : 0), 2)) {
		c.push(" class=\"server-info-off\"");
	}
	c.push(">");
	c.push(Surface.valOut($S.callFunction("serverguide.gameServerPresetStringLocalized", ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.preset) != "undefined" && o.server.preset !== null) ? o.server.preset : 1), b, kwargs)));
	c.push("</td>\n <td id=\"server-info-punkbuster\"");
	if (!(o.server.punkbuster)) {
		c.push(" class=\"server-info-off\"");
	}
	c.push(">");
	if (o.server.punkbuster) {
		c.push(Surface.valOut("On"));
	}
	else {
		c.push(Surface.valOut("Off"));
	}
	c.push("</td>\n <td id=\"server-info-password\" class=\"last");
	if (!(o.server.hasPassword)) {
		c.push(" server-info-off");
	}
	c.push("\">");
	if (o.server.hasPassword) {
		c.push(Surface.valOut("On"));
	}
	else {
		c.push(Surface.valOut("Off"));
	}
	c.push("</td>\n </tr>\n </tbody>\n</table>\n");
	return c.join("");
}
;
serverguide.bf3show.block_serverSettings = new Surface.Block('serverguide.bf3show.block_serverSettings');
serverguide.bf3show.block_serverSettings.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "serversettings")), {"server": o.server}, null, kwargs));
	c.push("\n");
	return c.join("");
}
;
serverguide.bf3show.block_mapRotation = new Surface.Block('serverguide.bf3show.block_mapRotation');
serverguide.bf3show.block_mapRotation.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "maprotation")), {"server": o.server}, null, kwargs));
	c.push("\n");
	return c.join("");
}
;
serverguide.bf3show.block_scoreBoard = new Surface.Block('serverguide.bf3show.block_scoreBoard');
serverguide.bf3show.block_scoreBoard.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	if (!($S.callFunction("base.useOriginLaunch", b, kwargs))) {
		c.push(" <div id=\"server-players-list\">\n ");
		c.push(Surface.importTemplate(("serverguide" + ("." + "scoreboard")), {"server": o.server}, null, kwargs));
		c.push("\n </div>\n");
	}
	return c.join("");
}
;
;var block_serverguide_bonusexpbar = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('bonusexpbar'));
serverguide.bonusexpbar.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_bonusexpbar;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.bonusexpbar');
	var l_realm;
	var l_forPremium;
	var l_hasPremium;
	c.push("\n");
	l_realm = S.Modifier.get(Surface.globalContext, "realm");
	l_forPremium = ((typeof(o) != "undefined" && o !== null && typeof(o.premium) != "undefined" && o.premium !== null) ? o.premium : false);
	if ((S.compat.eq(l_realm.section, 2) && (((typeof(o) != "undefined" && o !== null && typeof(o.user) != "undefined" && o.user !== null) ? o.user : false) || l_forPremium))) {
		l_hasPremium = $S.callFunction("common.ownsPremiumExpansionAsCurrentPersona", b, kwargs);
		c.push(" <div class=\"serverguide-premium-scoremultiplier\">\n <div id=\"serverguide-premium-scoremultiplier-icon\">\n </div>\n");
		if ((l_forPremium && !(l_hasPremium))) {
			c.push(" <a href=\"");
			c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/premium/", Surface.urlContext)));
			c.push("\"></a>\n");
		}
		c.push(" <strong>\n");
		if (l_forPremium) {
			c.push(" ");
			c.push(Surface.valOut("Premium Double XP"));
			c.push("\n");
		}
		else {
			c.push(" ");
			c.push(Surface.valOut("Double XP"));
			c.push("\n");
		}
		c.push(" </strong>\n <span>");
		c.push(Surface.valOut("Active now"));
		c.push("</span>\n </div>\n");
	}
	return c.join('');
}
;
;var block_serverguide_expand = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('expand'));
serverguide.expand.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_expand;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.expand');
	var l_for_serverguide_expand_31_30_count;
	var l_friendCount;
	var l_for_serverguide_expand_31_30_hasNext;
	var l_map;
	var l_for_serverguide_expand_52_18_iteration;
	var l_session;
	var l_realm;
	var l_for_serverguide_expand_31_30_list;
	var l_for_serverguide_expand_31_30_iteration;
	var l_MAX;
	var l_for_serverguide_expand_52_18_list;
	c.push("\n");
	l_session = S.Modifier.get(Surface.globalContext, "session");
	l_realm = S.Modifier.get(Surface.globalContext, "realm");
	if (o.server.online) {
		l_map = $S.callFunction("common.mapinfo", l_realm.game, o.server.map, b, kwargs);
	}
	else {
		l_map = {"imageBig": "", "name": "Offline"};
	}
	c.push("\n<div class=\"serverguide-expand\">\n <div class=\"serverguide-expand-map\">\n <img src=\"");
	c.push(Surface.valOut($S.callFunction("base.asset", l_map.imageBig, b, kwargs)));
	c.push("\" alt=\"");
	c.push(Surface.valOut(l_map.name));
	c.push("\" />\n <div></div>\n <h3>");
	c.push(Surface.valOut(l_map.name));
	c.push("</h3>\n </div>\n <div class=\"serverguide-expand-info\">\n <h1>");
	c.push(Surface.valOut(o.server.name));
	c.push("</h1>\n <div class=\"serverguide-expand-friends\">\n <div class=\"serverguide-expand-friendtext\">\n");
	if (!(o.server.online)) {
		c.push(" ");
		c.push(Surface.valOut("Server is offline"));
		c.push("\n");
	}
	else {
		if (((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false)) {
			c.push("\n");
			l_friendCount = S.Modifier.count(o.friendsOnServer);
			if (S.compat.gt(l_friendCount, 0)) {
				l_MAX = 5;
				c.push(" ");
				c.push(Surface.valOut(l_friendCount));
				c.push(" ");
				c.push(Surface.valOut(S.Modifier.pluralize(l_friendCount, "Friend", "Friends")));
				c.push(" ");
				c.push(Surface.valOut("playing"));
				c.push(":\n");
				l_for_serverguide_expand_31_30_list = o.friendsOnServer;
				l_for_serverguide_expand_31_30_count = S.Modifier.count(l_for_serverguide_expand_31_30_list);
				l_for_serverguide_expand_31_30_iteration = 0;
				if (S.compat.gt(S.Modifier.count(l_for_serverguide_expand_31_30_list), 0)) {
					for (var l_for_serverguide_expand_31_30_key in l_for_serverguide_expand_31_30_list) {
						if (!Surface.isValidLoopItem(l_for_serverguide_expand_31_30_list[l_for_serverguide_expand_31_30_key])) {
							continue;
						}
						var l_friend = l_for_serverguide_expand_31_30_list[l_for_serverguide_expand_31_30_key];
						l_for_serverguide_expand_31_30_iteration = S.compat.add(l_for_serverguide_expand_31_30_iteration, 1);
						l_for_serverguide_expand_31_30_hasNext = S.compat.lt(l_for_serverguide_expand_31_30_iteration, l_for_serverguide_expand_31_30_count);
						if (S.compat.lt(l_for_serverguide_expand_31_30_iteration, S.compat.add(l_MAX, 1))) {
							c.push(" <a class=\"base-link\" href=\"#\">");
							c.push(Surface.valOut(l_friend.username));
							c.push("</a>\n");
							if ((S.compat.eq(l_for_serverguide_expand_31_30_iteration, l_MAX) || !(l_for_serverguide_expand_31_30_hasNext))) {
								c.push("\n");
							}
							else if ((S.compat.eq(l_for_serverguide_expand_31_30_iteration, S.compat.sub(l_friendCount, 1)) && S.compat.lt(l_friendCount, S.compat.add(l_MAX, 1)))) {
								c.push(" and\n");
							}
							else {
								c.push(" ,\n");
							}
						}
						else if (S.compat.eq(l_for_serverguide_expand_31_30_iteration, S.compat.add(l_MAX, 1))) {
							c.push(" and ");
							c.push(Surface.valOut(S.compat.sub(S.Modifier.count(o.friendsOnServer), l_MAX)));
							c.push(" more\n");
						}
						c.push(" ");
					}
				}
				c.push("\n");
			}
			else {
				c.push(" ");
				c.push(Surface.valOut("No friends playing"));
				c.push("\n");
			}
			c.push(" ");
		}
		c.push("\n");
	}
	c.push(" </div>\n <div class=\"serverguide-expand-friendavatars\">\n");
	l_for_serverguide_expand_52_18_list = o.friendsOnServer;
	l_for_serverguide_expand_52_18_iteration = 0;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_expand_52_18_list), 0)) {
		for (var l_for_serverguide_expand_52_18_key in l_for_serverguide_expand_52_18_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_expand_52_18_list[l_for_serverguide_expand_52_18_key])) {
				continue;
			}
			var l_friend = l_for_serverguide_expand_52_18_list[l_for_serverguide_expand_52_18_key];
			l_for_serverguide_expand_52_18_iteration = S.compat.add(l_for_serverguide_expand_52_18_iteration, 1);
			if (S.compat.lt(l_for_serverguide_expand_52_18_iteration, 16)) {
				c.push(" <div class=\"base-left\">");
				c.push(Surface.importTemplate(("ui" + ("." + "avatar")), {"user": l_friend, "size": 33}, null, kwargs));
				c.push("</div>\n");
			}
		}
	}
	c.push(" </div>\n </div>\n <div class=\"serverguide-expand-toolbar\">\n <div title=\"");
	c.push(Surface.valOut("Refresh information"));
	c.push("\" class=\"serverguide-expand-refresh\">\n </div>\n <div title=\"");
	c.push(Surface.valOut("Toggle this as a favorite server"));
	c.push("\" class=\"serverguide-expand-favorite");
	if (!(((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false))) {
		c.push("-disabled");
	}
	c.push("\">\n");
	if (((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false)) {
		c.push(" <form action=\"");
		c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/gameserverbookmark/toggleFavourite/", Surface.urlContext)));
		c.push("\">\n ");
		c.push(Surface.importTemplate(("base" + ("." + "postChecksum")), o, null, kwargs));
		c.push("\n <input type=\"hidden\" name=\"guid\" value=\"");
		c.push(Surface.valOut(o.server.guid));
		c.push("\" />\n </form>\n");
	}
	c.push(" </div>\n <div class=\"serverguide-expand-link\">\n <input type=\"text\" value=\"");
	c.push(Surface.valOut($S.callFunction("common.showServerUrlByServer", o.server, b, kwargs)));
	c.push("\" />\n </div>\n <div class=\"serverguide-expand-go\">\n </div>\n </div>\n </div>\n <div style=\"clear:both;\"></div>\n</div>\n");
	return c.join('');
}
;
;var block_serverguide_favourites = new Surface.BlockConfig('serverguide.base', {'serverguideTitle': 'serverguide.favourites.block_serverguideTitle', 'serverguideContent': 'serverguide.favourites.block_serverguideContent', 'titleItem': 'serverguide.favourites.block_titleItem'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('favourites'));
serverguide.favourites.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_favourites;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.favourites');
	c.push("\n");
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('serverguide.base', o, b, kwargs);
}
;
var block_serverguide_favourites_use_12_14 = new Surface.BlockConfig('common.boxwideclean', {'content': 'serverguide.favourites._use_12_14_block_content', 'extraClassInner': 'serverguide.favourites._use_12_14_block_extraClassInner', 'titleContainer': 'serverguide.favourites._use_12_14_block_titleContainer', 'extraClass': 'serverguide.favourites._use_12_14_block_extraClass'});
serverguide.favourites.block_titleItem = new Surface.Block('serverguide.favourites.block_titleItem');
serverguide.favourites.block_titleItem.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(Surface.valOut("Favorites"));
	c.push(" - ");
	return c.join("");
}
;
serverguide.favourites.block_serverguideTitle = new Surface.Block('serverguide.favourites.block_serverguideTitle');
serverguide.favourites.block_serverguideTitle.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(Surface.valOut("Favorites"));
	return c.join("");
}
;
serverguide.favourites._use_12_14_block_extraClass = new Surface.Block('serverguide.favourites._use_12_14_block_extraClass');
serverguide.favourites._use_12_14_block_extraClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverguide-list serverguide-favorites-list");
	return c.join("");
}
;
serverguide.favourites._use_12_14_block_extraClassInner = new Surface.Block('serverguide.favourites._use_12_14_block_extraClassInner');
serverguide.favourites._use_12_14_block_extraClassInner.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("common-box-nopadding");
	return c.join("");
}
;
serverguide.favourites._use_12_14_block_titleContainer = new Surface.Block('serverguide.favourites._use_12_14_block_titleContainer');
serverguide.favourites._use_12_14_block_titleContainer.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	return c.join("");
}
;
serverguide.favourites._use_12_14_block_content = new Surface.Block('serverguide.favourites._use_12_14_block_content');
serverguide.favourites._use_12_14_block_content.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "serverlist2")), {"servers": o.servers}, null, kwargs));
	c.push("\n <div style=\"clear:both;\"></div>\n ");
	return c.join("");
}
;
serverguide.favourites.block_serverguideContent = new Surface.Block('serverguide.favourites.block_serverguideContent');
serverguide.favourites.block_serverguideContent.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("\n");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.serverinfo) != "undefined" && o.serverinfo !== null) && S.compat.gt(S.Modifier.count(o.servers), 0))) {
		c.push(" ");
		c.push(Surface.importTemplate(("serverguide" + ("." + "bf3serverinfo")), o, null, kwargs));
		c.push("\n <div style=\"float: left; width:656px;\">\n");
		c.push(Surface.importTemplate(("common" + ("." + "boxwideclean")), o, block_serverguide_favourites_use_12_14, kwargs));
		c.push("\n </div>\n");
	}
	else {
		c.push(" <div id=\"serverguide-noservers\">\n <h1>");
		c.push(Surface.valOut("You have no favorite servers"));
		c.push("</h1>\n <p>");
		c.push(Surface.valOut("You can add favorite servers for easier access by clicking 'Add as Favorite' in the server info"));
		c.push("</p>\n </div>\n");
	}
	c.push("\n");
	return c.join("");
}
;
;var block_serverguide_filteradvanced = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filteradvanced'));
serverguide.filteradvanced.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filteradvanced;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filteradvanced');
	c.push("\n<section class=\"filter\">\n <h3>");
	c.push(Surface.valOut("Advanced settings"));
	c.push("</h3>\n <ul>\n <li id=\"serverguide-advanced-settings-checkbox\" class=\"");
	if (S.compat.gt(S.Modifier.count(o.filter.settings), 0)) {
		c.push("on");
	}
	c.push("\"><input type=\"checkbox\" name=\"useAdvanced\" value=\"1\" id=\"useAdvanced\"");
	if (S.compat.gt(S.Modifier.count(o.filter.settings), 0)) {
		c.push(" checked");
	}
	c.push("> <label for=\"useAdvanced\">");
	c.push(Surface.valOut("Filters"));
	c.push("</label>\n <a id=\"serverguide-open-advanced-link\" class=\"serverguide-open-filter-box\" data-label=\"");
	c.push(Surface.valOut("Set filters"));
	c.push("\">");
	if (S.compat.gt(S.Modifier.count(o.filter.settings), 0)) {
		c.push(Surface.valOut(S.Modifier.count(o.filter.settings)));
		c.push(" ");
		c.push(Surface.valOut("More"));
		c.push(" - ");
		c.push(Surface.valOut("Edit"));
	}
	else {
		c.push(Surface.valOut("Set filters"));
	}
	c.push("</a>\n </li>\n </ul>\n</section>");
	return c.join('');
}
;
;var block_serverguide_filterbool = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filterbool'));
serverguide.filterbool.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filterbool;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filterbool');
	var l_settingValue;
	var l_for_serverguide_filterbool_5_2_list;
	var l_name;
	var l_nameSID;
	var l_gameServerSettingInfo;
	c.push("\n<div class=\"serverguide-advanced-filter-name\">\n <h1>");
	c.push(Surface.valOut("Game settings"));
	c.push("</h1>\n</div>\n");
	l_for_serverguide_filterbool_5_2_list = o.filters.filters;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_filterbool_5_2_list), 0)) {
		for (var l_for_serverguide_filterbool_5_2_key in l_for_serverguide_filterbool_5_2_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_filterbool_5_2_list[l_for_serverguide_filterbool_5_2_key])) {
				continue;
			}
			var l_filter = l_for_serverguide_filterbool_5_2_list[l_for_serverguide_filterbool_5_2_key];
			l_gameServerSettingInfo = l_filter;
			l_settingValue = S.Modifier.get(o.serverSettings, l_filter.key, false);
			l_nameSID = S.Modifier.get(l_gameServerSettingInfo, "nameSID");
			l_name = S.Modifier.get(l_gameServerSettingInfo, "name");
			if (!(l_name)) {
				l_name = (S.translations[l_nameSID] || l_nameSID);
			}
			c.push(" <div id=\"serverguide-");
			c.push(Surface.valOut(l_filter.key));
			c.push("\" data-key=\"");
			c.push(Surface.valOut(l_filter.key));
			c.push("\" data-type=\"bool\" class=\"bool-filter popup-serveradvancedfilter-value serverguide-advancedfilter-selectable serverguide-selectable serverguide-selectable-multi ");
			if (S.Modifier.contains(l_settingValue, "1")) {
				c.push("serverguide-include");
			}
			else if (S.Modifier.contains(l_settingValue, "0")) {
				c.push("serverguide-noinclude");
			}
			else {
				c.push("serverguide-exclude");
			}
			c.push("\" filter=\"settings-");
			c.push(Surface.valOut(l_filter.key));
			c.push("\" value=\"1,0\">\n <div class=\"ticbox\"></div>\n <span>");
			c.push(Surface.valOut(S.Modifier.capitalize(S.Modifier.lower(l_name))));
			c.push("</span>\n <input type=\"hidden\" name=\"settings-");
			c.push(Surface.valOut(l_filter.key));
			c.push("\" value=\"");
			c.push(Surface.valOut(((typeof(S.Modifier.get(l_settingValue, "min")) != "undefined" && S.Modifier.get(l_settingValue, "min") !== null) ? S.Modifier.get(l_settingValue, "min") : "")));
			c.push("\" />\n <div class=\"base-clear\"></div>\n </div>\n");
		}
	}
	return c.join('');
}
;
;var block_serverguide_filterdetails = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filterdetails'));
serverguide.filterdetails.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filterdetails;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filterdetails');
	var l_for_serverguide_filterdetails_5_10_list;
	c.push("\n<section class=\"filter\">\n <h3>");
	c.push(Surface.valOut("Detailed"));
	c.push("</h3>\n <ul>\n");
	l_for_serverguide_filterdetails_5_10_list = o.gamedetails;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_filterdetails_5_10_list), 0)) {
		for (var l_for_serverguide_filterdetails_5_10_key in l_for_serverguide_filterdetails_5_10_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_filterdetails_5_10_list[l_for_serverguide_filterdetails_5_10_key])) {
				continue;
			}
			var l_detail = l_for_serverguide_filterdetails_5_10_list[l_for_serverguide_filterdetails_5_10_key];
			c.push(" ");
			c.push(Surface.importTemplate(("serverguide" + ("." + "filteritem")), {"item": l_detail, "collection": "gamedetails", "filter": o.filter}, null, kwargs));
			c.push("\n");
		}
	}
	c.push(" </ul>\n</section>");
	return c.join('');
}
;
;var block_serverguide_filterextra = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filterextra'));
serverguide.filterextra.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filterextra;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filterextra');
	c.push("\n<div class=\"serverguide-filter serverguide-filter-extra\">\n <div class=\"serverguide-filter-name\"><h1>");
	c.push(Surface.valOut("Preset"));
	c.push("</h1></div>\n <div class=\"serverguide-filter-selectables\">\n <div id=\"serverguide-normal\" class=\"serverguide-selectable ");
	if (S.Modifier.contains(o.filter.gamepresets, "normal")) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"gamepresets\" value=\"normal\" >\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("Normal"));
	c.push("</span>\n </div>\n <div id=\"serverguide-hardcore\" class=\"serverguide-selectable ");
	if (S.Modifier.contains(o.filter.gamepresets, "hardcore")) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"gamepresets\" value=\"hardcore\" >\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("Hardcore"));
	c.push("</span>\n </div>\n <input type=\"hidden\" name=\"gamepresets\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(o.filter.gamepresets, "|")));
	c.push("\" />\n </div>\n <div class=\"serverguide-filter-name\"><h1>");
	c.push(Surface.valOut("Ranked"));
	c.push("</h1></div>\n <div class=\"serverguide-filter-selectables\">\n <div id=\"serverguide-ranked\" class=\"serverguide-selectable ");
	if (S.Modifier.contains(o.filter.ranked, "On")) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"ranked\" value=\"On\" >\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("On"));
	c.push("</span>\n </div>\n <div id=\"serverguide-ranked\" class=\"serverguide-selectable ");
	if (S.Modifier.contains(o.filter.ranked, "Off")) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"ranked\" value=\"Off\" >\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("Off"));
	c.push("</span>\n </div>\n <input type=\"hidden\" name=\"ranked\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(o.filter.ranked, "|")));
	c.push("\" />\n </div>\n <div class=\"serverguide-filter-name\"><h1>");
	c.push(Surface.valOut("Punkbuster"));
	c.push("</h1></div>\n <div class=\"serverguide-filter-selectables\">\n <div id=\"serverguide-punkbuster\" class=\"serverguide-selectable ");
	if (S.Modifier.contains(o.filter.punkbuster, "On")) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"punkbuster\" value=\"On\" >\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("On"));
	c.push("</span>\n </div>\n <div id=\"serverguide-punkbuster\" class=\"serverguide-selectable ");
	if (S.Modifier.contains(o.filter.punkbuster, "Off")) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"punkbuster\" value=\"Off\" >\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("Off"));
	c.push("</span>\n </div>\n <input type=\"hidden\" name=\"punkbuster\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(o.filter.punkbuster, "|")));
	c.push("\" />\n </div>\n</div>");
	return c.join('');
}
;
;var block_serverguide_filterextravenice = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filterextravenice'));
serverguide.filterextravenice.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filterextravenice;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filterextravenice');
	var l_filterAdvancedSettings;
	c.push("\n");
	l_filterAdvancedSettings = S.Modifier.get(Surface.globalContext, "filterAdvancedSettings");
	c.push("<div class=\"serverguide-filter serverguide-filter-extra\">\n <div class=\"serverguide-filter-name\"><h1>");
	c.push(Surface.valOut("Preset"));
	c.push("</h1></div>\n <div class=\"serverguide-filter-selectables\">\n <div id=\"serverguide-normal\" class=\"serverguide-selectable ");
	if (S.Modifier.contains(o.filter.gamepresets, "normal")) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"gamepresets\" value=\"normal\" >\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("Normal"));
	c.push("</span>\n </div>\n <div id=\"serverguide-hardcore\" class=\"serverguide-selectable ");
	if (S.Modifier.contains(o.filter.gamepresets, "hardcore")) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"gamepresets\" value=\"hardcore\" >\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("Hardcore"));
	c.push("</span>\n </div>\n <div id=\"serverguide-infantry\" class=\"serverguide-selectable ");
	if (S.Modifier.contains(o.filter.gamepresets, "infantry")) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"gamepresets\" value=\"infantry\" >\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("ID_WEB_FILTEREXTRABF3_INFANTRY_ONLY"));
	c.push("</span>\n </div>\n <input type=\"hidden\" name=\"gamepresets\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.gamepresets) != "undefined" && o.filter.gamepresets !== null) ? o.filter.gamepresets : []), "|")));
	c.push("\" />\n </div>\n <div class=\"serverguide-filter-name\"><h1>");
	c.push(Surface.valOut("Detailed"));
	c.push("</h1></div>\n <div class=\"serverguide-filter-selectables\">\n <div id=\"serverguide-ranked\" class=\"serverguide-selectable serverguide-selectable-multi ");
	if (S.Modifier.contains(o.filter.ranked, "On")) {
		c.push("serverguide-include");
	}
	else if (S.Modifier.contains(o.filter.ranked, "Off")) {
		c.push("serverguide-noinclude");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"ranked\" value=\"On,Off\" >\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("Ranked"));
	c.push("</span>\n </div>\n <div id=\"serverguide-punkbuster\" class=\"serverguide-selectable serverguide-selectable-multi ");
	if (S.Modifier.contains(o.filter.punkbuster, "On")) {
		c.push("serverguide-include");
	}
	else if (S.Modifier.contains(o.filter.punkbuster, "Off")) {
		c.push("serverguide-noinclude");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"punkbuster\" value=\"On,Off\">\n <div class=\"ticbox\"></div>\n <span>Punkbuster</span>\n </div>\n <div id=\"serverguide-maprotation\" class=\"serverguide-selectable serverguide-selectable-multi ");
	if (S.Modifier.contains(o.filter.mapRotation, "On")) {
		c.push("serverguide-include");
	}
	else if (S.Modifier.contains(o.filter.mapRotation, "Off")) {
		c.push("serverguide-noinclude");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"mapRotation\" value=\"On,Off\">\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("Map rotation"));
	c.push("</span>\n </div>\n <div id=\"serverguide-moderotation\" class=\"serverguide-selectable serverguide-selectable-multi ");
	if (S.Modifier.contains(o.filter.modeRotation, "On")) {
		c.push("serverguide-include");
	}
	else if (S.Modifier.contains(o.filter.modeRotation, "Off")) {
		c.push("serverguide-noinclude");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"modeRotation\" value=\"On,Off\">\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("Game mode rotation"));
	c.push("</span>\n </div>\n <div id=\"serverguide-password\" class=\"serverguide-selectable serverguide-selectable-multi ");
	if (S.Modifier.contains(o.filter.password, "On")) {
		c.push("serverguide-include");
	}
	else if (S.Modifier.contains(o.filter.password, "Off")) {
		c.push("serverguide-noinclude");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"password\" value=\"On,Off\">\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("Password protection"));
	c.push("</span>\n </div>\n <input type=\"hidden\" name=\"ranked\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.ranked) != "undefined" && o.filter.ranked !== null) ? o.filter.ranked : []), "|")));
	c.push("\" />\n <input type=\"hidden\" name=\"punkbuster\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.punkbuster) != "undefined" && o.filter.punkbuster !== null) ? o.filter.punkbuster : []), "|")));
	c.push("\" />\n <input type=\"hidden\" name=\"mapRotation\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.mapRotation) != "undefined" && o.filter.mapRotation !== null) ? o.filter.mapRotation : []), "|")));
	c.push("\" />\n <input type=\"hidden\" name=\"modeRotation\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.modeRotation) != "undefined" && o.filter.modeRotation !== null) ? o.filter.modeRotation : []), "|")));
	c.push("\" />\n <input type=\"hidden\" name=\"password\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.password) != "undefined" && o.filter.password !== null) ? o.filter.password : []), "|")));
	c.push("\" />\n </div>\n <div class=\"serverguide-filter-name\"><h1>");
	c.push(Surface.valOut("Advanced settings"));
	c.push("</h1></div>\n <div class=\"serverguide-filter-selectables\">\n <div id=\"serverguide-advanced-settings-checkbox\" class=\"serverguide-selectable ");
	if (S.Modifier.contains(o.filter.useAdvanced, "On")) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"useAdvanced\" value=\"On\" >\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("Filters"));
	c.push("</span>\n </div>\n <a id=\"serverguide-open-advanced-link\" class=\"serverguide-open-filter-box\">");
	if (S.Modifier.count(l_filterAdvancedSettings)) {
		c.push(Surface.valOut(S.Modifier.count(l_filterAdvancedSettings)));
		c.push(" ");
		c.push(Surface.valOut("More"));
		c.push(" - ");
		c.push(Surface.valOut("Edit"));
	}
	else {
		c.push(Surface.valOut("Set filters"));
	}
	c.push("</a>\n <input type=\"hidden\" name=\"useAdvanced\" value=\"");
	if ((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.useAdvanced) != "undefined" && o.filter.useAdvanced !== null)) {
		c.push(Surface.valOut(S.Modifier.join(o.filter.useAdvanced, "|")));
	}
	c.push("\" />\n </div>\n</div>\n");
	return c.join('');
}
;
;var block_serverguide_filterfreetext = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filterfreetext'));
serverguide.filterfreetext.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filterfreetext;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filterfreetext');
	c.push("\n<section class=\"filter\" id=\"freetext-filter\">\n <h3>");
	c.push(Surface.valOut("Filter by server name"));
	c.push("</h3>\n");
	if (!((typeof(o) != "undefined" && o !== null && typeof(o.searchQuery) != "undefined" && o.searchQuery !== null))) {
		o.searchQuery = "";
	}
	c.push(" <input id=\"serverguide-search-input\" type=\"text\" placeholder=\"");
	c.push(Surface.valOut("Server Name"));
	c.push("\" name=\"q\" title=\"\" value=\"");
	c.push(Surface.valOut(((typeof(o) != "undefined" && o !== null && typeof(o.searchQuery) != "undefined" && o.searchQuery !== null) ? o.searchQuery : "")));
	c.push("\" autocomplete=\"off\" maxlength=\"100\" />\n</section>");
	return c.join('');
}
;
;var block_serverguide_filtergameexpansion = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filtergameexpansion'));
serverguide.filtergameexpansion.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filtergameexpansion;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filtergameexpansion');
	var l_for_serverguide_filtergameexpansion_5_10_list;
	c.push("\n<section class=\"filter gameexpansion-filter\">\n <h3>");
	c.push(Surface.valOut("Game"));
	c.push("</h3>\n <ul>\n");
	l_for_serverguide_filtergameexpansion_5_10_list = o.gameexpansions;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_filtergameexpansion_5_10_list), 0)) {
		for (var l_for_serverguide_filtergameexpansion_5_10_key in l_for_serverguide_filtergameexpansion_5_10_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_filtergameexpansion_5_10_list[l_for_serverguide_filtergameexpansion_5_10_key])) {
				continue;
			}
			var l_expansion = l_for_serverguide_filtergameexpansion_5_10_list[l_for_serverguide_filtergameexpansion_5_10_key];
			c.push(" <li>\n <input");
			if (S.Modifier.contains(o.filter.gameexpansions, l_expansion.id)) {
				c.push(" checked ");
			}
			c.push(" type=\"checkbox\" name=\"gameexpansions\" value=\"");
			c.push(Surface.valOut(l_expansion.id));
			c.push("\" id=\"gameexpansion-");
			c.push(Surface.valOut(l_expansion.id));
			c.push("\"> <label for=\"gameexpansion-");
			c.push(Surface.valOut(l_expansion.id));
			c.push("\"><img alt=\"");
			c.push(Surface.valOut(l_expansion.label));
			c.push("\" src=\"");
			c.push(Surface.valOut($S.callFunction("base.asset", S.compat.add(S.compat.add(S.compat.add(S.compat.add("/public/serverguide/", $S.callFunction("base.section", Surface.globalContext.realm.section, b, kwargs)), "/filter-"), S.Modifier.concat(l_expansion.id, "")), ".png"), b, kwargs)));
			c.push("\"></label>\n </li>\n");
		}
	}
	c.push(" </ul>\n</section>");
	return c.join('');
}
;
;var block_serverguide_filtergamemode = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filtergamemode'));
serverguide.filtergamemode.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filtergamemode;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filtergamemode');
	var l_for_serverguide_filtergamemode_5_10_list;
	c.push("\n<section class=\"filter split\">\n <h3>");
	c.push(Surface.valOut("Mode"));
	c.push("</h3>\n <ul>\n");
	l_for_serverguide_filtergamemode_5_10_list = o.gamemodes;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_filtergamemode_5_10_list), 0)) {
		for (var l_for_serverguide_filtergamemode_5_10_key in l_for_serverguide_filtergamemode_5_10_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_filtergamemode_5_10_list[l_for_serverguide_filtergamemode_5_10_key])) {
				continue;
			}
			var l_mode = l_for_serverguide_filtergamemode_5_10_list[l_for_serverguide_filtergamemode_5_10_key];
			c.push(" ");
			c.push(Surface.importTemplate(("serverguide" + ("." + "filteritem")), {"item": l_mode, "collection": "gamemodes", "filter": o.filter}, null, kwargs));
			c.push("\n");
		}
	}
	c.push(" </ul>\n</section>");
	return c.join('');
}
;
;var block_serverguide_filtergamesize = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filtergamesize'));
serverguide.filtergamesize.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filtergamesize;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filtergamesize');
	var l_for_serverguide_filtergamesize_5_10_list;
	c.push("\n<section class=\"filter\">\n <h3>");
	c.push(Surface.valOut("Game size"));
	c.push("</h3>\n <ul>\n");
	l_for_serverguide_filtergamesize_5_10_list = o.gamesize;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_filtergamesize_5_10_list), 0)) {
		for (var l_for_serverguide_filtergamesize_5_10_key in l_for_serverguide_filtergamesize_5_10_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_filtergamesize_5_10_list[l_for_serverguide_filtergamesize_5_10_key])) {
				continue;
			}
			var l_size = l_for_serverguide_filtergamesize_5_10_list[l_for_serverguide_filtergamesize_5_10_key];
			c.push(" ");
			c.push(Surface.importTemplate(("serverguide" + ("." + "filteritem")), {"item": l_size, "collection": "gameSize", "filter": o.filter}, null, kwargs));
			c.push("\n");
		}
	}
	c.push(" </ul>\n</section>");
	return c.join('');
}
;
;var block_serverguide_filtergameslots = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filtergameslots'));
serverguide.filtergameslots.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filtergameslots;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filtergameslots');
	var l_for_serverguide_filtergameslots_5_10_list;
	c.push("\n<section class=\"filter\">\n <h3>");
	c.push(Surface.valOut("Free slots"));
	c.push("</h3>\n <ul>\n");
	l_for_serverguide_filtergameslots_5_10_list = o.gameslots;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_filtergameslots_5_10_list), 0)) {
		for (var l_for_serverguide_filtergameslots_5_10_key in l_for_serverguide_filtergameslots_5_10_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_filtergameslots_5_10_list[l_for_serverguide_filtergameslots_5_10_key])) {
				continue;
			}
			var l_slot = l_for_serverguide_filtergameslots_5_10_list[l_for_serverguide_filtergameslots_5_10_key];
			c.push(" ");
			c.push(Surface.importTemplate(("serverguide" + ("." + "filteritem")), {"item": l_slot, "collection": "slots", "filter": o.filter}, null, kwargs));
			c.push("\n");
		}
	}
	c.push(" </ul>\n</section>");
	return c.join('');
}
;
;var block_serverguide_filtergametype = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filtergametype'));
serverguide.filtergametype.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filtergametype;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filtergametype');
	c.push("\n<div class=\"serverguide-filter serverguide-filter-gametype\">\n <div class=\"serverguide-filter-name\"><h1>");
	c.push(Surface.valOut("Variant"));
	c.push("</h1></div>\n <div class=\"serverguide-filter-selectables\">\n <div id=\"serverguide-normal\" class=\"serverguide-selectable ");
	if (S.Modifier.contains(o.filter.gamepresets, "normal")) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"gamepresets\" value=\"normal\" title=\"Normal\">\n <span>");
	c.push(Surface.valOut("Normal"));
	c.push("</span>\n </div>\n <div id=\"serverguide-hardcore\" class=\"serverguide-selectable ");
	if (S.Modifier.contains(o.filter.gamepresets, "hardcore")) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"gamepresets\" value=\"hardcore\" title=\"Hardcore\">\n <span>");
	c.push(Surface.valOut("Hardcore"));
	c.push("</span>\n </div>\n </div>\n <input type=\"hidden\" name=\"gamepresets\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(o.filter.gamepresets, "|")));
	c.push("\" />\n</div>");
	return c.join('');
}
;
;var block_serverguide_filteritem = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filteritem'));
serverguide.filteritem.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filteritem;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filteritem');
	var l_img_width;
	var l_class_name;
	var l_img_height;
	var l_selected;
	c.push("\n");
	l_img_width = ((typeof(o) != "undefined" && o !== null && typeof(o.item) != "undefined" && o.item !== null && typeof(o.item.width) != "undefined" && o.item.width !== null) ? o.item.width : "30");
	l_img_height = ((typeof(o) != "undefined" && o !== null && typeof(o.item) != "undefined" && o.item !== null && typeof(o.item.height) != "undefined" && o.item.height !== null) ? o.item.height : "21");
	l_class_name = "";
	c.push("\n");
	if ((typeof(o) != "undefined" && o !== null && typeof(o.item) != "undefined" && o.item !== null && typeof(o.item.name) != "undefined" && o.item.name !== null)) {
		l_selected = S.Modifier.get(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null) ? o.filter : {}), o.item.name, -1);
		if (S.compat.eq(l_selected, 0)) {
			l_class_name = "off";
		}
		if (S.compat.eq(l_selected, 1)) {
			l_class_name = "on";
		}
		c.push(" <li");
		if (S.compat.neq(l_class_name, "")) {
			c.push(" class=\"");
			c.push(Surface.valOut(l_class_name));
			c.push("\"");
		}
		c.push(">\n <select name=\"");
		c.push(Surface.valOut(o.item.name));
		c.push("\" id=\"");
		c.push(Surface.valOut(o.collection));
		c.push("-");
		c.push(Surface.valOut(o.item.id));
		c.push("\">\n <option value=\"-1\"");
		if (S.compat.eq(l_selected, -1)) {
			c.push(" selected");
		}
		c.push(">-1</option>\n <option value=\"1\"");
		if (S.compat.eq(l_selected, 1)) {
			c.push(" selected");
		}
		c.push(">1</option>\n <option value=\"0\"");
		if (S.compat.eq(l_selected, 0)) {
			c.push(" selected");
		}
		c.push(">0</option>\n </select>\n <label for=\"");
		c.push(Surface.valOut(o.collection));
		c.push("-");
		c.push(Surface.valOut(o.item.id));
		c.push("\" class=\"");
		if (S.compat.eq(o.item.name, "premium")) {
			c.push("premium");
		}
		c.push("\">\n ");
		if ((typeof(o) != "undefined" && o !== null && typeof(o.item) != "undefined" && o.item !== null && typeof(o.item.icon) != "undefined" && o.item.icon !== null)) {
			c.push("<img class=\"icon\" width=\"");
			c.push(Surface.valOut(l_img_width));
			c.push("\" height=\"");
			c.push(Surface.valOut(o.height));
			c.push("\" alt=\"");
			c.push(Surface.valOut(o.item.label));
			c.push("\" src=\"");
			c.push(Surface.valOut(o.item.icon));
			c.push("\">");
		}
		c.push(Surface.valOut(o.item.label));
		c.push("\n </label>\n </li>\n");
	}
	else {
		l_selected = [];
		if (((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null) && S.Modifier.get(o.filter, o.collection))) {
			l_selected = S.Modifier.get(o.filter, o.collection);
			if (S.Modifier.contains(l_selected, o.item.id)) {
				l_class_name = "on";
			}
		}
		c.push(" <li");
		if (S.compat.neq(l_class_name, "")) {
			c.push(" class=\"");
			c.push(Surface.valOut(l_class_name));
			c.push("\"");
		}
		c.push(">\n <input type=\"checkbox\" name=\"");
		c.push(Surface.valOut(o.collection));
		c.push("\" value=\"");
		c.push(Surface.valOut(o.item.id));
		c.push("\" id=\"");
		c.push(Surface.valOut(o.collection));
		c.push("-");
		c.push(Surface.valOut(o.item.id));
		c.push("\"");
		if (S.Modifier.contains(l_selected, o.item.id)) {
			c.push(" checked");
		}
		c.push(">\n <label for=\"");
		c.push(Surface.valOut(o.collection));
		c.push("-");
		c.push(Surface.valOut(o.item.id));
		c.push("\">");
		if ((typeof(o) != "undefined" && o !== null && typeof(o.item) != "undefined" && o.item !== null && typeof(o.item.icon) != "undefined" && o.item.icon !== null)) {
			c.push("<img class=\"filter-icon\" width=\"");
			c.push(Surface.valOut(l_img_width));
			c.push("\" height=\"");
			c.push(Surface.valOut(l_img_height));
			c.push("\" alt=\"");
			c.push(Surface.valOut(o.item.label));
			c.push("\" src=\"");
			c.push(Surface.valOut($S.callFunction("base.asset", o.item.icon, b, kwargs)));
			c.push("\">");
		}
		c.push(Surface.valOut(o.item.label));
		c.push("</label>\n </li>\n");
	}
	return c.join('');
}
;
;var block_serverguide_filtermaps = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filtermaps'));
serverguide.filtermaps.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filtermaps;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filtermaps');
	var l_for_serverguide_filtermaps_6_10_list;
	var l_mapinfo;
	var l_mapsSorted;
	c.push("\n<section class=\"filter split\">\n <h3>");
	c.push(Surface.valOut("Maps"));
	c.push("</h3>\n <ul>\n");
	l_mapsSorted = S.Modifier.multisort(o.maps, "gameExpansion", "asc", "id", "asc");
	l_for_serverguide_filtermaps_6_10_list = l_mapsSorted;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_filtermaps_6_10_list), 0)) {
		for (var l_for_serverguide_filtermaps_6_10_key in l_for_serverguide_filtermaps_6_10_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_filtermaps_6_10_list[l_for_serverguide_filtermaps_6_10_key])) {
				continue;
			}
			var l_map = l_for_serverguide_filtermaps_6_10_list[l_for_serverguide_filtermaps_6_10_key];
			l_mapinfo = $S.callFunction("common.mapinfo", Surface.globalContext.realm.game, l_map.id, b, kwargs);
			l_map.icon = S.Modifier.get(l_mapinfo, "imageIcon");
			c.push(" ");
			c.push(Surface.importTemplate(("serverguide" + ("." + "filteritem")), {"item": l_map, "collection": "maps", "filter": o.filter}, null, kwargs));
			c.push("\n");
		}
	}
	c.push(" </ul>\n</section>");
	return c.join('');
}
;
;var block_serverguide_filternumber = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filternumber'));
serverguide.filternumber.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filternumber;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filternumber');
	var l_settingValueMax;
	var l_settingValue;
	var l_settingValueMin;
	var l_settingMaxLength;
	var l_serverSettingKey;
	var l_name;
	var l_gameServerSettingInfo;
	var l_settingValueDefault;
	var l_for_serverguide_filternumber_6_2_list;
	c.push("\n<div class=\"serverguide-advanced-filter-name\">\n <h1>");
	c.push(Surface.valOut("Rules"));
	c.push("</h1>\n</div>\n<table>\n");
	l_for_serverguide_filternumber_6_2_list = o.filters.filters;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_filternumber_6_2_list), 0)) {
		for (var l_for_serverguide_filternumber_6_2_key in l_for_serverguide_filternumber_6_2_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_filternumber_6_2_list[l_for_serverguide_filternumber_6_2_key])) {
				continue;
			}
			var l_filter = l_for_serverguide_filternumber_6_2_list[l_for_serverguide_filternumber_6_2_key];
			l_serverSettingKey = l_filter.key;
			l_gameServerSettingInfo = l_filter;
			l_settingValue = S.Modifier.get(o.serverSettings, l_serverSettingKey, false);
			l_settingValueDefault = S.Modifier.get(l_gameServerSettingInfo, "default", 0);
			l_settingValueMin = S.Modifier.get(l_settingValue, "min", S.Modifier.get(l_gameServerSettingInfo, "min", l_settingValueDefault));
			l_settingValueMax = S.Modifier.get(l_settingValue, "max", S.Modifier.get(l_gameServerSettingInfo, "max", l_settingValueDefault));
			c.push("\n");
			l_name = S.Modifier.get(l_gameServerSettingInfo, "name");
			c.push(" <tr>\n <td class=\"advanced-filter-col\">\n <div class=\"popup-serveradvancedfilter-title\">");
			c.push(Surface.valOut(S.Modifier.capitalize(S.Modifier.lower(l_name))));
			c.push("</div>\n </td>\n <td>\n <div data-filter=\"");
			c.push(Surface.valOut(o.filters.type));
			c.push("\" class=\"popup-serveradvancedfilter-value\" data-key=\"");
			c.push(Surface.valOut(l_serverSettingKey));
			c.push("\" ");
			if (S.compat.eq(S.Modifier.get(l_gameServerSettingInfo, "type"), "bool")) {
				c.push("data-type=\"bool\"");
			}
			else {
				c.push("data-type=\"range\"");
			}
			c.push(" data-default=\"");
			c.push(Surface.valOut(S.Modifier.get(l_gameServerSettingInfo, "default", 0)));
			c.push("\" filter=\"settings\">\n");
			if (S.compat.eq(S.Modifier.get(l_gameServerSettingInfo, "type"), "bool")) {
				c.push(" <select name=\"");
				c.push(Surface.valOut(l_serverSettingKey));
				c.push("\" class=\"popup-serveradvancedfilter-select\">\n <option value=\"-\">Any</option>\n <option value=\"1\"");
				if ((S.compat.eq(l_settingValueMin, "1") && l_settingValue)) {
					c.push(" selected");
				}
				c.push(">On</option>\n <option value=\"0\"");
				if ((S.compat.eq(l_settingValueMin, "0") && l_settingValue)) {
					c.push(" selected");
				}
				c.push(">Off</option>\n </select>\n <input name=\"");
				c.push(Surface.valOut(l_serverSettingKey));
				c.push("\" type=\"checkbox\" ");
				if (S.compat.eq(l_settingValueMin, "1")) {
					c.push("checked");
				}
				c.push(" />\n");
			}
			else {
				l_settingMaxLength = S.Modifier.count(S.Modifier.concat("", l_settingValueMax));
				c.push(" <input class=\"popup-serveradvancedfilter-input\" name=\"");
				c.push(Surface.valOut(l_serverSettingKey));
				c.push("-min\" type=\"number\" maxlength=\"");
				c.push(Surface.valOut(l_settingMaxLength));
				c.push("\" min=\"");
				c.push(Surface.valOut(l_settingValueMin));
				c.push("\" max=\"");
				c.push(Surface.valOut(l_settingValueMax));
				c.push("\" value=\"");
				c.push(Surface.valOut(l_settingValueMin));
				c.push("\" /> - <input class=\"popup-serveradvancedfilter-input\" name=\"");
				c.push(Surface.valOut(l_serverSettingKey));
				c.push("-max\" type=\"number\" maxlength=\"");
				c.push(Surface.valOut(l_settingMaxLength));
				c.push("\" min=\"");
				c.push(Surface.valOut(l_settingValueMin));
				c.push("\" max=\"");
				c.push(Surface.valOut(l_settingValueMax));
				c.push("\" value=\"");
				c.push(Surface.valOut(l_settingValueMax));
				c.push("\" />\n");
			}
			c.push(" <span style=\"color: #898989;\">");
			if (S.compat.eq(S.Modifier.get(l_gameServerSettingInfo, "unitType"), "percent")) {
				c.push("%");
			}
			else {
				c.push(Surface.valOut(S.Modifier.get(l_gameServerSettingInfo, "unitType")));
			}
			c.push("</span>\n <div class=\"base-clear\"></div>\n </div>\n </td>\n </tr>\n");
		}
	}
	c.push("</table>");
	return c.join('');
}
;
;var block_serverguide_filterpercent = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filterpercent'));
serverguide.filterpercent.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filterpercent;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filterpercent');
	var l_settingValueMax;
	var l_settingValue;
	var l_settingValueMin;
	var l_settingValueMinBase;
	var l_serverSettingKey;
	var l_name;
	var l_for_serverguide_filterpercent_6_2_list;
	var l_settingValueMaxBase;
	var l_gameServerSettingInfo;
	var l_settingValueDefault;
	c.push("\n<div class=\"serverguide-advanced-filter-name\">\n <h1>");
	c.push(Surface.valOut("Player settings"));
	c.push("</h1>\n</div>\n<table>\n");
	l_for_serverguide_filterpercent_6_2_list = o.filters.filters;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_filterpercent_6_2_list), 0)) {
		for (var l_for_serverguide_filterpercent_6_2_key in l_for_serverguide_filterpercent_6_2_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_filterpercent_6_2_list[l_for_serverguide_filterpercent_6_2_key])) {
				continue;
			}
			var l_filter = l_for_serverguide_filterpercent_6_2_list[l_for_serverguide_filterpercent_6_2_key];
			l_gameServerSettingInfo = l_filter;
			l_serverSettingKey = l_filter.key;
			l_settingValue = S.Modifier.get(o.serverSettings, l_filter.key, false);
			l_settingValueDefault = S.Modifier.get(l_gameServerSettingInfo, "default", 0);
			l_settingValueMinBase = S.Modifier.get(l_gameServerSettingInfo, "min", l_settingValueDefault);
			l_settingValueMaxBase = S.Modifier.get(l_gameServerSettingInfo, "max", l_settingValueDefault);
			l_settingValueMin = S.Modifier.get(l_settingValue, "min", l_settingValueMinBase);
			l_settingValueMax = S.Modifier.get(l_settingValue, "max", l_settingValueMaxBase);
			c.push("\n");
			l_name = S.Modifier.get(l_gameServerSettingInfo, "name");
			c.push(" <tr>\n <td class=\"advanced-filter-col\">\n <div class=\"popup-serveradvancedfilter-title\">");
			c.push(Surface.valOut(S.Modifier.capitalize(S.Modifier.lower(l_name))));
			c.push("</div>\n </td>\n <td>\n <div data-filter=\"");
			c.push(Surface.valOut(o.filters.type));
			c.push("\" class=\"popup-serveradvancedfilter-value\" data-key=\"");
			c.push(Surface.valOut(l_serverSettingKey));
			c.push("\" ");
			if (S.compat.eq(S.Modifier.get(l_gameServerSettingInfo, "type"), "bool")) {
				c.push("data-type=\"bool\"");
			}
			else {
				c.push("data-type=\"range\"");
			}
			c.push(" data-default=\"");
			c.push(Surface.valOut(S.Modifier.get(l_gameServerSettingInfo, "default", 0)));
			c.push("\" filter=\"settings\">\n");
			if (S.compat.eq(S.Modifier.get(l_gameServerSettingInfo, "type"), "bool")) {
				c.push(" <select name=\"");
				c.push(Surface.valOut(l_serverSettingKey));
				c.push("\" class=\"popup-serveradvancedfilter-select\">\n <option value=\"-\">Any</option>\n <option value=\"1\"");
				if ((S.compat.eq(l_settingValueMin, "1") && l_settingValue)) {
					c.push(" selected");
				}
				c.push(">On</option>\n <option value=\"0\"");
				if ((S.compat.eq(l_settingValueMin, "0") && l_settingValue)) {
					c.push(" selected");
				}
				c.push(">Off</option>\n </select>\n <input name=\"");
				c.push(Surface.valOut(l_serverSettingKey));
				c.push("\" type=\"checkbox\" ");
				if (S.compat.eq(l_settingValueMin, "1")) {
					c.push("checked");
				}
				c.push(" />\n");
			}
			else {
				c.push(" <input class=\"popup-serveradvancedfilter-input\" name=\"");
				c.push(Surface.valOut(l_filter.key));
				c.push("-min\" type=\"number\" maxlength=\"3\" min=\"");
				c.push(Surface.valOut(l_settingValueMinBase));
				c.push("\" max=\"");
				c.push(Surface.valOut(l_settingValueMaxBase));
				c.push("\" value=\"");
				c.push(Surface.valOut(l_settingValueMin));
				c.push("\" /> - <input class=\"popup-serveradvancedfilter-input\" name=\"");
				c.push(Surface.valOut(l_filter.key));
				c.push("-max\" type=\"number\" maxlength=\"3\" min=\"");
				c.push(Surface.valOut(l_settingValueMinBase));
				c.push("\" max=\"");
				c.push(Surface.valOut(l_settingValueMaxBase));
				c.push("\" value=\"");
				c.push(Surface.valOut(l_settingValueMax));
				c.push("\" />\n");
			}
			c.push(" <span style=\"color: #898989;\">");
			if (S.compat.eq(S.Modifier.get(l_gameServerSettingInfo, "unitType"), "percent")) {
				c.push("%");
			}
			else {
				c.push(Surface.valOut(S.Modifier.get(l_gameServerSettingInfo, "unitType")));
			}
			c.push("</span>\n <div class=\"base-clear\"></div>\n </div>\n </td>\n </tr>\n");
		}
	}
	c.push("</table>");
	return c.join('');
}
;
;var block_serverguide_filterplaylist = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filterplaylist'));
serverguide.filterplaylist.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filterplaylist;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filterplaylist');
	var l_for_serverguide_filterplaylist_5_10_list;
	c.push("\n<section class=\"filter split\">\n <h3>");
	c.push(Surface.valOut("Playlist"));
	c.push("</h3>\n <ul>\n");
	l_for_serverguide_filterplaylist_5_10_list = o.playlists;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_filterplaylist_5_10_list), 0)) {
		for (var l_for_serverguide_filterplaylist_5_10_key in l_for_serverguide_filterplaylist_5_10_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_filterplaylist_5_10_list[l_for_serverguide_filterplaylist_5_10_key])) {
				continue;
			}
			var l_playlist = l_for_serverguide_filterplaylist_5_10_list[l_for_serverguide_filterplaylist_5_10_key];
			c.push(" ");
			c.push(Surface.importTemplate(("serverguide" + ("." + "filteritem")), {"item": l_playlist, "collection": "playlists", "filter": o.filter}, null, kwargs));
			c.push("\n");
		}
	}
	c.push(" </ul>\n</section>");
	return c.join('');
}
;
;var block_serverguide_filterpresets = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filterpresets'));
serverguide.filterpresets.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filterpresets;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filterpresets');
	var l_for_serverguide_filterpresets_5_10_list;
	c.push("\n<section class=\"filter\">\n <h3>");
	c.push(Surface.valOut("Preset"));
	c.push("</h3>\n <ul>\n");
	l_for_serverguide_filterpresets_5_10_list = o.gamepresets;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_filterpresets_5_10_list), 0)) {
		for (var l_for_serverguide_filterpresets_5_10_key in l_for_serverguide_filterpresets_5_10_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_filterpresets_5_10_list[l_for_serverguide_filterpresets_5_10_key])) {
				continue;
			}
			var l_preset = l_for_serverguide_filterpresets_5_10_list[l_for_serverguide_filterpresets_5_10_key];
			c.push(" ");
			c.push(Surface.importTemplate(("serverguide" + ("." + "filteritem")), {"item": l_preset, "collection": "gamepresets", "filter": o.filter}, null, kwargs));
			c.push("\n");
		}
	}
	c.push(" </ul>\n</section>");
	return c.join('');
}
;
;var block_serverguide_filterregion = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filterregion'));
serverguide.filterregion.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filterregion;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filterregion');
	var l_section;
	var l_url;
	var l_filterCountrySettings;
	c.push("\n<section class=\"filter\">\n <h3>");
	c.push(Surface.valOut("Region"));
	c.push("</h3>\n");
	l_filterCountrySettings = S.Modifier.get(Surface.globalContext, "filterCountrySettings");
	c.push("\n <ul>\n <li id=\"serverguide-region-settings-checkbox\" class=\"");
	if ((S.compat.gt(S.Modifier.count(o.filter.regions), 0) || S.compat.gt(S.Modifier.count(o.filter.country), 0))) {
		c.push("on");
	}
	c.push("\">\n <input type=\"checkbox\" name=\"useLocation\" value=\"1\" id=\"useLocation-input\"");
	if (S.compat.gt(o.filter.useLocation, 0)) {
		c.push("checked");
	}
	c.push(" />\n <label for=\"useLocation-input\">");
	c.push(Surface.valOut("Regions"));
	c.push("</label>\n");
	l_section = $S.callFunction("base.section", Surface.globalContext.realm.section, b, kwargs);
	l_url = S.Modifier.urlformat("/{_section}/{_language}/servers/getServerRegions/{platform}/", Surface.urlContext, {"_section": l_section, "platform": "pc"});
	c.push(" <a id=\"serverguide-open-region-link\" data-noset=\"");
	c.push(Surface.valOut("Set region"));
	c.push("\"\n data-isset=\"");
	c.push(Surface.valOut("- Edit"));
	c.push("\" class=\"serverguide-open-filter-box\"\n data-label=\"");
	c.push(Surface.valOut("Set region"));
	c.push("\" url=\"");
	c.push(Surface.valOut(l_url));
	c.push("\">\n");
	if (S.Modifier.count(l_filterCountrySettings)) {
		c.push(" <span>");
		c.push(Surface.valOut(S.Modifier.count(l_filterCountrySettings)));
		c.push("</span> ");
		c.push(Surface.valOut("- Edit"));
		c.push("\n");
	}
	else {
		c.push(" <span></span> ");
		c.push(Surface.valOut("Set region"));
		c.push("\n");
	}
	c.push(" </a>\n </li>\n </ul>\n</section>");
	return c.join('');
}
;
;var block_serverguide_filterslots = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('filterslots'));
serverguide.filterslots.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_filterslots;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.filterslots');
	c.push("\n<div class=\"serverguide-filter serverguide-filter-slots\">\n <div class=\"serverguide-filter-name\"><h1>");
	c.push(Surface.valOut("Game size"));
	c.push("</h1></div>\n <div class=\"serverguide-filter-selectables\">\n <div class=\"serverguide-selectable ");
	if (S.compat.gt(S.Modifier.contains(o.filter.gameSize, 16), 0)) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"gameSize\" value=\"16\" iteration=\"2\">\n <div class=\"ticbox\"></div>\n <span>16}</span>\n </div>\n <div class=\"serverguide-selectable ");
	if (S.compat.gt(S.Modifier.contains(o.filter.gameSize, 24), 0)) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"gameSize\" value=\"24\" iteration=\"3\">\n <div class=\"ticbox\"></div>\n <span>24</span>\n </div>\n <div class=\"serverguide-selectable ");
	if (S.compat.gt(S.Modifier.contains(o.filter.gameSize, 32), 0)) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"gameSize\" value=\"32\" iteration=\"4\">\n <div class=\"ticbox\"></div>\n <span>32</span>\n </div>\n <div class=\"serverguide-selectable ");
	if (S.compat.gt(S.Modifier.contains(o.filter.gameSize, 48), 0)) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"gameSize\" value=\"48\" iteration=\"5\">\n <div class=\"ticbox\"></div>\n <span>48</span>\n </div>\n <div class=\"serverguide-selectable ");
	if (S.compat.gt(S.Modifier.contains(o.filter.gameSize, 64), 0)) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"gameSize\" value=\"64\" iteration=\"6\">\n <div class=\"ticbox\"></div>\n <span>64</span>\n </div>\n <div class=\"serverguide-selectable ");
	if (S.compat.gt(S.Modifier.contains(o.filter.gameSize, 0), 0)) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"gameSize\" value=\"0\" iteration=\"1\">\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("Other"));
	c.push("</span>\n </div>\n <input type=\"hidden\" name=\"gameSize\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.gameSize) != "undefined" && o.filter.gameSize !== null) ? o.filter.gameSize : []), "|")));
	c.push("\" />\n <div style=\"clear:both;\"></div>\n </div>\n <div class=\"base-clear\"></div>\n <div class=\"serverguide-filter-name\"><h1>");
	c.push(Surface.valOut("Free slots"));
	c.push("</h1></div>\n <div class=\"serverguide-filter-selectables\">\n <div class=\"serverguide-selectable ");
	if (S.compat.gt(S.Modifier.contains(o.filter.slots, 1), 0)) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"slots\" value=\"1\" iteration=\"1\">\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("1-5"));
	c.push("</span>\n </div>\n <div class=\"serverguide-selectable ");
	if (S.compat.gt(S.Modifier.contains(o.filter.slots, 2), 0)) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"slots\" value=\"2\" iteration=\"2\">\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("6-10"));
	c.push("</span>\n </div>\n <div class=\"serverguide-selectable ");
	if (S.compat.gt(S.Modifier.contains(o.filter.slots, 3), 0)) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"slots\" value=\"3\" iteration=\"3\">\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("10+"));
	c.push("</span>\n </div>\n <div class=\"serverguide-selectable ");
	if (S.compat.gt(S.Modifier.contains(o.filter.slots, 4), 0)) {
		c.push("serverguide-include");
	}
	else {
		c.push("serverguide-exclude");
	}
	c.push("\" filter=\"slots\" value=\"4\" iteration=\"4\">\n <div class=\"ticbox\"></div>\n <span>");
	c.push(Surface.valOut("Empty"));
	c.push("</span>\n </div>\n <input type=\"hidden\" name=\"slots\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.slots) != "undefined" && o.filter.slots !== null) ? o.filter.slots : []), "|")));
	c.push("\" />\n <div style=\"clear:both;\"></div>\n </div>\n</div>");
	return c.join('');
}
;
;var block_serverguide_friends = new Surface.BlockConfig('serverguide.base', {'serverguideTitle': 'serverguide.friends.block_serverguideTitle', 'serverguideContent': 'serverguide.friends.block_serverguideContent', 'titleItem': 'serverguide.friends.block_titleItem'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('friends'));
serverguide.friends.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_friends;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.friends');
	c.push("\n");
	o.serverguideTab = "friends";
	c.push("\n");
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('serverguide.base', o, b, kwargs);
}
;
serverguide.friends.block_titleItem = new Surface.Block('serverguide.friends.block_titleItem');
serverguide.friends.block_titleItem.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("Friends Playing - ");
	return c.join("");
}
;
serverguide.friends.block_serverguideTitle = new Surface.Block('serverguide.friends.block_serverguideTitle');
serverguide.friends.block_serverguideTitle.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("Friends Playing");
	return c.join("");
}
;
serverguide.friends.block_serverguideContent = new Surface.Block('serverguide.friends.block_serverguideContent');
serverguide.friends.block_serverguideContent.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	if (S.compat.gt(S.Modifier.count(o.servers), 0)) {
		c.push(" <div style=\"float: left; width:656px;\">\n ");
		c.push(Surface.importTemplate(("serverguide" + ("." + "serverlist2")), {"servers": o.servers}, null, kwargs));
		c.push("\n </div>\n ");
		c.push(Surface.importTemplate(("serverguide" + ("." + "bf3serverinfo")), o, null, kwargs));
		c.push("\n");
	}
	else {
		c.push(" <div id=\"serverguide-noservers\">\n <h1>");
		c.push(Surface.valOut("Sorry, found no servers with friends"));
		c.push("</h1>\n <p>");
		c.push(Surface.valOut("None of your friends are playing on PC right now"));
		c.push("</p>\n </div>\n");
	}
	return c.join("");
}
;
;var block_serverguide_functions = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('functions'));
serverguide.functions.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_functions;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.functions');
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	return c.join('');
}
;
serverguide.function_showAbsoluteServerUrlByServer = function(l_server, b, kwargs) {
	var o = {};
	var c = [];
	var l_url;
	var l_host;
	if (S.compat.eq(Surface.globalContext.staticContext.sslStrategy, "all")) {
		l_host = Surface.globalContext.staticContext.currentHostSecure;
	}
	else {
		l_host = Surface.globalContext.staticContext.currentHost;
	}
	l_url = S.Modifier.concat(l_host, $S.callFunction("common.showServerUrlByServer", l_server, b, kwargs));
	return l_url;
}
;
serverguide.function_showAbsoluteServerUrl = function(l_guid, l_name, b, kwargs) {
	var o = {};
	var c = [];
	var l_url;
	var l_host;
	if (S.compat.eq(Surface.globalContext.staticContext.sslStrategy, "all")) {
		l_host = Surface.globalContext.staticContext.currentHostSecure;
	}
	else {
		l_host = Surface.globalContext.staticContext.currentHost;
	}
	l_url = S.Modifier.concat(l_host, S.Modifier.urlformat("/{_section}/{_language}/servers/show/{platform}/{guid}/{slug}/", Surface.urlContext, {"guid": l_guid, "slug": S.Modifier.slugify(l_name)}));
	return l_url;
}
;
serverguide.function_gameServerPresetStringLocalized = function(l_gameServerPreset, b, kwargs) {
	var o = {};
	var c = [];
	if (S.compat.eq(l_gameServerPreset, 1)) {
		return "Normal";
	}
	else if (S.compat.eq(l_gameServerPreset, 2)) {
		return "Hardcore";
	}
	else if (S.compat.eq(l_gameServerPreset, 4)) {
		return "Infantry Only";
	}
	else if (S.compat.eq(l_gameServerPreset, 8)) {
		return "Custom";
	}
	else if (S.compat.eq(l_gameServerPreset, 16)) {
		return "Immersive";
	}
	return "--";
}
;
serverguide.function_gameServerPresetStringNoLocalization = function(l_gameServerPreset, b, kwargs) {
	var o = {};
	var c = [];
	var l_name;
	l_name = "unknown";
	if (S.compat.eq(l_gameServerPreset, 1)) {
		l_name = "normal";
	}
	else if (S.compat.eq(l_gameServerPreset, 2)) {
		l_name = "hardcore";
	}
	else if (S.compat.eq(l_gameServerPreset, 4)) {
		l_name = "infantry";
	}
	else if (S.compat.eq(l_gameServerPreset, 8)) {
		l_name = "custom";
	}
	return l_name;
}
;
serverguide.function_getServerRegionLocalized = function(l_serverRegion, b, kwargs) {
	var o = {};
	var c = [];
	var l_regionLocalized;
	l_regionLocalized = "Unknown";
	if (S.compat.eq(l_serverRegion, 1)) {
		l_regionLocalized = "North America";
	}
	else if (S.compat.eq(l_serverRegion, 2)) {
		l_regionLocalized = "South America";
	}
	else if (S.compat.eq(l_serverRegion, 4)) {
		l_regionLocalized = "Antarctica";
	}
	else if (S.compat.eq(l_serverRegion, 8)) {
		l_regionLocalized = "Africa";
	}
	else if (S.compat.eq(l_serverRegion, 16)) {
		l_regionLocalized = "Europe";
	}
	else if (S.compat.eq(l_serverRegion, 32)) {
		l_regionLocalized = "Asia";
	}
	else if (S.compat.eq(l_serverRegion, 64)) {
		l_regionLocalized = "Oceania";
	}
	return l_regionLocalized;
}
;
serverguide.function_gameServerModeStringLocalizedLegacy = function(l_gameMode, b, kwargs) {
	var o = {};
	var c = [];
	var l_localized;
	var l_gameModeStrings;
	l_gameModeStrings = {1: "Conquest", 1024: "Domination", 1048576: "Hotspot", 128: "Conquest Assault Large", 131072: "Tank Superiority", 16: "Onslaught", 16384: "Sector Control", 2: "Rush", 2048: "Team DM Close Quarters", 2097152: "Obliteration", 256: "Conquest Assault", 262144: "Objective Raid", 32: "Team Deathmatch", 32768: "Fire Team Survivor", 4: "Squad Rush", 4096: "Team DM Fireteam", 4194304: "Scavenger", 512: "Gun Master", 524288: "Capture the Flag", 64: "Conquest Large", 65536: "Home Run", 8: "Squad Deathmatch", 8192: "Combat Mission", 8388608: "Air Superiority"};
	l_localized = S.Modifier.get(l_gameModeStrings, l_gameMode);
	if (l_localized) {
		return l_localized;
	}
	return "Unknown";
}
;
serverguide.function_gameServerModeStringLocalized = function(l_gameMode, l_game, b, kwargs) {
	var o = {};
	var c = [];
	var l_gameModeTypeString;
	var l_gameModeLookup;
	if (((S.compat.eq(l_game, null) || S.compat.eq(l_game, 2)) || S.compat.eq(l_game, 4096))) {
		return $S.callFunction("serverguide.gameServerModeStringLocalizedLegacy", l_gameMode, b, kwargs);
	}
	l_gameModeLookup = S.Modifier.get($S.callFunction("gamedata.get", l_game, "gameserver", b, kwargs), "serverGamemodeLookup");
	l_gameModeTypeString = S.Modifier.get(l_gameModeLookup, l_gameMode);
	return l_gameModeTypeString ? (S.translations[l_gameModeTypeString] || l_gameModeTypeString) : $S.callFunction("serverguide.gameServerModeStringLocalizedLegacy", l_gameMode, b, kwargs);
}
;
serverguide.function_playlistStringLocalized = function(l_playlist, b, kwargs) {
	var o = {};
	var c = [];
	var l_playlistLocalized;
	l_playlistLocalized = S.Modifier.concat("ID_WEB_SERVERGUIDE_PLAYLIST_", l_playlist);
	return (S.translations[l_playlistLocalized] || l_playlistLocalized);
}
;
serverguide.function_gameServerExperienceString = function(l_game, l_gameServerExperience, b, kwargs) {
	var o = {};
	var c = [];
	var l_gameServerExperienceString;
	var l_experienceLookup;
	l_experienceLookup = S.Modifier.get($S.callFunction("gamedata.get", l_game, "gameserver", b, kwargs), "experienceLookup");
	l_gameServerExperienceString = S.Modifier.get(S.Modifier.get(l_experienceLookup, l_gameServerExperience), "name");
	return (S.translations[l_gameServerExperienceString] || l_gameServerExperienceString);
}
;
serverguide.function_enableJoinButton = function(l_gameServer, b, kwargs) {
	var o = {};
	var c = [];
	var l_experienceName;
	l_experienceName = "";
	if (((typeof(l_gameServer) != "undefined" && l_gameServer !== null && typeof(l_gameServer.experience) != "undefined" && l_gameServer.experience !== null) ? l_gameServer.experience : false)) {
		l_experienceName = $S.callFunction("serverguide.gameServerExperienceString", l_gameServer.game, l_gameServer.experience, b, kwargs);
	}
	if (!((typeof(Surface) != "undefined" && Surface !== null && typeof(Surface.globalContext) != "undefined" && Surface.globalContext !== null && typeof(Surface.globalContext.session) != "undefined" && Surface.globalContext.session !== null && typeof(Surface.globalContext.session.user) != "undefined" && Surface.globalContext.session.user !== null && typeof(Surface.globalContext.session.user.presence) != "undefined" && Surface.globalContext.session.user.presence !== null))) {
		return false;
	}
	else if (S.compat.eq(S.Modifier.upper(l_experienceName), "CONQUEST_LADDER")) {
		return false;
	}
	return $S.callFunction("serverguide.presenceJoinButton", l_gameServer, Surface.globalContext.session.user.presence, b, kwargs);
}
;
serverguide.function_enableSpectateButton = function(l_gameServer, b, kwargs) {
	var o = {};
	var c = [];
	if (!((typeof(Surface) != "undefined" && Surface !== null && typeof(Surface.globalContext) != "undefined" && Surface.globalContext !== null && typeof(Surface.globalContext.session) != "undefined" && Surface.globalContext.session !== null && typeof(Surface.globalContext.session.user) != "undefined" && Surface.globalContext.session.user !== null && typeof(Surface.globalContext.session.user.presence) != "undefined" && Surface.globalContext.session.user.presence !== null))) {
		return false;
	}
	return $S.callFunction("serverguide.presenceJoinButton", l_gameServer, Surface.globalContext.session.user.presence, b, kwargs);
}
;
serverguide.function_presenceJoinButton = function(l_gameServer, l_userPresence, b, kwargs) {
	var o = {};
	var c = [];
	if (!((typeof(Surface) != "undefined" && Surface !== null && typeof(Surface.globalContext) != "undefined" && Surface.globalContext !== null && typeof(Surface.globalContext.session) != "undefined" && Surface.globalContext.session !== null && typeof(Surface.globalContext.session.user) != "undefined" && Surface.globalContext.session.user !== null && typeof(Surface.globalContext.session.user.presence) != "undefined" && Surface.globalContext.session.user.presence !== null))) {
		return false;
	}
	return $S.callFunction("serverguide.presenceSoldierJoinButton", l_gameServer, Surface.globalContext.session.user.presence, Surface.globalContext.staticContext.activePersona, b, kwargs);
}
;
serverguide.function_presenceSoldierJoinButton = function(l_gameServer, l_userPresence, l_activeSoldier, b, kwargs) {
	var o = {};
	var c = [];
	var l_isMobile;
	var l_activeSoldier;
	var l_userPresence;
	var l_isPCOnly;
	if (((typeof(Surface) != "undefined" && Surface !== null && typeof(Surface.globalContext) != "undefined" && Surface.globalContext !== null && typeof(Surface.globalContext.session) != "undefined" && Surface.globalContext.session !== null && typeof(Surface.globalContext.session.temporaryDisableJoin) != "undefined" && Surface.globalContext.session.temporaryDisableJoin !== null) ? Surface.globalContext.session.temporaryDisableJoin : false)) {
		return true;
	}
	l_isMobile = Surface.globalContext.staticContext.detectedBrowser.isTouchDevice;
	l_userPresence = ((typeof(l_userPresence) != "undefined" && l_userPresence !== null) ? l_userPresence : ((typeof(Surface) != "undefined" && Surface !== null && typeof(Surface.globalContext) != "undefined" && Surface.globalContext !== null && typeof(Surface.globalContext.session) != "undefined" && Surface.globalContext.session !== null && typeof(Surface.globalContext.session.user) != "undefined" && Surface.globalContext.session.user !== null && typeof(Surface.globalContext.session.user.presence) != "undefined" && Surface.globalContext.session.user.presence !== null) ? Surface.globalContext.session.user.presence : null));
	l_activeSoldier = ((typeof(l_activeSoldier) != "undefined" && l_activeSoldier !== null) ? l_activeSoldier : Surface.globalContext.staticContext.activePersona);
	if (!(l_activeSoldier)) {
		return false;
	}
	l_isPCOnly = ((S.compat.eq(l_gameServer.game, 8192) || S.compat.eq(l_gameServer.game, 2)) || S.compat.eq(l_gameServer.game, 4096));
	if (((S.compat.neq(l_gameServer.platform, 1) && l_isPCOnly) && S.compat.neq(l_activeSoldier.platform, 1))) {
		return false;
	}
	else if (((S.compat.eq(l_gameServer.platform, 1) && !(l_isMobile)) && S.compat.eq(l_activeSoldier.platform, 1))) {
		return true;
	}
	if ($S.callFunction("comcenter.isOnlineGame", l_userPresence, b, kwargs)) {
		if (((S.compat.eq(l_userPresence.onlineGame.game, l_gameServer.game) && S.compat.eq(l_userPresence.onlineGame.platform, l_gameServer.platform)) && S.compat.eq(l_activeSoldier.platform, l_userPresence.onlineGame.platform))) {
			return true;
		}
	}
	return false;
}
;
serverguide.function_getServerSlots = function(l_server, l_slotType, b, kwargs) {
	var o = {};
	var c = [];
	var l_slotCurrent;
	var l_slots;
	var l_slotMax;
	l_slotCurrent = 0;
	l_slotMax = 0;
	if ((typeof(l_server) != "undefined" && l_server !== null && typeof(l_server.slots) != "undefined" && l_server.slots !== null)) {
		l_slots = S.Modifier.get(l_server.slots, l_slotType);
		if ((typeof(l_slots) != "undefined" && l_slots !== null)) {
			l_slotCurrent = l_slots.current;
			l_slotMax = l_slots.max;
		}
	}
	return {"current": l_slotCurrent, "max": l_slotMax};
}
;
serverguide.function_hasServerSlotType = function(l_server, l_slotType, b, kwargs) {
	var o = {};
	var c = [];
	var l_slots;
	if (!((typeof(l_server) != "undefined" && l_server !== null && typeof(l_server.slots) != "undefined" && l_server.slots !== null))) {
		return false;
	}
	l_slots = S.Modifier.get(l_server.slots, l_slotType);
	if ((typeof(l_slots) != "undefined" && l_slots !== null)) {
		return S.compat.neq(l_slots.max, 0);
	}
	else {
		return false;
	}
}
;
serverguide.function_showJoinButton = function(l_gameServer, b, kwargs) {
	var o = {};
	var c = [];
	if (S.compat.eq(((typeof(Surface) != "undefined" && Surface !== null && typeof(Surface.globalContext) != "undefined" && Surface.globalContext !== null && typeof(Surface.globalContext.staticContext) != "undefined" && Surface.globalContext.staticContext !== null && typeof(Surface.globalContext.staticContext.activePersona) != "undefined" && Surface.globalContext.staticContext.activePersona !== null && typeof(Surface.globalContext.staticContext.activePersona.platform) != "undefined" && Surface.globalContext.staticContext.activePersona.platform !== null) ? Surface.globalContext.staticContext.activePersona.platform : null), l_gameServer.platform)) {
		if ((S.compat.eq(((typeof(l_gameServer) != "undefined" && l_gameServer !== null && typeof(l_gameServer.game) != "undefined" && l_gameServer.game !== null) ? l_gameServer.game : 0), 8192) && S.compat.neq(l_gameServer.platform, 1))) {
			return false;
		}
		return true;
	}
	return false;
}
;
serverguide.function_remoteJoinEnabled = function(b, kwargs) {
	var o = {};
	var c = [];
	if (((Surface.globalContext.staticContext.activePersona && S.compat.eq(Surface.globalContext.staticContext.activePersona.game, 8192)) && S.compat.neq(Surface.globalContext.staticContext.activePersona.platform, 1))) {
		return false;
	}
	return true;
}
;
serverguide.function_liveScoreboardEnabled = function(l_game, l_platform, b, kwargs) {
	var o = {};
	var c = [];
	if (Surface.globalContext.staticContext.detectedBrowser.isTouchDevice) {
		return false;
	}
	if (((typeof(Surface) != "undefined" && Surface !== null && typeof(Surface.globalContext) != "undefined" && Surface.globalContext !== null && typeof(Surface.globalContext.staticContext) != "undefined" && Surface.globalContext.staticContext !== null && typeof(Surface.globalContext.staticContext.liveScoreboardEnabled) != "undefined" && Surface.globalContext.staticContext.liveScoreboardEnabled !== null) && S.Modifier.get(S.Modifier.get(Surface.globalContext.staticContext.liveScoreboardEnabled, l_game, {}), l_platform, false))) {
		return true;
	}
	return false;
}
;
;var block_serverguide_gunmasterprogress = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('gunmasterprogress'));
serverguide.gunmasterprogress.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_gunmasterprogress;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.gunmasterprogress');
	var l_for_serverguide_gunmasterprogress_5_2_list;
	var l_for_serverguide_gunmasterprogress_15_14_list;
	var l_me;
	var l_for_serverguide_gunmasterprogress_23_46_list;
	var l_maxLevel;
	c.push("\n");
	l_maxLevel = 0;
	l_for_serverguide_gunmasterprogress_5_2_list = S.Modifier.to(1, 17);
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_gunmasterprogress_5_2_list), 0)) {
		for (var l_for_serverguide_gunmasterprogress_5_2_key in l_for_serverguide_gunmasterprogress_5_2_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_gunmasterprogress_5_2_list[l_for_serverguide_gunmasterprogress_5_2_key])) {
				continue;
			}
			var l_level = l_for_serverguide_gunmasterprogress_5_2_list[l_for_serverguide_gunmasterprogress_5_2_key];
			if (S.compat.gt(S.Modifier.count(S.Modifier.get(o.level_progress, l_level, [])), 0)) {
				l_maxLevel = l_level;
			}
		}
	}
	c.push("\n<div id=\"gunmaster-progress-container\">\n <h3>");
	c.push(Surface.valOut("GUN MASTER PROGRESS"));
	c.push("</h3>\n <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"gm-progress\">\n <tr>\n");
	l_for_serverguide_gunmasterprogress_15_14_list = S.Modifier.to(0, l_maxLevel);
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_gunmasterprogress_15_14_list), 0)) {
		for (var l_for_serverguide_gunmasterprogress_15_14_key in l_for_serverguide_gunmasterprogress_15_14_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_gunmasterprogress_15_14_list[l_for_serverguide_gunmasterprogress_15_14_key])) {
				continue;
			}
			var l_level = l_for_serverguide_gunmasterprogress_15_14_list[l_for_serverguide_gunmasterprogress_15_14_key];
			c.push(" <td class=\"gunmaster-level-arrow\">\n <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"playerWpr\">\n <tr>\n <td valign=\"middle\" class=\"gunmaster-player-wpr\">\n <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"players");
			if (S.compat.eq(S.Modifier.count(S.Modifier.get(o.level_progress, l_level)), 4)) {
				c.push(" fourWide");
			}
			c.push("\">\n <tr>\n <td class=\"gunmaster-players\">\n");
			l_for_serverguide_gunmasterprogress_23_46_list = S.Modifier.get(o.level_progress, l_level);
			if (S.compat.gt(S.Modifier.count(l_for_serverguide_gunmasterprogress_23_46_list), 0)) {
				for (var l_for_serverguide_gunmasterprogress_23_46_key in l_for_serverguide_gunmasterprogress_23_46_list) {
					if (!Surface.isValidLoopItem(l_for_serverguide_gunmasterprogress_23_46_list[l_for_serverguide_gunmasterprogress_23_46_key])) {
						continue;
					}
					var l_player = l_for_serverguide_gunmasterprogress_23_46_list[l_for_serverguide_gunmasterprogress_23_46_key];
					l_me = S.compat.eq(((typeof(Surface) != "undefined" && Surface !== null && typeof(Surface.globalContext) != "undefined" && Surface.globalContext !== null && typeof(Surface.globalContext.session) != "undefined" && Surface.globalContext.session !== null && typeof(Surface.globalContext.session.user) != "undefined" && Surface.globalContext.session.user !== null && typeof(Surface.globalContext.session.user.userId) != "undefined" && Surface.globalContext.session.user.userId !== null) ? Surface.globalContext.session.user.userId : null), S.Modifier.get(l_player.user, "userId", false));
					c.push(" <div class=\"gunmaster-player-info");
					if (l_me) {
						c.push(" myself");
					}
					c.push("\" data-personaid=\"");
					c.push(Surface.valOut(l_player.personaId));
					c.push("\" data-tooltip=\"");
					c.push(Surface.valOut(l_player.personaName));
					c.push("\">");
					c.push(Surface.valOut(l_player.personaName));
					c.push("</div>\n");
				}
			}
			c.push(" </td>\n </tr>\n </table>\n </td>\n </tr>\n </table>\n </td>\n");
		}
	}
	c.push(" </tr>\n </table>\n</div>");
	return c.join('');
}
;
;var block_serverguide_history = new Surface.BlockConfig('serverguide.base', {'serverguideTitle': 'serverguide.history.block_serverguideTitle', 'serverguideContent': 'serverguide.history.block_serverguideContent', 'titleItem': 'serverguide.history.block_titleItem'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('history'));
serverguide.history.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_history;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.history');
	c.push("\n");
	o.serverguideTab = "history";
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('serverguide.base', o, b, kwargs);
}
;
var block_serverguide_history_use_9_9 = new Surface.BlockConfig('common.boxwideclean', {'content': 'serverguide.history._use_9_9_block_content', 'extraClassInner': 'serverguide.history._use_9_9_block_extraClassInner', 'titleContainer': 'serverguide.history._use_9_9_block_titleContainer', 'extraClass': 'serverguide.history._use_9_9_block_extraClass'});
serverguide.history.block_titleItem = new Surface.Block('serverguide.history.block_titleItem');
serverguide.history.block_titleItem.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(Surface.valOut("History"));
	c.push(" - ");
	return c.join("");
}
;
serverguide.history.block_serverguideTitle = new Surface.Block('serverguide.history.block_serverguideTitle');
serverguide.history.block_serverguideTitle.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(Surface.valOut("History"));
	return c.join("");
}
;
serverguide.history._use_9_9_block_extraClass = new Surface.Block('serverguide.history._use_9_9_block_extraClass');
serverguide.history._use_9_9_block_extraClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverguide-list serverguide-favorites-list");
	return c.join("");
}
;
serverguide.history._use_9_9_block_extraClassInner = new Surface.Block('serverguide.history._use_9_9_block_extraClassInner');
serverguide.history._use_9_9_block_extraClassInner.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("common-box-nopadding");
	return c.join("");
}
;
serverguide.history._use_9_9_block_titleContainer = new Surface.Block('serverguide.history._use_9_9_block_titleContainer');
serverguide.history._use_9_9_block_titleContainer.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	return c.join("");
}
;
serverguide.history._use_9_9_block_content = new Surface.Block('serverguide.history._use_9_9_block_content');
serverguide.history._use_9_9_block_content.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "serverlist2")), o, null, kwargs));
	c.push("\n");
	return c.join("");
}
;
serverguide.history.block_serverguideContent = new Surface.Block('serverguide.history.block_serverguideContent');
serverguide.history.block_serverguideContent.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	if (S.compat.gt(S.Modifier.count(o.servers), 0)) {
		c.push(" <div style=\"float: left; width:656px;\">\n");
		c.push(Surface.importTemplate(("common" + ("." + "boxwideclean")), o, block_serverguide_history_use_9_9, kwargs));
		c.push(" </div>\n ");
		c.push(Surface.importTemplate(("serverguide" + ("." + "bf3serverinfo")), o, null, kwargs));
		c.push("\n");
	}
	else {
		c.push(" <div id=\"serverguide-noservers\">\n <h1>");
		c.push(Surface.valOut("Sorry, found no servers"));
		c.push("</h1>\n <p>");
		c.push(Surface.valOut("Your server history is empty"));
		c.push("</p>\n </div>\n");
	}
	return c.join("");
}
;
;var block_serverguide_index = new Surface.BlockConfig('serverguide.base', {'serverSettings': 'serverguide.index.block_serverSettings', 'serverguideTitle': 'serverguide.index.block_serverguideTitle', 'serverguideContent': 'serverguide.index.block_serverguideContent'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('index'));
serverguide.index.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_index;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.index');
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('serverguide.base', o, b, kwargs);
}
;
var block_serverguide_index_use_17_10 = new Surface.BlockConfig('common.boxwideclean', {'content': 'serverguide.index._use_17_10_block_content', 'extraClassInner': 'serverguide.index._use_17_10_block_extraClassInner', 'titleContainer': 'serverguide.index._use_17_10_block_titleContainer', 'extraClass': 'serverguide.index._use_17_10_block_extraClass'});
serverguide.index.block_serverguideTitle = new Surface.Block('serverguide.index.block_serverguideTitle');
serverguide.index.block_serverguideTitle.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(Surface.valOut("Multiplayer"));
	return c.join("");
}
;
serverguide.index._use_17_10_block_extraClass = new Surface.Block('serverguide.index._use_17_10_block_extraClass');
serverguide.index._use_17_10_block_extraClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverguide-list");
	return c.join("");
}
;
serverguide.index._use_17_10_block_extraClassInner = new Surface.Block('serverguide.index._use_17_10_block_extraClassInner');
serverguide.index._use_17_10_block_extraClassInner.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("common-box-nopadding");
	return c.join("");
}
;
serverguide.index._use_17_10_block_titleContainer = new Surface.Block('serverguide.index._use_17_10_block_titleContainer');
serverguide.index._use_17_10_block_titleContainer.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	return c.join("");
}
;
serverguide.index._use_17_10_block_content = new Surface.Block('serverguide.index._use_17_10_block_content');
serverguide.index._use_17_10_block_content.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "serverlist2")), {"servers": o.servers}, null, kwargs));
	c.push("\n <div style=\"clear:both;\"></div>\n ");
	return c.join("");
}
;
serverguide.index.block_serverSettings = new Surface.Block('serverguide.index.block_serverSettings');
serverguide.index.block_serverSettings.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	return c.join("");
}
;
serverguide.index.block_serverguideContent = new Surface.Block('serverguide.index.block_serverguideContent');
serverguide.index.block_serverguideContent.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	Surface.globalContext.hideFooter = 1;
	c.push("\n <div id=\"serverguide-loading-list-indicator\"><div class=\"common-spinner\" data-size=\"big\"></div></div>\n");
	if (S.compat.gt(S.Modifier.count(o.servers), 0)) {
		c.push("\n <div id=\"serverguide-autobrowse-on\"></div>\n <div id=\"serverguide-loading-list-indicator\"><div class=\"common-spinner\" data-size=\"big\"></div></div>\n <div id=\"serverguide-list-outer-wrapper\">\n");
		c.push(Surface.importTemplate(("common" + ("." + "boxwideclean")), o, block_serverguide_index_use_17_10, kwargs));
		c.push("\n");
		c.push(b.get('serverSettings')(o, b, kwargs));
		c.push(" <div class=\"base-clear\"></div>\n </div>\n");
	}
	else {
		c.push(" <div id=\"serverguide-noservers\">\n <h1>");
		c.push(Surface.valOut("Sorry, found no servers"));
		c.push("</h1>\n <p>");
		c.push(Surface.valOut("Change your filter and try again"));
		c.push("</p>\n </div>\n");
	}
	c.push("\n");
	return c.join("");
}
;
;var block_serverguide_joinfriendform = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('joinfriendform'));
serverguide.joinfriendform.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_joinfriendform;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.joinfriendform');
	var l_buttonValue;
	var l_joinBtnClass;
	var l_realm;
	var l_btnClass;
	var l_classes;
	c.push("\n");
	l_realm = S.Modifier.get(Surface.globalContext, "realm");
	c.push("\n");
	if (($S.callFunction("comcenter.isPlayingMp", o.presence, b, kwargs) && $S.callFunction("serverguide.showJoinButton", o.presence.playingMp, b, kwargs))) {
		if ((typeof(o) != "undefined" && o !== null && typeof(o.label) != "undefined" && o.label !== null)) {
			l_buttonValue = o.label;
		}
		else {
			l_buttonValue = "Join";
		}
		l_btnClass = "";
		l_joinBtnClass = "";
		if (S.compat.eq(l_realm.game, 2048)) {
			l_btnClass = "btn btn-tiny btn-primary ";
		}
		else if (S.compat.eq(l_realm.game, 8192)) {
			l_btnClass = "btn btn-tiny btn-primary ";
			l_joinBtnClass = "btn-primary ";
		}
		else {
			l_joinBtnClass = "btn-primary ";
		}
		c.push("\n");
		l_classes = "";
		if (((typeof(o) != "undefined" && o !== null && typeof(o.friendJoinButton) != "undefined" && o.friendJoinButton !== null) ? o.friendJoinButton : false)) {
			l_classes = S.compat.add(l_joinBtnClass, " btn btn-small join-friend-submit-link join-friend join-friendcomcenter-interact-playing");
			l_buttonValue = "<i class=\"icon-join-friend\"></i>";
		}
		else if (((typeof(o) != "undefined" && o !== null && typeof(o.textButton) != "undefined" && o.textButton !== null) ? o.textButton : false)) {
			l_classes = "join-friend-submit-link";
		}
		else if (((typeof(o) != "undefined" && o !== null && typeof(o.profileButton) != "undefined" && o.profileButton !== null) ? o.profileButton : false)) {
			l_classes = "base-button-arrow-large";
		}
		else if (((typeof(o) != "undefined" && o !== null && typeof(o.buttonSecondaryLarge) != "undefined" && o.buttonSecondaryLarge !== null) ? o.buttonSecondaryLarge : false)) {
			l_classes = "btn btn-secondary btn-large";
		}
		else {
			l_classes = S.compat.add("base-button-arrow-tiny ", l_btnClass);
		}
		c.push("\n");
		if ((typeof(S.Modifier.get(o.presence.playingMp, "serverGuid")) != "undefined" && S.Modifier.get(o.presence.playingMp, "serverGuid") !== null)) {
			l_classes = S.compat.add(S.compat.add(l_classes, " "), ((typeof(o) != "undefined" && o !== null && typeof(o.extraClass) != "undefined" && o.extraClass !== null) ? o.extraClass : ""));
			c.push(" <button\n class=\"join-friend-generic-button ");
			c.push(Surface.valOut(l_classes));
			c.push(" ");
			if (!($S.callFunction("comcenter.isFriendJoinable", o.presence, b, kwargs))) {
				c.push(" disabled");
			}
			c.push("\"\n data-bind-action=\"join-mp-gameserver\"\n data-role=\"");
			c.push(Surface.valOut(1));
			c.push("\"\n data-guid=\"");
			c.push(Surface.valOut(S.Modifier.get(o.presence.playingMp, "serverGuid")));
			c.push("\"\n data-game=\"");
			c.push(Surface.valOut(o.presence.playingMp.game));
			c.push("\"\n data-platform=\"");
			c.push(Surface.valOut(o.presence.playingMp.platform));
			c.push("\"\n data-friendPersonaId=\"");
			c.push(Surface.valOut(o.friendPersonaId));
			c.push("\"\n data-telemetry-action=\"");
			c.push(Surface.valOut(((typeof(o) != "undefined" && o !== null && typeof(o.telemetryAction) != "undefined" && o.telemetryAction !== null) ? o.telemetryAction : "")));
			c.push("\"\n data-track=\"friend.playing.server.join\">\n ");
			c.push(l_buttonValue);
			c.push("\n </button>\n");
		}
	}
	return c.join('');
}
;
;var block_serverguide_maprotation = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('maprotation'));
serverguide.maprotation.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_maprotation;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.maprotation');
	var l_mapName;
	var l_mapsOnServer;
	var l_mapBubbleInfo;
	var l_for_serverguide_maprotation_14_22_list;
	var l_mapInfo;
	c.push("\n<div id=\"server-info-maprotation-container\" class=\"base-box-push\">\n <div class=\"base-box-push-inner\">\n <div id=\"server-info-maprotation-slider-wrapper\">\n <div class=\"server-info-maprotation-title\">\n ");
	c.push(Surface.valOut("Map rotation"));
	c.push("\n </div>\n <div id=\"maprotation-nav-left\" class=\"maprotation-nav sodaSlider-arrow-left\"></div>\n <div id=\"maprotation-nav-right\" class=\"maprotation-nav sodaSlider-arrow-right\"></div>\n <table id=\"maprotation\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"sodaSlider-slider\">\n <tr>\n");
	l_mapsOnServer = S.Modifier.get(o.server.maps, "maps", []);
	l_for_serverguide_maprotation_14_22_list = l_mapsOnServer;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_maprotation_14_22_list), 0)) {
		for (var l_for_serverguide_maprotation_14_22_key in l_for_serverguide_maprotation_14_22_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_maprotation_14_22_list[l_for_serverguide_maprotation_14_22_key])) {
				continue;
			}
			var l_mapRotation = l_for_serverguide_maprotation_14_22_list[l_for_serverguide_maprotation_14_22_key];
			l_mapInfo = $S.callFunction("common.mapinfo", o.server.game, l_mapRotation.map, b, kwargs);
			l_mapName = S.Modifier.get(l_mapInfo, "name");
			l_mapBubbleInfo = (S.translations[l_mapName] || l_mapName);
			if (S.compat.gt(((typeof(l_mapRotation) != "undefined" && l_mapRotation !== null && typeof(l_mapRotation.mapVariant) != "undefined" && l_mapRotation.mapVariant !== null) ? l_mapRotation.mapVariant : 0), 0)) {
				l_mapBubbleInfo = S.Modifier.concat(S.Modifier.concat(l_mapBubbleInfo, " #"), S.compat.add(l_mapRotation.mapVariant, 1));
			}
			c.push(" <td align=\"center\" class=\"");
			if (S.compat.eq(o.server.map, l_mapRotation.map)) {
				c.push("currentMap");
			}
			c.push("\"><div class=\"maprotation-map-image-wpr\"><img src=\"");
			c.push(Surface.valOut($S.callFunction("base.asset", S.Modifier.get(l_mapInfo, "imageBig"), b, kwargs)));
			c.push("\" alt=\"");
			c.push(Surface.valOut(l_mapBubbleInfo));
			c.push("\" data-tooltip=\"");
			c.push(Surface.valOut(l_mapBubbleInfo));
			c.push("<br>");
			c.push(Surface.valOut($S.callFunction("serverguide.gameServerModeStringLocalized", l_mapRotation.mapMode, o.server.game, b, kwargs)));
			c.push("\" /></div></td>\n");
		}
	}
	else {
		c.push(" ");
		c.push(Surface.valOut("No maps in map rotation"));
		c.push("\n");
	}
	c.push(" </tr>\n </table>\n </div>\n </div>\n</div>");
	return c.join('');
}
;
;var block_serverguide_mohwfilters = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('mohwfilters'));
serverguide.mohwfilters.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_mohwfilters;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.mohwfilters');
	var l_forceExpandedFilter;
	c.push("\n");
	l_forceExpandedFilter = S.Modifier.get(Surface.globalContext, "forceExpandedFilter");
	c.push("\n");
	if ((S.compat.gt(S.Modifier.count(o.servers), 0) && S.compat.neq(l_forceExpandedFilter, 1))) {
		o.showFilters = 0;
	}
	else {
		o.showFilters = 1;
	}
	c.push("<input type=\"hidden\" id=\"serverguide-autobrowse-url\" value=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/getAutoBrowseServers/{platform}/", Surface.urlContext)));
	c.push("\" />\n<input type=\"hidden\" id=\"serverguide-show-url\"\n value=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/show/{platform}/{guid}/{slug}/", Surface.urlContext, {"guid": "%GUID%", "platform": "pc"})));
	c.push("?json=1\" />\n<form id=\"serverguide-filter-form\" ");
	if (!(o.showFilters)) {
		c.push("class=\"serverguide-filter-form-contracted\"");
	}
	c.push(" method=\"GET\" action=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/{platform}/", Surface.urlContext)));
	c.push("\">\n");
	c.push(Surface.importTemplate(("base" + ("." + "postChecksum")), o, null, kwargs));
	c.push("\n<input type=\"hidden\" name=\"filtered\" value=\"1\" />\n<input type=\"hidden\" name=\"expand\" value=\"");
	c.push(Surface.valOut(o.showFilters));
	c.push("\" />\n");
	c.push(Surface.importTemplate(("common" + ("." + "focusbar")), o, block_serverguide_mohwfilters_use_20_6, kwargs));
	c.push("\n</form>");
	return c.join('');
}
;
var block_serverguide_mohwfilters_use_20_6 = new Surface.BlockConfig('common.focusbar', {'content': 'serverguide.mohwfilters._use_20_6_block_content', 'extraInnerClass': 'serverguide.mohwfilters._use_20_6_block_extraInnerClass', 'extraClass': 'serverguide.mohwfilters._use_20_6_block_extraClass'});
serverguide.mohwfilters._use_20_6_block_extraClass = new Surface.Block('serverguide.mohwfilters._use_20_6_block_extraClass');
serverguide.mohwfilters._use_20_6_block_extraClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverguide-filter-width");
	return c.join("");
}
;
serverguide.mohwfilters._use_20_6_block_extraInnerClass = new Surface.Block('serverguide.mohwfilters._use_20_6_block_extraInnerClass');
serverguide.mohwfilters._use_20_6_block_extraInnerClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverguide-filter-inner");
	return c.join("");
}
;
serverguide.mohwfilters.surface_32_18 = new Surface.SingleSurface("serverguide.mohwfilters.surface_32_18");
serverguide.mohwfilters.surface_32_18.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_mohwfilters;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.mohwfilters');
	c.push("<surf:container id=\"serverguide-filterstring\"");
	c.push(">");
	c.push(" <div class=\"serverguide-filterlist-generic\">\n <div id=\"custom-filter-list\">\n <em>");
	c.push(Surface.valOut("Search for Servers"));
	c.push(":</em>\n <div id=\"custom-filter-list-content\"></div>\n <a class=\"serverguide-reset-filter-button\" href=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/clearFilter/{platform}/", Surface.urlContext)));
	c.push("\">");
	c.push(Surface.valOut("Reset to Default"));
	c.push("</a>\n </div>\n </div>\n <span class=\"serverguide-toggler\"></span>\n");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.mohwfilters", "surface_32_18", "serverguide-filterstring", o, b);
	return c.join('');
}
;
serverguide.mohwfilters._use_20_6_block_content = new Surface.Block('serverguide.mohwfilters._use_20_6_block_content');
serverguide.mohwfilters._use_20_6_block_content.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_serverFilterOptions;
	c.push("\n");
	c.push("\n");
	l_serverFilterOptions = $S.callFunction("gamedata.get", 4096, "gameserver", b, kwargs);
	c.push("\n <div id=\"serverguide-filtertoggle\" class=\"serverguide-filtertoggle-");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.showFilters) != "undefined" && o.showFilters !== null) ? o.showFilters : 1)) {
		c.push("expanded");
	}
	else {
		c.push("contracted");
	}
	c.push("\">\n");
	c.push(serverguide.mohwfilters.surface_32_18.render({}, b, kwargs));
	c.push(" <div class=\"serverguide-header-refresh-button\">\n ");
	c.push(Surface.importTemplate(("common" + ("." + "button")), {"title": "Refresh and save filter", "type": "submit", "style": "medium-grey", "extraClass": "serverguide-apply-filter-button"}, null, kwargs));
	c.push("\n </div>\n </div>\n <div id=\"serverguide-filters-container\">\n <div id=\"serverguide-filters\" ");
	if (!(o.showFilters)) {
		c.push("style=\"display:none;\"");
	}
	c.push(">\n <div class=\"filter-col span1\">\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtergameexpansion")), {"gameexpansions": S.Modifier.get(l_serverFilterOptions, "gameexpansions"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filterregion")), {"regions": S.Modifier.get(l_serverFilterOptions, "regions"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filterfreetext")), o, null, kwargs));
	c.push("\n </div>\n <div class=\"filter-col span1\">\n <!-- float: left; width:184px; padding-left: 16px; background: #ffc; -->\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filterpresets")), {"gamepresets": S.Modifier.get(l_serverFilterOptions, "gamepresets"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filterdetails")), {"gamedetails": S.Modifier.get(l_serverFilterOptions, "gamedetails"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filteradvanced")), {"filter": o.filter}, null, kwargs));
	c.push("\n </div>\n <div class=\"filter-col span1 pull1\">\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtergamesize")), {"gamesize": S.Modifier.get(l_serverFilterOptions, "gamesize"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtergameslots")), {"gameslots": S.Modifier.get(l_serverFilterOptions, "gameslots"), "filter": o.filter}, null, kwargs));
	c.push("\n </div>\n <div class=\"filter-col span2 push1\">\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filterplaylist")), {"playlists": S.Modifier.get(l_serverFilterOptions, "playlists"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtergamemode")), {"gamemodes": S.Modifier.get(l_serverFilterOptions, "gamemodes"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtermaps")), {"maps": S.Modifier.get(l_serverFilterOptions, "maps"), "filter": o.filter}, null, kwargs));
	c.push("\n </div>\n </div>\n </div>\n <input type=\"hidden\" name=\"settings\" id=\"serverguide-filter-settings-input\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.settings) != "undefined" && o.filter.settings !== null) ? o.filter.settings : []), "|")));
	c.push("\" />\n <input type=\"hidden\" name=\"regions\" id=\"serverguide-filter-regions-input\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.regions) != "undefined" && o.filter.regions !== null) ? o.filter.regions : []), "|")));
	c.push("\" />\n <input type=\"hidden\" name=\"country\" id=\"serverguide-filter-countries-input\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.country) != "undefined" && o.filter.country !== null) ? o.filter.country : []), "|")));
	c.push("\" />\n <div id=\"serverguide-apply-filters\" ");
	if (!(o.showFilters)) {
		c.push("style=\"display:none;\"");
	}
	c.push(">\n ");
	c.push(Surface.importTemplate(("common" + ("." + "button")), {"title": "Refresh and save filter", "type": "submit", "style": "medium-grey", "extraClass": "serverguide-apply-filter-button"}, null, kwargs));
	c.push("\n <div id=\"serverguide-filter-count\">\n ");
	c.push(Surface.valOut("Found"));
	c.push(" <span class=\"serverguide-filter-count-amount\">1337</span> ");
	c.push(Surface.valOut("servers"));
	c.push("\n </div>\n <div id=\"serverguide-filter-saved\">");
	c.push(Surface.valOut("Filter saved!"));
	c.push("</div>\n </div>\n ");
	return c.join("");
}
;
;var block_serverguide_mohwindex = new Surface.BlockConfig('serverguide.index', {'serverSettings': 'serverguide.mohwindex.block_serverSettings', 'serverguideFilters': 'serverguide.mohwindex.block_serverguideFilters'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('mohwindex'));
serverguide.mohwindex.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_mohwindex;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.mohwindex');
	c.push("\n");
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('serverguide.index', o, b, kwargs);
}
;
serverguide.mohwindex.block_serverguideFilters = new Surface.Block('serverguide.mohwindex.block_serverguideFilters');
serverguide.mohwindex.block_serverguideFilters.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("\n");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.showFilter) != "undefined" && o.showFilter !== null) ? o.showFilter : true)) {
		c.push(" ");
		c.push(Surface.importTemplate(("serverguide" + ("." + "mohwfilters")), o, null, kwargs));
		c.push("\n");
	}
	else {
		c.push(" <div style=\"position: relative;clear:both;padding:16px 0\">\n <a href=\"");
		c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/{platform}/", Surface.urlContext)));
		c.push("\" style=\"font-weight:normal; font-size:12px;\" >");
		c.push(Surface.valOut("View all servers"));
		c.push("</a>\n </div>\n");
	}
	return c.join("");
}
;
serverguide.mohwindex.block_serverSettings = new Surface.Block('serverguide.mohwindex.block_serverSettings');
serverguide.mohwindex.block_serverSettings.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "mohwserverinfo")), o, null, kwargs));
	c.push("\n");
	return c.join("");
}
;
;var block_serverguide_mohwserverinfo = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('mohwserverinfo'));
serverguide.mohwserverinfo.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_mohwserverinfo;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.mohwserverinfo');
	c.push("\n<div id=\"serverguide-show-column-rail\" class=\"base-secondary-right-column\">\n<div id=\"serverguide-show-column\">\n");
	c.push(serverguide.mohwserverinfo.surface_4_2.render({"favGuids": ((typeof(o) != "undefined" && o !== null && typeof(o.favGuids) != "undefined" && o.favGuids !== null) ? o.favGuids : null), "friends": ((typeof(o) != "undefined" && o !== null && typeof(o.friends) != "undefined" && o.friends !== null) ? o.friends : null), "loading": ((typeof(o) != "undefined" && o !== null && typeof(o.loading) != "undefined" && o.loading !== null) ? o.loading : null), "players": ((typeof(o) != "undefined" && o !== null && typeof(o.players) != "undefined" && o.players !== null) ? o.players : null), "serverinfo": ((typeof(o) != "undefined" && o !== null && typeof(o.serverinfo) != "undefined" && o.serverinfo !== null) ? o.serverinfo : null), "session": {"isLoggedIn": ((typeof(o) != "undefined" && o !== null && typeof(o.session) != "undefined" && o.session !== null && typeof(o.session.isLoggedIn) != "undefined" && o.session.isLoggedIn !== null) ? o.session.isLoggedIn : null)}}, b, kwargs));
	c.push("</div>\n</div>\n");
	return c.join('');
}
;
var block_serverguide_mohwserverinfo_use_134_22 = new Surface.BlockConfig('common.secondarycontent', {'content': 'serverguide.mohwserverinfo._use_134_22_block_content', 'title': 'serverguide.mohwserverinfo._use_134_22_block_title', 'extraClass': 'serverguide.mohwserverinfo._use_134_22_block_extraClass'});
var block_serverguide_mohwserverinfo_use_106_22 = new Surface.BlockConfig('common.secondarycontent', {'content': 'serverguide.mohwserverinfo._use_106_22_block_content', 'title': 'serverguide.mohwserverinfo._use_106_22_block_title', 'extraClass': 'serverguide.mohwserverinfo._use_106_22_block_extraClass'});
serverguide.mohwserverinfo.surface_4_2 = new Surface.SingleSurface("serverguide.mohwserverinfo.surface_4_2");
serverguide.mohwserverinfo._use_106_22_block_extraClass = new Surface.Block('serverguide.mohwserverinfo._use_106_22_block_extraClass');
serverguide.mohwserverinfo._use_106_22_block_extraClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverinfo-players-box");
	return c.join("");
}
;
serverguide.mohwserverinfo._use_106_22_block_title = new Surface.Block('serverguide.mohwserverinfo._use_106_22_block_title');
serverguide.mohwserverinfo._use_106_22_block_title.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(Surface.valOut(S.Modifier.count(o.friends)));
	c.push(" ");
	c.push(Surface.valOut(S.Modifier.pluralize(S.Modifier.count(o.friends), "Friend", "Friends")));
	return c.join("");
}
;
serverguide.mohwserverinfo._use_106_22_block_content = new Surface.Block('serverguide.mohwserverinfo._use_106_22_block_content');
serverguide.mohwserverinfo._use_106_22_block_content.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_for_serverguide_mohwserverinfo_113_30_isOdd;
	var l_for_serverguide_mohwserverinfo_113_30_iteration;
	var l_for_serverguide_mohwserverinfo_113_30_isEven;
	var l_for_serverguide_mohwserverinfo_113_30_list;
	l_for_serverguide_mohwserverinfo_113_30_list = o.friends;
	l_for_serverguide_mohwserverinfo_113_30_iteration = 0;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_mohwserverinfo_113_30_list), 0)) {
		for (var l_for_serverguide_mohwserverinfo_113_30_key in l_for_serverguide_mohwserverinfo_113_30_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_mohwserverinfo_113_30_list[l_for_serverguide_mohwserverinfo_113_30_key])) {
				continue;
			}
			var l_friend = l_for_serverguide_mohwserverinfo_113_30_list[l_for_serverguide_mohwserverinfo_113_30_key];
			l_for_serverguide_mohwserverinfo_113_30_iteration = S.compat.add(l_for_serverguide_mohwserverinfo_113_30_iteration, 1);
			l_for_serverguide_mohwserverinfo_113_30_isEven = S.compat.eq(Surface.modulo(l_for_serverguide_mohwserverinfo_113_30_iteration, 2), 0);
			l_for_serverguide_mohwserverinfo_113_30_isOdd = !(l_for_serverguide_mohwserverinfo_113_30_isEven);
			c.push(" <div class=\"serverguide-show-playerrow serverguide-show-friendrow\">\n <span ");
			if (l_for_serverguide_mohwserverinfo_113_30_isOdd) {
				c.push("class=\"serverguide-show-player-odd\"");
			}
			c.push(">\n ");
			c.push(Surface.importTemplate(("ui" + ("." + "avatar")), {"user": l_friend, "size": 22}, null, kwargs));
			c.push("\n <div class=\"serverguide-show-player\">\n <div class=\"serverguide-show-playerlink-container\">\n <a class=\"serverguide-show-playerlink\" href=\"");
			c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/user/{username}/", Surface.urlContext, {"username": l_friend.username})));
			c.push("\">");
			c.push(Surface.valOut(l_friend.username));
			c.push("</a>\n </div>\n </div>\n </span>\n </div>\n");
		}
	}
	c.push(" <div style=\"clear:both;\"></div>\n");
	return c.join("");
}
;
serverguide.mohwserverinfo._use_134_22_block_extraClass = new Surface.Block('serverguide.mohwserverinfo._use_134_22_block_extraClass');
serverguide.mohwserverinfo._use_134_22_block_extraClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverinfo-players-box");
	return c.join("");
}
;
serverguide.mohwserverinfo._use_134_22_block_title = new Surface.Block('serverguide.mohwserverinfo._use_134_22_block_title');
serverguide.mohwserverinfo._use_134_22_block_title.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	return c.join("");
}
;
serverguide.mohwserverinfo._use_134_22_block_content = new Surface.Block('serverguide.mohwserverinfo._use_134_22_block_content');
serverguide.mohwserverinfo._use_134_22_block_content.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_soldierSlots;
	l_soldierSlots = $S.callFunction("serverguide.getServerSlots", o.serverinfo, 2, b, kwargs);
	c.push(" <div id=\"serverinfo-players-all-wrapper\"></div>\n <div id=\"serverinfo-players-all-view\" class=\"base-link\" data-numPlayers=\"");
	c.push(Surface.valOut(l_soldierSlots.current));
	c.push("\" data=\"");
	c.push(Surface.valOut(o.serverinfo.guid));
	c.push("\">");
	c.push(Surface.valOut("Show"));
	c.push(" ");
	c.push(Surface.valOut(S.Modifier.pluralize(l_soldierSlots.current, "Player", "all players")));
	c.push("</div>\n <div id=\"serverinfo-players-all-hide\" class=\"base-link\">");
	c.push(Surface.valOut("Hide"));
	c.push(" ");
	c.push(Surface.valOut(S.Modifier.pluralize(l_soldierSlots.current, "Player", "all players")));
	c.push("</div>\n");
	return c.join("");
}
;
serverguide.mohwserverinfo.surface_4_2.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_mohwserverinfo;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.mohwserverinfo');
	c.push("<surf:container id=\"serverguide-show\"");
	c.push(">");
	var l_favGuids;
	var l_soldierSlots;
	var l_isFavorite;
	var l_session;
	var l_mapname;
	var l_mapinfo;
	o.players = o.players;
	c.push("\n <div class=\"serverguide-");
	if (!(((typeof(o) != "undefined" && o !== null && typeof(o.serverinfo) != "undefined" && o.serverinfo !== null && typeof(o.serverinfo.online) != "undefined" && o.serverinfo.online !== null) ? o.serverinfo.online : false))) {
		c.push("offline");
	}
	else {
		c.push("online");
	}
	c.push("-info\">\n");
	l_session = S.Modifier.get(Surface.globalContext, "session");
	l_favGuids = S.Modifier.get(Surface.globalContext, "favGuids");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.loading) != "undefined" && o.loading !== null) ? o.loading : false)) {
		c.push(" <div class=\"loading\"></div>\n");
	}
	else {
		if ((typeof(o) != "undefined" && o !== null && typeof(o.serverinfo) != "undefined" && o.serverinfo !== null)) {
			l_isFavorite = S.Modifier.contains(l_favGuids, S.Modifier.get(o.serverinfo, "guid", ""));
			l_mapinfo = $S.callFunction("common.mapinfo", o.serverinfo.game, o.serverinfo.map, b, kwargs);
			l_mapname = S.Modifier.get(l_mapinfo, "name");
			c.push("\n");
			l_soldierSlots = $S.callFunction("serverguide.getServerSlots", o.serverinfo, 2, b, kwargs);
			c.push("\n <span class=\"");
			c.push(Surface.valOut($S.callFunction("common.getGameIconCSS", o.serverinfo.game, o.serverinfo.platform, o.serverinfo.gameExpansions, b, kwargs)));
			c.push("\"></span>\n <h1 id=\"selected-server-name\" class=\"wfont\">\n <a href=\"");
			c.push(Surface.valOut($S.callFunction("common.showServerUrlByServer", o.serverinfo, b, kwargs)));
			c.push("\">\n ");
			c.push(Surface.valOut(o.serverinfo.name));
			c.push("\n </a>\n </h1>\n <div style=\"clear: both;\"></div>\n");
			if (o.serverinfo.online) {
				c.push(" <div id=\"serverguide-show-serverjoin\">\n <button class=\"base-button-arrow-almost-gigantic\n ");
				if (!($S.callFunction("serverguide.enableJoinButton", o.serverinfo, b, kwargs))) {
					c.push(" disabled");
				}
				c.push("\"\n data-bind-action=\"join-mp-gameserver\"\n data-role=\"");
				c.push(Surface.valOut(1));
				c.push("\"\n data-guid=\"");
				c.push(Surface.valOut(o.serverinfo.guid));
				c.push("\"\n data-game=\"");
				c.push(Surface.valOut(o.serverinfo.game));
				c.push("\"\n data-platform=\"");
				c.push(Surface.valOut(o.serverinfo.platform));
				c.push("\"\n data-gameid=\"");
				c.push(Surface.valOut(o.serverinfo.gameId));
				c.push("\"\n data-ip=\"");
				c.push(Surface.valOut(o.serverinfo.ip));
				c.push("\"\n data-port=\"");
				c.push(Surface.valOut(o.serverinfo.port));
				c.push("\"\n data-track=\"serverbrowser.server.selected.join\">\n ");
				c.push(Surface.valOut("Join server"));
				c.push("\n </button>\n <div class=\"base-clear\"></div>\n </div>\n <input type=\"text\" class=\"serverguide-server-link-field base-no-ajax\"\n value=\"");
				c.push(Surface.valOut($S.callFunction("serverguide.showAbsoluteServerUrlByServer", o.serverinfo, b, kwargs)));
				c.push("\" />\n <div style=\"clear: both;\"></div>\n <div id=\"selected-server-mapimage\">\n <img src=\"");
				c.push(Surface.valOut($S.callFunction("base.asset", S.Modifier.get(l_mapinfo, "imageBig"), b, kwargs)));
				c.push("\" alt=\"");
				c.push(Surface.valOut(S.Modifier.get(l_mapinfo, "name")));
				c.push("\" width=146 height=79 />\n </div>\n <div class=\"selected-server-info-wrapper\">\n");
				if (((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false)) {
					c.push(" <div class=\"serverguide-add-favorite\">\n <form action=\"");
					c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/gameserverbookmark/toggleFavourite/", Surface.urlContext)));
					c.push("\">\n <input type=\"hidden\" name=\"guid\" value=\"");
					c.push(Surface.valOut(o.serverinfo.guid));
					c.push("\" />\n </form>\n <div class=\"serverguide-add-favorite-toggle ");
					if (l_isFavorite) {
						c.push("isFavorite");
					}
					c.push("\" ><span>");
					if (l_isFavorite) {
						c.push(Surface.valOut("Favorite"));
					}
					else {
						c.push(Surface.valOut("Add as favorite"));
					}
					c.push("</span></div>\n <div class=\"serverguide-add-favorite-loading\">\n <img width=\"16\" height=\"16\" src=\"");
					c.push(Surface.valOut($S.callFunction("base.asset", "/public/base/shared/ajax-loader.gif", b, kwargs)));
					c.push("\" alt=\"");
					c.push(Surface.valOut("Loading..."));
					c.push("\" />\n </div>\n </div>\n <div class=\"base-clear\"></div>\n");
				}
				c.push("\n <ul id=\"selected-server-info\">\n <li>");
				c.push(Surface.valOut(l_soldierSlots.current));
				c.push(" / ");
				c.push(Surface.valOut(l_soldierSlots.max));
				c.push(" ");
				c.push(Surface.valOut("Players"));
				c.push("</li>\n <li>");
				c.push(Surface.valOut((S.translations[l_mapname] || l_mapname)));
				c.push("</li>\n <li>");
				c.push(Surface.valOut($S.callFunction("serverguide.gameServerModeStringLocalized", o.serverinfo.mapMode, o.serverinfo.game, b, kwargs)));
				c.push("</li>\n <li>");
				c.push(Surface.valOut($S.callFunction("serverguide.playlistStringLocalized", o.serverinfo.playlist, b, kwargs)));
				c.push("</li>\n </ul>\n </div>\n <div style=\"clear: both;\"></div>\n");
				if ($S.callFunction("serverguide.liveScoreboardEnabled", o.serverinfo.game, o.serverinfo.platform, b, kwargs)) {
					c.push(" ");
					c.push(Surface.importTemplate(("serverguide" + ("." + "serverinfoscore")), o, null, kwargs));
					c.push("\n");
				}
				c.push("\n <div style=\"clear: both;\"></div>\n <div id=\"serverinfo-more-info\">\n <div id=\"selected-server-settings\">\n <h2>");
				c.push(Surface.valOut("Server settings"));
				c.push("</h2>\n <ul id=\"server-settings\">\n <li>");
				c.push(Surface.valOut("Ranked"));
				c.push("<span class=\"selected-server-setting selected-server-setting-ranked selected-server-setting-ranked-");
				if (o.serverinfo.ranked) {
					c.push("on");
				}
				else {
					c.push("off");
				}
				c.push("\">");
				if (o.serverinfo.ranked) {
					c.push(Surface.valOut("On"));
				}
				else {
					c.push(Surface.valOut("Off"));
				}
				c.push("</span></li>\n <li>");
				c.push(Surface.valOut("Preset"));
				c.push("<span class=\"selected-server-setting selected-server-setting-type selected-server-setting-type-");
				c.push(Surface.valOut(S.Modifier.lower($S.callFunction("serverguide.gameServerPresetStringNoLocalization", o.serverinfo.preset, b, kwargs))));
				c.push("\">");
				c.push(Surface.valOut($S.callFunction("serverguide.gameServerPresetStringLocalized", o.serverinfo.preset, b, kwargs)));
				c.push("</span></li>\n <li>Punkbuster<span class=\"selected-server-setting selected-server-setting-pb selected-server-setting-pb-");
				if (o.serverinfo.punkbuster) {
					c.push("on");
				}
				else {
					c.push("off");
				}
				c.push("\">");
				if (o.serverinfo.punkbuster) {
					c.push(Surface.valOut("On"));
				}
				else {
					c.push(Surface.valOut("Off"));
				}
				c.push("</span></li>\n <li>");
				c.push(Surface.valOut("Password"));
				c.push("<span class=\"selected-server-setting selected-server-setting-password selected-server-setting-password-");
				if (o.serverinfo.hasPassword) {
					c.push("on");
				}
				else {
					c.push("off");
				}
				c.push("\">");
				if (o.serverinfo.hasPassword) {
					c.push(Surface.valOut("On"));
				}
				else {
					c.push(Surface.valOut("Off"));
				}
				c.push("</span></li>\n </ul>\n </div>\n </div>\n <div style=\"clear: both;\"></div>\n");
				if ((S.compat.gt(S.Modifier.count(o.friends), 0) && ((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false))) {
					c.push(Surface.importTemplate(("common" + ("." + "secondarycontent")), o, block_serverguide_mohwserverinfo_use_106_22, kwargs));
				}
				c.push("\n");
				if (S.compat.gt(l_soldierSlots.current, 0)) {
					c.push(" <div style=\"clear:both;\"></div>\n");
					c.push(Surface.importTemplate(("common" + ("." + "secondarycontent")), o, block_serverguide_mohwserverinfo_use_134_22, kwargs));
				}
				c.push("\n <div style=\"clear:both;\"></div>\n");
			}
			else {
				c.push(" <div class=\"common-secondary-column-line\"></div>\n <h1 id=\"serverinfo-serveroffline\">");
				c.push(Surface.valOut("Server is offline"));
				c.push("</h1>\n <div class=\"common-secondary-column-line\"></div>\n");
			}
			c.push(" ");
		}
		c.push("\n");
	}
	c.push("\n </div>\n");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.mohwserverinfo", "surface_4_2", "serverguide-show", o, b);
	return c.join('');
}
;
;var block_serverguide_mohwserverintro = new Surface.BlockConfig('base.ajaxindex', {'titleComponent': 'serverguide.mohwserverintro.block_titleComponent', 'mainContent': 'serverguide.mohwserverintro.block_mainContent'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('mohwserverintro'));
serverguide.mohwserverintro.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_mohwserverintro;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.mohwserverintro');
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('base.ajaxindex', o, b, kwargs);
}
;
serverguide.mohwserverintro.block_titleComponent = new Surface.Block('serverguide.mohwserverintro.block_titleComponent');
serverguide.mohwserverintro.block_titleComponent.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(Surface.valOut("Server browser"));
	c.push(" - ");
	return c.join("");
}
;
serverguide.mohwserverintro.block_mainContent = new Surface.Block('serverguide.mohwserverintro.block_mainContent');
serverguide.mohwserverintro.block_mainContent.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("<div id=\"serverbrowser-mohwintro\" class=\"base-middle common-box\">\n <h1>");
	c.push(Surface.valOut("Join servers from your browser"));
	c.push("</h1>\n <p>");
	c.push(Surface.valOut("When Medal of Honor Warfighter launches for PC you will be able to join any server and friend straight from your browser. Always accessible."));
	c.push("</p>\n <div class=\"image\"></div>\n</div>\n");
	return c.join("");
}
;
;var block_serverguide_mohwshow = new Surface.BlockConfig('serverguide.show', {'serverSettings': 'serverguide.mohwshow.block_serverSettings', 'mapRotation': 'serverguide.mohwshow.block_mapRotation', 'serverInfoShort': 'serverguide.mohwshow.block_serverInfoShort', 'serverHeader': 'serverguide.mohwshow.block_serverHeader', 'scoreBoard': 'serverguide.mohwshow.block_scoreBoard'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('mohwshow'));
serverguide.mohwshow.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_mohwshow;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.mohwshow');
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('serverguide.show', o, b, kwargs);
}
;
serverguide.mohwshow.block_serverHeader = new Surface.Block('serverguide.mohwshow.block_serverHeader');
serverguide.mohwshow.block_serverHeader.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "showserverheader")), {"server": o.server}, null, kwargs));
	c.push("\n");
	return c.join("");
}
;
serverguide.mohwshow.surface_26_36 = new Surface.SingleSurface("serverguide.mohwshow.surface_26_36");
serverguide.mohwshow.surface_26_36.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_mohwshow;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.mohwshow');
	c.push("<surf:container id=\"serverguide-show-info-ping\"");
	c.push(">");
	c.push(Surface.valOut(o.server.ping));
	c.push(" ms");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.mohwshow", "surface_26_36", "serverguide-show-info-ping", o, b);
	return c.join('');
}
;
serverguide.mohwshow.block_serverInfoShort = new Surface.Block('serverguide.mohwshow.block_serverInfoShort');
serverguide.mohwshow.block_serverInfoShort.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_soldierSlots;
	var l_queueSlots;
	c.push("\n <table id=\"server-info-short\">\n <thead>\n <tr>\n <th>");
	c.push(Surface.valOut("Players"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Ping"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Ranked"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Preset"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Punkbuster"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Password"));
	c.push("</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n");
	l_soldierSlots = $S.callFunction("serverguide.getServerSlots", o.server, 2, b, kwargs);
	l_queueSlots = $S.callFunction("serverguide.getServerSlots", o.server, 1, b, kwargs);
	c.push(" <td id=\"server-info-players\">");
	c.push(Surface.valOut(l_soldierSlots.current));
	c.push(" / ");
	c.push(Surface.valOut(l_soldierSlots.max));
	if (S.compat.gt(l_queueSlots.current, 0)) {
		c.push(" [<abbr title=\"");
		c.push(Surface.valOut(l_queueSlots.current));
		c.push(" ");
		c.push(Surface.valOut("player(s) queued"));
		c.push("\">");
		c.push(Surface.valOut(l_queueSlots.current));
		c.push("</abbr>]");
	}
	c.push("</td>\n <td id=\"server-info-ping\">");
	c.push(serverguide.mohwshow.surface_26_36.render({"server": {"ping": ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.ping) != "undefined" && o.server.ping !== null) ? o.server.ping : null)}}, b, kwargs));
	c.push("</td>\n <td id=\"server-info-ranked\" ");
	if (!(o.server.ranked)) {
		c.push("class=\"server-info-off\"");
	}
	c.push(">");
	if (o.server.ranked) {
		c.push(Surface.valOut("On"));
	}
	else {
		c.push(Surface.valOut("Off"));
	}
	c.push("</td>\n <td id=\"server-info-preset\"");
	if (S.compat.neq(((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.preset) != "undefined" && o.server.preset !== null) ? o.server.preset : 0), 2)) {
		c.push(" class=\"server-info-off\"");
	}
	c.push(">");
	c.push(Surface.valOut($S.callFunction("serverguide.gameServerPresetStringLocalized", ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.preset) != "undefined" && o.server.preset !== null) ? o.server.preset : 1), b, kwargs)));
	c.push("</td>\n <td id=\"server-info-punkbuster\"");
	if (!(o.server.punkbuster)) {
		c.push(" class=\"server-info-off\"");
	}
	c.push(">");
	if (o.server.punkbuster) {
		c.push(Surface.valOut("On"));
	}
	else {
		c.push(Surface.valOut("Off"));
	}
	c.push("</td>\n <td id=\"server-info-password\" class=\"last");
	if (!(o.server.hasPassword)) {
		c.push(" server-info-off");
	}
	c.push("\">");
	if (o.server.hasPassword) {
		c.push(Surface.valOut("On"));
	}
	else {
		c.push(Surface.valOut("Off"));
	}
	c.push("</td>\n </tr>\n </tbody>\n</table>\n");
	return c.join("");
}
;
serverguide.mohwshow.block_serverSettings = new Surface.Block('serverguide.mohwshow.block_serverSettings');
serverguide.mohwshow.block_serverSettings.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "serversettings")), {"server": o.server}, null, kwargs));
	c.push("\n");
	return c.join("");
}
;
serverguide.mohwshow.block_mapRotation = new Surface.Block('serverguide.mohwshow.block_mapRotation');
serverguide.mohwshow.block_mapRotation.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "maprotation")), {"server": o.server}, null, kwargs));
	c.push("\n");
	return c.join("");
}
;
serverguide.mohwshow.block_scoreBoard = new Surface.Block('serverguide.mohwshow.block_scoreBoard');
serverguide.mohwshow.block_scoreBoard.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" <div id=\"server-players-list\">\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "scoreboard")), {"server": o.server}, null, kwargs));
	c.push("\n </div>\n");
	return c.join("");
}
;
;var block_serverguide_playnow = new Surface.BlockConfig('serverguide.base', {'serverguideTitle': 'serverguide.playnow.block_serverguideTitle', 'serverguideContent': 'serverguide.playnow.block_serverguideContent', 'titleItem': 'serverguide.playnow.block_titleItem'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('playnow'));
serverguide.playnow.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_playnow;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.playnow');
	c.push("\n");
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('serverguide.base', o, b, kwargs);
}
;
serverguide.playnow.block_titleItem = new Surface.Block('serverguide.playnow.block_titleItem');
serverguide.playnow.block_titleItem.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("Play Now - ");
	return c.join("");
}
;
serverguide.playnow.block_serverguideTitle = new Surface.Block('serverguide.playnow.block_serverguideTitle');
serverguide.playnow.block_serverguideTitle.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("Play Now");
	return c.join("");
}
;
serverguide.playnow.block_serverguideContent = new Surface.Block('serverguide.playnow.block_serverguideContent');
serverguide.playnow.block_serverguideContent.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("\n Server Guide Play Now\n");
	return c.join("");
}
;
;var block_serverguide_popupadvancedfilter = new Surface.BlockConfig('common.popup', {'footer': 'serverguide.popupadvancedfilter.block_footer', 'content': 'serverguide.popupadvancedfilter.block_content', 'title': 'serverguide.popupadvancedfilter.block_title', 'extraClass': 'serverguide.popupadvancedfilter.block_extraClass'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('popupadvancedfilter'));
serverguide.popupadvancedfilter.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_popupadvancedfilter;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.popupadvancedfilter');
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('common.popup', o, b, kwargs);
}
;
serverguide.popupadvancedfilter.block_title = new Surface.Block('serverguide.popupadvancedfilter.block_title');
serverguide.popupadvancedfilter.block_title.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(Surface.valOut("Advanced Filter settings"));
	return c.join("");
}
;
serverguide.popupadvancedfilter.block_extraClass = new Surface.Block('serverguide.popupadvancedfilter.block_extraClass');
serverguide.popupadvancedfilter.block_extraClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("medium advanced-server-filter");
	return c.join("");
}
;
serverguide.popupadvancedfilter.block_content = new Surface.Block('serverguide.popupadvancedfilter.block_content');
serverguide.popupadvancedfilter.block_content.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_advanced_filters;
	l_advanced_filters = S.Modifier.get($S.callFunction("gamedata.get", Surface.globalContext.realm.section, "gameserver", b, kwargs), "advancedsettings");
	c.push("\n <form id=\"serverfilter-advancedfilters-form\">\n <div class=\"popup-serveradvancedfilter-container\">\n <div id=\"popup-serveradvancedfilter-settings-gamesettings\" class=\"popup-serveradvancedfilter-settings\">\n ");
	if (S.compat.gt(S.Modifier.count(S.Modifier.get(l_advanced_filters, "bool", {})), 0)) {
		c.push(" ");
		c.push(Surface.importTemplate(("serverguide" + ("." + "filterbool")), {"filters": S.Modifier.get(l_advanced_filters, "bool", {}), "serverSettings": o.serverSettings}, null, kwargs));
		c.push("\n");
	}
	c.push(" </div>\n");
	if (S.compat.gt(S.Modifier.count(S.Modifier.get(S.Modifier.get(l_advanced_filters, "percent", {}), "filters", {})), 0)) {
		c.push(" <div id=\"popup-serveradvancedfilter-settings-othersettings\" class=\"popup-serveradvancedfilter-settings\">\n");
		if (S.compat.gt(S.Modifier.count(S.Modifier.get(S.Modifier.get(l_advanced_filters, "percent", {}), "filters", {})), 0)) {
			c.push(" ");
			c.push(Surface.importTemplate(("serverguide" + ("." + "filterpercent")), {"filters": S.Modifier.get(l_advanced_filters, "percent", {}), "serverSettings": o.serverSettings}, null, kwargs));
			c.push("\n");
		}
		c.push("\n");
		if (S.compat.gt(S.Modifier.count(S.Modifier.get(S.Modifier.get(l_advanced_filters, "number", {}), "filters", {})), 0)) {
			c.push(" ");
			c.push(Surface.importTemplate(("serverguide" + ("." + "filternumber")), {"filters": S.Modifier.get(l_advanced_filters, "number", {}), "serverSettings": o.serverSettings}, null, kwargs));
			c.push("\n");
		}
		c.push(" <div class=\"base-clear\"></div>\n </div>\n");
	}
	c.push(" <div class=\"base-clear\"></div>\n </div>\n </form>\n <div class=\"base-clear\"></div>\n");
	return c.join("");
}
;
serverguide.popupadvancedfilter.block_footer = new Surface.Block('serverguide.popupadvancedfilter.block_footer');
serverguide.popupadvancedfilter.block_footer.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" <div class=\"popup-reportabuse-buttons\">\n <div style=\"float:right;\"><input type=\"button\" class=\"base-button-arrow-small-grey advanced-cancel\" value=\"");
	c.push(Surface.valOut("Cancel"));
	c.push("\" /></div>\n <input style=\"margin-right:6px;float:right;\" type=\"button\" class='base-button-arrow-small serverguide-save-advanced-filter' value='");
	c.push(Surface.valOut("OK"));
	c.push("' />\n </div>\n");
	return c.join("");
}
;
;var block_serverguide_regionfilter = new Surface.BlockConfig('common.popup', {'footer': 'serverguide.regionfilter.block_footer', 'content': 'serverguide.regionfilter.block_content', 'title': 'serverguide.regionfilter.block_title', 'extraClass': 'serverguide.regionfilter.block_extraClass'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('regionfilter'));
serverguide.regionfilter.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_regionfilter;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.regionfilter');
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('common.popup', o, b, kwargs);
}
;
serverguide.regionfilter.block_title = new Surface.Block('serverguide.regionfilter.block_title');
serverguide.regionfilter.block_title.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(Surface.valOut("Region Filter settings"));
	return c.join("");
}
;
serverguide.regionfilter.block_extraClass = new Surface.Block('serverguide.regionfilter.block_extraClass');
serverguide.regionfilter.block_extraClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("medium region-server-filter");
	return c.join("");
}
;
serverguide.regionfilter.block_content = new Surface.Block('serverguide.regionfilter.block_content');
serverguide.regionfilter.block_content.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_iter;
	var l_column;
	var l_for_serverguide_regionfilter_19_30_list;
	var l_for_serverguide_regionfilter_13_14_list;
	var l_for_serverguide_regionfilter_61_30_list;
	var l_for_serverguide_regionfilter_40_10_list;
	var l_lang_country;
	var l_regions;
	var l_lang_country_key;
	var l_regionLabel;
	var l_for_serverguide_regionfilter_54_26_isOdd;
	var l_for_serverguide_regionfilter_54_26_iteration;
	var l_for_serverguide_regionfilter_41_14_list;
	var l_for_serverguide_regionfilter_12_10_list;
	var l_for_serverguide_regionfilter_54_26_isEven;
	var l_for_serverguide_regionfilter_54_26_list;
	c.push("\n");
	l_regions = S.Modifier.get($S.callFunction("gamedata.get", Surface.globalContext.realm.section, "gameserver", b, kwargs), "regions");
	c.push("\n");
	if (S.Modifier.count(o.existingRegions)) {
		c.push(" <div id=\"serverbrowser-region-serverfilter-popup\">\n <h1>");
		c.push(Surface.valOut("1. Select region"));
		c.push("</h1>\n");
		l_for_serverguide_regionfilter_12_10_list = o.existingRegions;
		if (S.compat.gt(S.Modifier.count(l_for_serverguide_regionfilter_12_10_list), 0)) {
			for (var l_key in l_for_serverguide_regionfilter_12_10_list) {
				if (!Surface.isValidLoopItem(l_for_serverguide_regionfilter_12_10_list[l_key])) {
					continue;
				}
				var l_value = l_for_serverguide_regionfilter_12_10_list[l_key];
				l_for_serverguide_regionfilter_13_14_list = l_regions;
				if (S.compat.gt(S.Modifier.count(l_for_serverguide_regionfilter_13_14_list), 0)) {
					for (var l_for_serverguide_regionfilter_13_14_key in l_for_serverguide_regionfilter_13_14_list) {
						if (!Surface.isValidLoopItem(l_for_serverguide_regionfilter_13_14_list[l_for_serverguide_regionfilter_13_14_key])) {
							continue;
						}
						var l_region = l_for_serverguide_regionfilter_13_14_list[l_for_serverguide_regionfilter_13_14_key];
						if (S.compat.eq(l_key, l_region.id)) {
							c.push(" <div id=\"serverbrowser-region-filter-show-");
							c.push(Surface.valOut(l_region.id));
							c.push("\" class=\"serverbrowser-region-filter-show\" data-region=\"");
							c.push(Surface.valOut(l_region.id));
							c.push("\">\n");
							l_regionLabel = S.Modifier.get(l_region, "label");
							c.push(" <span class=\"label\">");
							c.push(Surface.valOut((S.translations[l_regionLabel] || l_regionLabel)));
							c.push("</span>\n");
							l_iter = 0;
							l_for_serverguide_regionfilter_19_30_list = l_value;
							if (S.compat.gt(S.Modifier.count(l_for_serverguide_regionfilter_19_30_list), 0)) {
								for (var l_for_serverguide_regionfilter_19_30_key in l_for_serverguide_regionfilter_19_30_list) {
									if (!Surface.isValidLoopItem(l_for_serverguide_regionfilter_19_30_list[l_for_serverguide_regionfilter_19_30_key])) {
										continue;
									}
									var l_c = l_for_serverguide_regionfilter_19_30_list[l_for_serverguide_regionfilter_19_30_key];
									if (S.Modifier.contains(o.countryFilters, l_c)) {
										l_iter = S.compat.add(l_iter, 1);
									}
								}
							}
							if (S.Modifier.contains(o.regionFilters, l_region.id)) {
								l_iter = S.Modifier.count(l_value);
							}
							c.push("\n <span class=\"numcountries\" style=\"color: #898989;\">");
							if (S.compat.gt(l_iter, 0)) {
								c.push("(");
								c.push(Surface.valOut(l_iter));
								c.push(")");
							}
							c.push("</span>\n </div>\n");
						}
					}
				}
			}
		}
		c.push(" <input type=\"hidden\" id=\"filter-regions-input\" name=\"regions\" value=\"");
		c.push(Surface.valOut(S.Modifier.join(o.regionFilters, "|")));
		c.push("\" />\n <div class=\"base-clear\"></div>\n </div>\n <div id=\"serverbrowser-country-serverfilter-popup\">\n <h1 style=\"display:none;\">");
		c.push(Surface.valOut("2. Select countries"));
		c.push("</h1>\n <div>\n");
		l_for_serverguide_regionfilter_40_10_list = o.existingRegions;
		if (S.compat.gt(S.Modifier.count(l_for_serverguide_regionfilter_40_10_list), 0)) {
			for (var l_key in l_for_serverguide_regionfilter_40_10_list) {
				if (!Surface.isValidLoopItem(l_for_serverguide_regionfilter_40_10_list[l_key])) {
					continue;
				}
				var l_value = l_for_serverguide_regionfilter_40_10_list[l_key];
				l_for_serverguide_regionfilter_41_14_list = l_regions;
				if (S.compat.gt(S.Modifier.count(l_for_serverguide_regionfilter_41_14_list), 0)) {
					for (var l_for_serverguide_regionfilter_41_14_key in l_for_serverguide_regionfilter_41_14_list) {
						if (!Surface.isValidLoopItem(l_for_serverguide_regionfilter_41_14_list[l_for_serverguide_regionfilter_41_14_key])) {
							continue;
						}
						var l_region = l_for_serverguide_regionfilter_41_14_list[l_for_serverguide_regionfilter_41_14_key];
						if (S.compat.eq(S.Modifier.toint(l_key), S.Modifier.toint(l_region.id))) {
							c.push(" <div id=\"serverbrowser-region-countries-");
							c.push(Surface.valOut(l_region.id));
							c.push("\" class=\"serverbrowser-region-countries\" data-region=\"");
							c.push(Surface.valOut(l_region.id));
							c.push("\">\n <div class=\"serverguide-regionfilter-selectable-selectall ");
							if (S.Modifier.contains(o.regionFilters, S.Modifier.get(l_region, "value"))) {
								c.push("serverguide-include");
							}
							else {
								c.push("serverguide-exclude");
							}
							c.push("\" filter=\"regions\" value=\"");
							c.push(Surface.valOut(S.Modifier.get(l_region, "value")));
							c.push("\" >\n <div class=\"ticbox\"></div>\n");
							l_lang_country_key = S.Modifier.get(l_region, "label");
							c.push(" <span fullname=\"");
							c.push(Surface.valOut((S.translations[l_lang_country_key] || l_lang_country_key)));
							c.push("\">\n ");
							c.push(Surface.valOut("Select all"));
							c.push("\n </span>\n <div class=\"base-clear\"></div>\n </div>\n");
							l_for_serverguide_regionfilter_54_26_list = l_value;
							l_for_serverguide_regionfilter_54_26_iteration = 0;
							if (S.compat.gt(S.Modifier.count(l_for_serverguide_regionfilter_54_26_list), 0)) {
								for (var l_for_serverguide_regionfilter_54_26_key in l_for_serverguide_regionfilter_54_26_list) {
									if (!Surface.isValidLoopItem(l_for_serverguide_regionfilter_54_26_list[l_for_serverguide_regionfilter_54_26_key])) {
										continue;
									}
									var l_c = l_for_serverguide_regionfilter_54_26_list[l_for_serverguide_regionfilter_54_26_key];
									l_for_serverguide_regionfilter_54_26_iteration = S.compat.add(l_for_serverguide_regionfilter_54_26_iteration, 1);
									l_for_serverguide_regionfilter_54_26_isEven = S.compat.eq(Surface.modulo(l_for_serverguide_regionfilter_54_26_iteration, 2), 0);
									l_for_serverguide_regionfilter_54_26_isOdd = !(l_for_serverguide_regionfilter_54_26_isEven);
									l_column = "";
									if ((S.compat.gt(S.Modifier.count(l_value), 10) && l_for_serverguide_regionfilter_54_26_isEven)) {
										l_column = "even-column";
									}
									else if ((S.compat.gt(S.Modifier.count(l_value), 10) && l_for_serverguide_regionfilter_54_26_isOdd)) {
										l_column = "odd-column";
									}
									l_for_serverguide_regionfilter_61_30_list = S.Modifier.countrycodes("", $S.callFunction("common.getCountryNameLookup", b, kwargs));
									if (S.compat.gt(S.Modifier.count(l_for_serverguide_regionfilter_61_30_list), 0)) {
										for (var l_for_serverguide_regionfilter_61_30_key in l_for_serverguide_regionfilter_61_30_list) {
											if (!Surface.isValidLoopItem(l_for_serverguide_regionfilter_61_30_list[l_for_serverguide_regionfilter_61_30_key])) {
												continue;
											}
											var l_countryCode = l_for_serverguide_regionfilter_61_30_list[l_for_serverguide_regionfilter_61_30_key];
											if (S.compat.eq(S.Modifier.lower(l_c), S.Modifier.lower(l_countryCode))) {
												c.push(" <div class=\"serverguide-regionfilter-selectable ");
												if ((typeof(l_column) != "undefined" && l_column !== null)) {
													c.push(Surface.valOut(l_column));
												}
												c.push(" ");
												if ((S.Modifier.contains(o.countryFilters, S.Modifier.lower(l_countryCode)) || S.Modifier.contains(o.regionFilters, S.Modifier.get(l_region, "key")))) {
													c.push("serverguide-include");
												}
												else {
													c.push("serverguide-exclude");
												}
												c.push("\" filter=\"countries\" value=\"");
												c.push(Surface.valOut(S.Modifier.lower(l_countryCode)));
												c.push("\" >\n <div class=\"ticbox\"></div>\n");
												l_lang_country = $S.callFunction("common.countryName", l_countryCode, b, kwargs);
												c.push(" <span>\n <img style=\"padding-right: 5px; padding-left: 5px; padding-top:5px;\"\n src=\"");
												c.push(Surface.valOut($S.callFunction("base.asset", S.Modifier.concat(S.Modifier.concat("/public/common/flags/", S.Modifier.lower(l_countryCode)), ".gif"), b, kwargs)));
												c.push("\"\n alt=\"");
												c.push(Surface.valOut(l_lang_country));
												c.push("\"\n data-tooltip=\"");
												c.push(Surface.valOut(l_lang_country));
												c.push("\" />\n ");
												c.push(Surface.valOut(l_lang_country));
												c.push("\n </span>\n <div class=\"base-clear\"></div>\n </div>\n");
											}
										}
									}
								}
							}
							c.push(" </div>\n");
						}
					}
				}
			}
		}
		c.push(" </div>\n <input id=\"filter-countries-input\" type=\"hidden\" name=\"countries\" value=\"");
		c.push(Surface.valOut(S.Modifier.join(o.countryFilters, "|")));
		c.push("\" />\n </div>\n");
	}
	else {
		c.push(" <div id=\"serverfilter-region-noneavailable\">");
		c.push(Surface.valOut("Region filter is currently unavailable"));
		c.push("</div>\n");
	}
	c.push("\n <div class=\"base-clear\" style=\"padding-bottom: 20px;\"></div>\n");
	return c.join("");
}
;
serverguide.regionfilter.block_footer = new Surface.Block('serverguide.regionfilter.block_footer');
serverguide.regionfilter.block_footer.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" <div class=\"popup-reportabuse-buttons\">\n <div style=\"float:right;\"><input type=\"button\" class=\"base-button-arrow-small-grey region-cancel\" value=\"");
	c.push(Surface.valOut("Cancel"));
	c.push("\" /></div>\n <input style=\"margin-right:6px;float:right;\" type=\"button\" class='base-button-arrow-small serverguide-save-region-filter' value='");
	c.push(Surface.valOut("OK"));
	c.push("' />\n </div>\n");
	return c.join("");
}
;
;var block_serverguide_reportserverpopup = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('reportserverpopup'));
serverguide.reportserverpopup.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_reportserverpopup;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.reportserverpopup');
	c.push("\n<ul>\n <li><a class=\"base-no-ajax\" onclick=\"serverguide.reportServer('");
	c.push(Surface.valOut(o.guid));
	c.push("', 2);\" data-title=\"");
	c.push(Surface.valOut("Report boosting/flag running"));
	c.push("\" href=\"#\">");
	c.push(Surface.valOut("Report boosting/flag running"));
	c.push("</a></li>\n <li><a class=\"base-no-ajax\" onclick=\"serverguide.reportServer('");
	c.push(Surface.valOut(o.guid));
	c.push("', 3);\" data-title=\"");
	c.push(Surface.valOut("Report content"));
	c.push("\" href=\"#\">");
	c.push(Surface.valOut("Report content"));
	c.push("</a></li>\n</ul>");
	return c.join('');
}
;
;var block_serverguide_scoreboard = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('scoreboard'));
serverguide.scoreboard.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_scoreboard;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.scoreboard');
	var l_squadLetters;
	var l_faction;
	c.push("\n");
	l_squadLetters = {0: "", 1: "A", 2: "B", 3: "C", 4: "D", 5: "E", 6: "F", 7: "G", 8: "H", 9: "I", 10: "J", 11: "K", 12: "L", 13: "M", 14: "N", 15: "O", 16: "P", 17: "Q", 18: "R", 19: "S", 20: "T", 21: "U", 22: "V", 23: "W", 24: "X", 25: "Y", 26: "Z", 27: "1", 28: "2", 29: "3", 30: "4", 31: "5", 32: "6", 33: "7", 34: "8", 35: "9", 36: "0"};
	c.push("\n");
	l_faction = {1: "US", 2: "RU"};
	c.push("\n");
	c.push(serverguide.scoreboard.surface_27_2.render({"faction": ((typeof(l_faction) != "undefined" && l_faction !== null) ? l_faction : null), "gameModes": {"AIRSUPERIORITY": ((typeof(o) != "undefined" && o !== null && typeof(o.gameModes) != "undefined" && o.gameModes !== null && typeof(o.gameModes.AIRSUPERIORITY) != "undefined" && o.gameModes.AIRSUPERIORITY !== null) ? o.gameModes.AIRSUPERIORITY : null), "CAPTURETHEFLAG": ((typeof(o) != "undefined" && o !== null && typeof(o.gameModes) != "undefined" && o.gameModes !== null && typeof(o.gameModes.CAPTURETHEFLAG) != "undefined" && o.gameModes.CAPTURETHEFLAG !== null) ? o.gameModes.CAPTURETHEFLAG : null), "CONQUEST": ((typeof(o) != "undefined" && o !== null && typeof(o.gameModes) != "undefined" && o.gameModes !== null && typeof(o.gameModes.CONQUEST) != "undefined" && o.gameModes.CONQUEST !== null) ? o.gameModes.CONQUEST : null), "CONQUESTASSAULTLARGE": ((typeof(o) != "undefined" && o !== null && typeof(o.gameModes) != "undefined" && o.gameModes !== null && typeof(o.gameModes.CONQUESTASSAULTLARGE) != "undefined" && o.gameModes.CONQUESTASSAULTLARGE !== null) ? o.gameModes.CONQUESTASSAULTLARGE : null), "CONQUESTASSAULTSMALL": ((typeof(o) != "undefined" && o !== null && typeof(o.gameModes) != "undefined" && o.gameModes !== null && typeof(o.gameModes.CONQUESTASSAULTSMALL) != "undefined" && o.gameModes.CONQUESTASSAULTSMALL !== null) ? o.gameModes.CONQUESTASSAULTSMALL : null), "CONQUESTLARGE": ((typeof(o) != "undefined" && o !== null && typeof(o.gameModes) != "undefined" && o.gameModes !== null && typeof(o.gameModes.CONQUESTLARGE) != "undefined" && o.gameModes.CONQUESTLARGE !== null) ? o.gameModes.CONQUESTLARGE : null), "DOMINATION": ((typeof(o) != "undefined" && o !== null && typeof(o.gameModes) != "undefined" && o.gameModes !== null && typeof(o.gameModes.DOMINATION) != "undefined" && o.gameModes.DOMINATION !== null) ? o.gameModes.DOMINATION : null), "GUNMASTER": ((typeof(o) != "undefined" && o !== null && typeof(o.gameModes) != "undefined" && o.gameModes !== null && typeof(o.gameModes.GUNMASTER) != "undefined" && o.gameModes.GUNMASTER !== null) ? o.gameModes.GUNMASTER : null), "RUSH": ((typeof(o) != "undefined" && o !== null && typeof(o.gameModes) != "undefined" && o.gameModes !== null && typeof(o.gameModes.RUSH) != "undefined" && o.gameModes.RUSH !== null) ? o.gameModes.RUSH : null), "SQDM": ((typeof(o) != "undefined" && o !== null && typeof(o.gameModes) != "undefined" && o.gameModes !== null && typeof(o.gameModes.SQDM) != "undefined" && o.gameModes.SQDM !== null) ? o.gameModes.SQDM : null), "SQRUSH": ((typeof(o) != "undefined" && o !== null && typeof(o.gameModes) != "undefined" && o.gameModes !== null && typeof(o.gameModes.SQRUSH) != "undefined" && o.gameModes.SQRUSH !== null) ? o.gameModes.SQRUSH : null)}, "gameReport": ((typeof(o) != "undefined" && o !== null && typeof(o.gameReport) != "undefined" && o.gameReport !== null) ? o.gameReport : null), "liveupdating": ((typeof(o) != "undefined" && o !== null && typeof(o.liveupdating) != "undefined" && o.liveupdating !== null) ? o.liveupdating : null), "scoreboard": ((typeof(o) != "undefined" && o !== null && typeof(o.scoreboard) != "undefined" && o.scoreboard !== null) ? o.scoreboard : null), "server": ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null) ? o.server : null), "showplayers": ((typeof(o) != "undefined" && o !== null && typeof(o.showplayers) != "undefined" && o.showplayers !== null) ? o.showplayers : null), "squadLetters": ((typeof(l_squadLetters) != "undefined" && l_squadLetters !== null) ? l_squadLetters : null)}, b, kwargs));
	return c.join('');
}
;
serverguide.scoreboard.surface_27_2 = new Surface.SingleSurface("serverguide.scoreboard.surface_27_2");
serverguide.scoreboard.surface_27_2.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_scoreboard;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.scoreboard');
	c.push("<surf:container id=\"serverguide-scoreboard\"");
	c.push(">");
	var l_for_serverguide_scoreboard_44_14_list;
	var l_for_serverguide_scoreboard_55_14_iteration;
	var l_level_progress;
	var l_soldierSlots;
	var l_for_serverguide_scoreboard_120_30_iteration;
	var l_for_serverguide_scoreboard_45_18_list;
	var l_for_serverguide_scoreboard_83_42_list;
	var l_for_serverguide_scoreboard_120_30_list;
	var l_sort_column;
	var l_for_serverguide_scoreboard_83_42_iteration;
	var l_for_serverguide_scoreboard_55_14_list;
	var l_for_serverguide_scoreboard_55_14_isEven;
	if ((S.compat.gt(S.Modifier.count(o.scoreboard), 0) && S.compat.eq(S.Modifier.get(o.scoreboard, "status"), "OK"))) {
		c.push(" <div id=\"live-header\">\n <h2>");
		c.push(Surface.valOut("Scoreboard"));
		c.push("</h2>\n <div id=\"live-selector\">\n <p>");
		c.push(Surface.valOut("Live update"));
		c.push("</p>\n <ul class=\"common-selector\">\n <li id=\"live-selector-on\"");
		if (o.liveupdating) {
			c.push(" class=\"selected\"");
		}
		c.push("><div>On</div></li>\n <li id=\"live-selector-off\"");
		if (!(o.liveupdating)) {
			c.push(" class=\"selected\"");
		}
		c.push("><div>Off</div></li>\n </ul>\n </div>\n </div>\n");
		if (S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.GUNMASTER)) {
			c.push("\n");
			l_level_progress = [];
			l_for_serverguide_scoreboard_44_14_list = S.Modifier.get(o.scoreboard.result, "teams");
			if (S.compat.gt(S.Modifier.count(l_for_serverguide_scoreboard_44_14_list), 0)) {
				for (var l_for_serverguide_scoreboard_44_14_key in l_for_serverguide_scoreboard_44_14_list) {
					if (!Surface.isValidLoopItem(l_for_serverguide_scoreboard_44_14_list[l_for_serverguide_scoreboard_44_14_key])) {
						continue;
					}
					var l_team = l_for_serverguide_scoreboard_44_14_list[l_for_serverguide_scoreboard_44_14_key];
					l_for_serverguide_scoreboard_45_18_list = S.Modifier.multisort(S.Modifier.get(l_team, "players"), "gunMasterLevel", "desc");
					if (S.compat.gt(S.Modifier.count(l_for_serverguide_scoreboard_45_18_list), 0)) {
						for (var l_for_serverguide_scoreboard_45_18_key in l_for_serverguide_scoreboard_45_18_list) {
							if (!Surface.isValidLoopItem(l_for_serverguide_scoreboard_45_18_list[l_for_serverguide_scoreboard_45_18_key])) {
								continue;
							}
							var l_player = l_for_serverguide_scoreboard_45_18_list[l_for_serverguide_scoreboard_45_18_key];
							c.push("\n");
							l_level_progress = S.Modifier.set(l_level_progress, S.compat.sub(l_player.gunMasterLevel, 1), S.Modifier.append(S.Modifier.get(l_level_progress, S.compat.sub(l_player.gunMasterLevel, 1), []), {"personaId": l_player.personaId, "personaName": l_player.name}));
							c.push(" ");
						}
					}
					c.push("\n");
				}
			}
			c.push(" ");
			c.push(Surface.importTemplate(("serverguide" + ("." + "gunmasterprogress")), {"level_progress": l_level_progress}, null, kwargs));
			c.push("\n");
		}
		c.push("\n <ul class=\"teams-list\">\n");
		l_for_serverguide_scoreboard_55_14_list = S.Modifier.get(o.scoreboard.result, "teams");
		l_for_serverguide_scoreboard_55_14_iteration = 0;
		if (S.compat.gt(S.Modifier.count(l_for_serverguide_scoreboard_55_14_list), 0)) {
			for (var l_for_serverguide_scoreboard_55_14_key in l_for_serverguide_scoreboard_55_14_list) {
				if (!Surface.isValidLoopItem(l_for_serverguide_scoreboard_55_14_list[l_for_serverguide_scoreboard_55_14_key])) {
					continue;
				}
				var l_team = l_for_serverguide_scoreboard_55_14_list[l_for_serverguide_scoreboard_55_14_key];
				l_for_serverguide_scoreboard_55_14_iteration = S.compat.add(l_for_serverguide_scoreboard_55_14_iteration, 1);
				l_for_serverguide_scoreboard_55_14_isEven = S.compat.eq(Surface.modulo(l_for_serverguide_scoreboard_55_14_iteration, 2), 0);
				c.push(" <li class=\"team-col");
				if (l_for_serverguide_scoreboard_55_14_isEven) {
					c.push(" inverted");
				}
				c.push("\">\n <h3>\n");
				if ((S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.RUSH) || S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.SQRUSH))) {
					c.push(" ");
					c.push(Surface.valOut(l_team.status.teamType));
					c.push("\n");
				}
				else if (S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.SQDM)) {
					c.push(" ");
					c.push(Surface.valOut("Squad"));
					c.push(" ");
					c.push(Surface.valOut(S.Modifier.get(o.squadLetters, l_team.status.teamId, "")));
					c.push("\n");
				}
				else if (((((S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.CONQUEST) || S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.CONQUESTLARGE)) || S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.CONQUESTASSAULTLARGE)) || S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.CONQUESTASSAULTSMALL)) || ((S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.DOMINATION) || S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.AIRSUPERIORITY)) || S.compat.eq(o.scoreboard.result.gameMode, 131072)))) {
					c.push("\n");
					if ((typeof(l_team) != "undefined" && l_team !== null && typeof(l_team.status) != "undefined" && l_team.status !== null && typeof(l_team.status.faction) != "undefined" && l_team.status.faction !== null)) {
						c.push(" ");
						c.push(Surface.valOut(S.Modifier.get(o.faction, l_team.status.faction)));
						c.push("\n");
					}
					else {
						c.push(" ");
						c.push(Surface.valOut("Team"));
						c.push(" ");
						c.push(Surface.valOut(l_team.status.teamId));
						c.push("\n");
					}
				}
				else {
					c.push(" ");
					c.push(Surface.valOut("Team"));
					c.push(" ");
					c.push(Surface.valOut(S.Modifier.get(o.squadLetters, l_team.status.teamId, "")));
					c.push("\n");
				}
				c.push("\n");
				if (S.compat.neq(o.scoreboard.result.gameMode, o.gameModes.GUNMASTER)) {
					c.push(" <span>\n");
					if (((S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.RUSH) || S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.SQRUSH)) && S.compat.eq(S.Modifier.upper(l_team.status.teamType), "DEFENDERS"))) {
						c.push(" <ul class=\"rush-mcoms\">\n");
						l_for_serverguide_scoreboard_83_42_list = S.Modifier.range(1, S.compat.sub(l_team.status.ticketsMax, 1));
						l_for_serverguide_scoreboard_83_42_iteration = 0;
						if (S.compat.gt(S.Modifier.count(l_for_serverguide_scoreboard_83_42_list), 0)) {
							for (var l_for_serverguide_scoreboard_83_42_key in l_for_serverguide_scoreboard_83_42_list) {
								if (!Surface.isValidLoopItem(l_for_serverguide_scoreboard_83_42_list[l_for_serverguide_scoreboard_83_42_key])) {
									continue;
								}
								var l_i = l_for_serverguide_scoreboard_83_42_list[l_for_serverguide_scoreboard_83_42_key];
								l_for_serverguide_scoreboard_83_42_iteration = S.compat.add(l_for_serverguide_scoreboard_83_42_iteration, 1);
								c.push(" <li");
								if (S.compat.gt(l_i, S.compat.sub(l_team.status.ticketsMax, l_team.status.tickets))) {
									c.push(" class=\"active\"");
								}
								c.push(">Objective ");
								c.push(Surface.valOut(l_for_serverguide_scoreboard_83_42_iteration));
								c.push("</li>\n ");
							}
						}
						c.push("\n </ul>\n");
					}
					else if (S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.CAPTURETHEFLAG)) {
						c.push(" ");
						c.push(Surface.valOut(l_team.status.flags));
						c.push(" / ");
						c.push(Surface.valOut(l_team.status.flagsMax));
						c.push("\n");
					}
					else {
						c.push(" <div class=\"tickets-max\">");
						c.push(Surface.valOut(l_team.status.ticketsMax));
						c.push("</div>\n ");
						c.push(Surface.importTemplate(("common" + ("." + "percentbar")), {"width": "100px", "value": l_team.status.tickets, "max": l_team.status.ticketsMax}, null, kwargs));
						c.push("\n");
						c.push(Surface.valOut(l_team.status.tickets));
						c.push("\n");
					}
					c.push(" </span>\n ");
				}
				c.push("\n </h3>\n <table class=\"common-table players-score-table\" cellpadding=\"0\">\n <thead>\n <tr>\n <th class=\"player-position\">#</th>\n");
				if ((S.compat.neq(o.scoreboard.result.gameMode, o.gameModes.SQRUSH) && S.compat.neq(o.scoreboard.result.gameMode, o.gameModes.SQDM))) {
					c.push(" <th class=\"player-squad\">");
					c.push(Surface.valOut("Sq"));
					c.push("</th>\n");
				}
				c.push(" <th class=\"player-name align-left\">");
				c.push(Surface.valOut("Soldier Name"));
				c.push("</th>\n");
				if (S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.GUNMASTER)) {
					c.push(" <th class=\"player-level\">");
					c.push(Surface.valOut("Level"));
					c.push("</th>\n");
				}
				c.push(" <th class=\"player-kills\">");
				c.push(Surface.valOut("K"));
				c.push("</th>\n <th class=\"player-deaths\">");
				c.push(Surface.valOut("D"));
				c.push("</th>\n <th class=\"player-score last\">");
				c.push(Surface.valOut("Score"));
				c.push("</th>\n </tr>\n </thead>\n <tbody>\n");
				if (S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.GUNMASTER)) {
					l_sort_column = "gunMasterLevel";
				}
				else {
					l_sort_column = "score";
				}
				c.push("\n");
				l_for_serverguide_scoreboard_120_30_list = S.Modifier.multisort(S.Modifier.get(l_team, "players"), l_sort_column, "desc");
				l_for_serverguide_scoreboard_120_30_iteration = 0;
				if (S.compat.gt(S.Modifier.count(l_for_serverguide_scoreboard_120_30_list), 0)) {
					for (var l_for_serverguide_scoreboard_120_30_key in l_for_serverguide_scoreboard_120_30_list) {
						if (!Surface.isValidLoopItem(l_for_serverguide_scoreboard_120_30_list[l_for_serverguide_scoreboard_120_30_key])) {
							continue;
						}
						var l_player = l_for_serverguide_scoreboard_120_30_list[l_for_serverguide_scoreboard_120_30_key];
						l_for_serverguide_scoreboard_120_30_iteration = S.compat.add(l_for_serverguide_scoreboard_120_30_iteration, 1);
						c.push(" <tr id=\"p-");
						c.push(Surface.valOut(l_player.personaId));
						c.push("\" class=\"squad-");
						c.push(Surface.valOut(l_team.status.teamId));
						c.push("-");
						c.push(Surface.valOut(S.Modifier.get(l_player, "squad", 0)));
						c.push("\" data-personaId=\"");
						c.push(Surface.valOut(l_player.personaId));
						c.push("\">\n <td>");
						c.push(Surface.valOut(l_for_serverguide_scoreboard_120_30_iteration));
						c.push("</td>\n");
						if ((S.compat.neq(o.scoreboard.result.gameMode, o.gameModes.SQRUSH) && S.compat.neq(o.scoreboard.result.gameMode, o.gameModes.SQDM))) {
							c.push(" <td>\n");
							if (S.compat.neq(((typeof(l_player) != "undefined" && l_player !== null && typeof(l_player.squad) != "undefined" && l_player.squad !== null) ? l_player.squad : 0), 0)) {
								c.push(" <div class=\"squad-box\">");
								c.push(Surface.valOut(S.Modifier.get(o.squadLetters, S.Modifier.get(l_player, "squad", 0), "")));
								c.push("</div>\n");
							}
							c.push(" </td>\n");
						}
						c.push(" <td class=\"player-name align-left\">\n ");
						c.push(Surface.importTemplate(("profile" + ("." + "showrank")), {"rank": S.Modifier.get(l_player, "rank", "0"), "rank_game": S.Modifier.get(o.gameReport, "game", 2), "rank_size": "tiny", "tag_class": "player-rank"}, null, kwargs));
						c.push("\n <p>\n <a href=\"");
						c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/soldier/{personaName}/stats/{personaId}/{platform}/", Surface.urlContext, {"personaName": S.Modifier.get(l_player, "name", false), "personaId": S.Modifier.get(l_player, "personaId"), "platform": S.Modifier.get(o.server, "platform", S.Modifier.get(l_player, "platform", "missing3"))})));
						c.push("\">\n");
						if (S.compat.gt(S.Modifier.count(S.Modifier.get(l_player, "tag")), 0)) {
							c.push(" [");
							c.push(Surface.valOut(l_player.tag));
							c.push("]\n");
						}
						c.push(" ");
						c.push(Surface.valOut(S.Modifier.get(l_player, "name", "Unknown player")));
						c.push("\n </a>\n </p>\n </td>\n");
						if (S.compat.eq(o.scoreboard.result.gameMode, o.gameModes.GUNMASTER)) {
							c.push(" <td>");
							c.push(Surface.valOut(l_player.gunMasterLevel));
							c.push("</td>\n");
						}
						c.push(" <td>");
						c.push(Surface.valOut(l_player.kills));
						c.push("</td>\n <td>");
						c.push(Surface.valOut(l_player.deaths));
						c.push("</td>\n <td>");
						c.push(Surface.valOut(l_player.score));
						c.push("</td>\n </tr>\n");
					}
				}
				c.push(" </tbody>\n </table>\n </li>\n ");
			}
		}
		c.push("\n </ul>\n");
	}
	else if (S.compat.gt(S.Modifier.count(o.showplayers), 0)) {
		c.push(" <div class=\"serverinfo-players-all\">\n");
		if ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null)) {
			l_soldierSlots = $S.callFunction("serverguide.getServerSlots", o.server, 2, b, kwargs);
			c.push(" <h2>");
			c.push(Surface.valOut(l_soldierSlots.current));
			c.push(" ");
			c.push(Surface.valOut(S.Modifier.pluralize(l_soldierSlots.current, "Player", "players in total")));
			c.push("</h2>\n");
			if (S.compat.gt(l_soldierSlots.current, 0)) {
				c.push(" <div id=\"serverinfo-players-all-wrapper\"></div>\n <div id=\"serverinfo-players-all-view\" class=\"base-link\" data-numPlayers=\"");
				c.push(Surface.valOut(l_soldierSlots.current));
				c.push("\" data=\"");
				c.push(Surface.valOut(o.server.guid));
				c.push("\">");
				c.push(Surface.valOut("Show"));
				c.push(" ");
				c.push(Surface.valOut(S.Modifier.pluralize(l_soldierSlots.current, "Player", "all players")));
				c.push("</div>\n <div id=\"serverinfo-players-all-hide\" class=\"base-link\">");
				c.push(Surface.valOut("Hide"));
				c.push(" ");
				c.push(Surface.valOut(S.Modifier.pluralize(l_soldierSlots.current, "Player", "all players")));
				c.push("</div>\n");
			}
		}
		c.push(" </div>\n");
	}
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.scoreboard", "surface_27_2", "serverguide-scoreboard", o, b);
	return c.join('');
}
;
;var block_serverguide_serverinfoscore = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('serverinfoscore'));
serverguide.serverinfoscore.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_serverinfoscore;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.serverinfoscore');
	var l_squadLetters;
	c.push("\n");
	l_squadLetters = {0: "", 1: "A", 2: "B", 3: "C", 4: "D", 5: "E", 6: "F", 7: "G", 8: "H", 9: "I", 10: "J", 11: "K", 12: "L", 13: "M", 14: "N", 15: "O", 16: "P", 17: "Q", 18: "R", 19: "S", 20: "T", 21: "U", 22: "V", 23: "W", 24: "X", 25: "Y", 26: "Z", 27: "1", 28: "2", 29: "3", 30: "4", 31: "5", 32: "6", 33: "7", 34: "8", 35: "9", 36: "0"};
	c.push("\n");
	c.push(serverguide.serverinfoscore.surface_10_2.render({"errormessage": ((typeof(o) != "undefined" && o !== null && typeof(o.errormessage) != "undefined" && o.errormessage !== null) ? o.errormessage : null), "scoreboard": ((typeof(o) != "undefined" && o !== null && typeof(o.scoreboard) != "undefined" && o.scoreboard !== null) ? o.scoreboard : null), "squadLetters": ((typeof(l_squadLetters) != "undefined" && l_squadLetters !== null) ? l_squadLetters : null)}, b, kwargs));
	return c.join('');
}
;
serverguide.serverinfoscore.surface_10_2 = new Surface.SingleSurface("serverguide.serverinfoscore.surface_10_2");
serverguide.serverinfoscore.surface_10_2.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_serverinfoscore;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.serverinfoscore');
	c.push("<surf:container id=\"selected-server-scoreboard\"");
	c.push(">");
	var l_team2;
	var l_for_serverguide_serverinfoscore_92_26_list;
	var l_team1;
	var l_team_status;
	var l_for_serverguide_serverinfoscore_52_34_list;
	var l_number_of_players;
	var l_for_serverguide_serverinfoscore_70_26_list;
	var l_for_serverguide_serverinfoscore_86_26_list;
	var l_level_progress;
	var l_for_serverguide_serverinfoscore_85_22_list;
	var l_for_serverguide_serverinfoscore_52_34_iteration;
	c.push(" <div class=\"base-box-push\">\n <div id=\"serverinfo-scoreboard\" class=\"base-box-push-inner\">\n <h2>");
	c.push(Surface.valOut("Scoreboard"));
	c.push("</h2>\n");
	if ((S.compat.gt(S.Modifier.count(o.scoreboard), 0) && S.compat.eq(S.Modifier.get(o.scoreboard, "status"), "OK"))) {
		if ((((((((((S.compat.eq(o.scoreboard.result.gameMode, 1) || S.compat.eq(o.scoreboard.result.gameMode, 32)) || S.compat.eq(o.scoreboard.result.gameMode, 64)) || S.compat.eq(o.scoreboard.result.gameMode, 128)) || S.compat.eq(o.scoreboard.result.gameMode, 256)) || S.compat.eq(o.scoreboard.result.gameMode, 1024)) || S.compat.eq(o.scoreboard.result.gameMode, 2048)) || S.compat.eq(o.scoreboard.result.gameMode, 131072)) || S.compat.eq(o.scoreboard.result.gameMode, 4194304)) || S.compat.eq(o.scoreboard.result.gameMode, 8388608))) {
			c.push("\n <ul class=\"conquest\">\n <li class=\"team1\">\n");
			l_team_status = S.Modifier.get(S.Modifier.get(o.scoreboard.result.teams, 0), "status");
			c.push(" <h4>");
			c.push(Surface.valOut("US"));
			c.push("</h4>\n <div class=\"current-score\">\n <p>");
			c.push(Surface.valOut(S.Modifier.get(l_team_status, "tickets")));
			c.push("<span>");
			c.push(Surface.valOut(S.Modifier.get(l_team_status, "ticketsMax")));
			c.push("</span></p>\n ");
			c.push(Surface.importTemplate(("common" + ("." + "percentbar")), {"width": "62px", "value": S.Modifier.get(l_team_status, "tickets"), "max": S.Modifier.get(l_team_status, "ticketsMax")}, null, kwargs));
			c.push("\n </div>\n </li>\n <li class=\"team2\">\n");
			l_team_status = S.Modifier.get(S.Modifier.get(o.scoreboard.result.teams, 1), "status");
			c.push(" <h4>");
			c.push(Surface.valOut("RU"));
			c.push("</h4>\n <div class=\"current-score\">\n <p>");
			c.push(Surface.valOut(S.Modifier.get(l_team_status, "tickets")));
			c.push("<span>");
			c.push(Surface.valOut(S.Modifier.get(l_team_status, "ticketsMax")));
			c.push("</span></p>\n ");
			c.push(Surface.importTemplate(("common" + ("." + "percentbar")), {"width": "62px", "value": S.Modifier.get(l_team_status, "tickets"), "max": S.Modifier.get(l_team_status, "ticketsMax")}, null, kwargs));
			c.push("\n </div>\n </li>\n </ul>\n");
		}
		else if ((S.compat.eq(o.scoreboard.result.gameMode, 2) || S.compat.eq(o.scoreboard.result.gameMode, 4))) {
			c.push(" <ul class=\"rush\">\n <li class=\"team2\">\n <h4>");
			c.push(Surface.valOut("Defenders"));
			c.push("</h4>\n <ol class=\"objectives\">\n");
			l_for_serverguide_serverinfoscore_52_34_list = S.Modifier.range(1, S.compat.sub(S.Modifier.get(S.Modifier.get(S.Modifier.get(o.scoreboard.result.teams, 1), "status"), "ticketsMax"), 1));
			l_for_serverguide_serverinfoscore_52_34_iteration = 0;
			if (S.compat.gt(S.Modifier.count(l_for_serverguide_serverinfoscore_52_34_list), 0)) {
				for (var l_for_serverguide_serverinfoscore_52_34_key in l_for_serverguide_serverinfoscore_52_34_list) {
					if (!Surface.isValidLoopItem(l_for_serverguide_serverinfoscore_52_34_list[l_for_serverguide_serverinfoscore_52_34_key])) {
						continue;
					}
					var l_i = l_for_serverguide_serverinfoscore_52_34_list[l_for_serverguide_serverinfoscore_52_34_key];
					l_for_serverguide_serverinfoscore_52_34_iteration = S.compat.add(l_for_serverguide_serverinfoscore_52_34_iteration, 1);
					c.push(" <li class=\"");
					if (S.compat.gt(l_i, S.compat.sub(S.Modifier.get(S.Modifier.get(S.Modifier.get(o.scoreboard.result.teams, 1), "status"), "ticketsMax"), S.Modifier.get(S.Modifier.get(S.Modifier.get(o.scoreboard.result.teams, 1), "status"), "tickets")))) {
						c.push("active");
					}
					else {
						c.push("destroyed");
					}
					c.push("\">\n Objective ");
					c.push(Surface.valOut(l_for_serverguide_serverinfoscore_52_34_iteration));
					c.push("</li>\n");
				}
			}
			c.push(" </ol>\n </li>\n <li class=\"team1\">\n <h4>");
			c.push(Surface.valOut("Attackers"));
			c.push("</h4>\n <div class=\"current-score\">\n");
			l_team_status = S.Modifier.get(S.Modifier.get(o.scoreboard.result.teams, 0), "status");
			c.push(" <p>");
			c.push(Surface.valOut(S.Modifier.get(l_team_status, "tickets")));
			c.push("<span>");
			c.push(Surface.valOut(S.Modifier.get(l_team_status, "ticketsMax")));
			c.push("</span></p>\n ");
			c.push(Surface.importTemplate(("common" + ("." + "percentbar")), {"width": "135px", "value": S.Modifier.get(l_team_status, "tickets"), "max": S.Modifier.get(l_team_status, "ticketsMax")}, null, kwargs));
			c.push("\n </div>\n </li>\n </ul>\n");
		}
		else if (S.compat.eq(o.scoreboard.result.gameMode, 8)) {
			c.push(" <ul class=\"sqdm\">\n");
			l_for_serverguide_serverinfoscore_70_26_list = S.Modifier.get(o.scoreboard.result, "teams");
			if (S.compat.gt(S.Modifier.count(l_for_serverguide_serverinfoscore_70_26_list), 0)) {
				for (var l_for_serverguide_serverinfoscore_70_26_key in l_for_serverguide_serverinfoscore_70_26_list) {
					if (!Surface.isValidLoopItem(l_for_serverguide_serverinfoscore_70_26_list[l_for_serverguide_serverinfoscore_70_26_key])) {
						continue;
					}
					var l_team = l_for_serverguide_serverinfoscore_70_26_list[l_for_serverguide_serverinfoscore_70_26_key];
					c.push(" <li>\n <h4>");
					c.push(Surface.valOut("Squad"));
					c.push(" ");
					c.push(Surface.valOut(S.Modifier.get(o.squadLetters, l_team.status.teamId, "")));
					c.push("</h4>\n <div class=\"current-score\">\n <p>");
					c.push(Surface.valOut(l_team.status.tickets));
					c.push("</p>\n ");
					c.push(Surface.importTemplate(("common" + ("." + "percentbar")), {"width": "140px", "value": l_team.status.tickets, "max": l_team.status.ticketsMax}, null, kwargs));
					c.push("\n </div>\n </li>\n");
				}
			}
			c.push(" </ul>\n");
		}
		else if (S.compat.eq(o.scoreboard.result.gameMode, 512)) {
			l_level_progress = [];
			c.push("\n");
			l_for_serverguide_serverinfoscore_85_22_list = S.Modifier.get(o.scoreboard.result, "teams");
			if (S.compat.gt(S.Modifier.count(l_for_serverguide_serverinfoscore_85_22_list), 0)) {
				for (var l_for_serverguide_serverinfoscore_85_22_key in l_for_serverguide_serverinfoscore_85_22_list) {
					if (!Surface.isValidLoopItem(l_for_serverguide_serverinfoscore_85_22_list[l_for_serverguide_serverinfoscore_85_22_key])) {
						continue;
					}
					var l_team = l_for_serverguide_serverinfoscore_85_22_list[l_for_serverguide_serverinfoscore_85_22_key];
					l_for_serverguide_serverinfoscore_86_26_list = S.Modifier.multisort(S.Modifier.get(l_team, "players"), "gunMasterLevel", "desc");
					if (S.compat.gt(S.Modifier.count(l_for_serverguide_serverinfoscore_86_26_list), 0)) {
						for (var l_for_serverguide_serverinfoscore_86_26_key in l_for_serverguide_serverinfoscore_86_26_list) {
							if (!Surface.isValidLoopItem(l_for_serverguide_serverinfoscore_86_26_list[l_for_serverguide_serverinfoscore_86_26_key])) {
								continue;
							}
							var l_player = l_for_serverguide_serverinfoscore_86_26_list[l_for_serverguide_serverinfoscore_86_26_key];
							l_number_of_players = S.Modifier.get(l_level_progress, l_player.gunMasterLevel, 0);
							l_level_progress = S.Modifier.set(l_level_progress, l_player.gunMasterLevel, S.compat.add(l_number_of_players, 1));
						}
					}
				}
			}
			c.push(" <ul class=\"gm\">\n");
			l_for_serverguide_serverinfoscore_92_26_list = S.Modifier.to(1, 17);
			if (S.compat.gt(S.Modifier.count(l_for_serverguide_serverinfoscore_92_26_list), 0)) {
				for (var l_for_serverguide_serverinfoscore_92_26_key in l_for_serverguide_serverinfoscore_92_26_list) {
					if (!Surface.isValidLoopItem(l_for_serverguide_serverinfoscore_92_26_list[l_for_serverguide_serverinfoscore_92_26_key])) {
						continue;
					}
					var l_level = l_for_serverguide_serverinfoscore_92_26_list[l_for_serverguide_serverinfoscore_92_26_key];
					c.push(" <li");
					if (S.compat.gt(S.Modifier.get(l_level_progress, l_level), 0)) {
						c.push(" class=\"completed\"");
					}
					c.push(">Player</li>\n");
				}
			}
			c.push(" </ul>\n");
		}
		else if (S.compat.eq(o.scoreboard.result.gameMode, 524288)) {
			l_team1 = S.Modifier.get(o.scoreboard.result.teams, 0);
			l_team2 = S.Modifier.get(o.scoreboard.result.teams, 1);
			c.push(" <ul class=\"conquest ctf\">\n <li class=\"team1\">\n <h4>");
			c.push(Surface.valOut("US"));
			c.push("</h4>\n <div class=\"current-score\">\n ");
			c.push(Surface.valOut(l_team1.status.flags));
			c.push(" / ");
			c.push(Surface.valOut(l_team1.status.flagsMax));
			c.push("\n </div>\n </li>\n <li class=\"team2\">\n <h4>");
			c.push(Surface.valOut("RU"));
			c.push("</h4>\n <div class=\"current-score\">\n ");
			c.push(Surface.valOut(l_team2.status.flags));
			c.push(" / ");
			c.push(Surface.valOut(l_team1.status.flagsMax));
			c.push("\n </div>\n </li>\n </ul>\n");
		}
	}
	else if (S.compat.gt(S.Modifier.count(o.errormessage), 0)) {
		c.push(" <p class=\"info\">");
		c.push(Surface.valOut((S.translations[o.errormessage] || o.errormessage)));
		c.push("</p>\n");
	}
	else {
		c.push(" <img id=\"loader-spinner\" src=\"");
		c.push(Surface.valOut($S.callFunction("base.asset", "/public/serverguide/invited_loader.gif", b, kwargs)));
		c.push("\" />\n");
	}
	c.push(" <div class=\"clear\"></div>\n </div>\n </div>\n");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.serverinfoscore", "surface_10_2", "selected-server-scoreboard", o, b);
	return c.join('');
}
;
;var block_serverguide_serverlist2 = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('serverlist2'));
serverguide.serverlist2.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_serverlist2;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.serverlist2');
	var l_favGuids;
	var l_realm;
	c.push("\n");
	l_favGuids = S.Modifier.get(Surface.globalContext, "favGuids");
	l_realm = S.Modifier.get(Surface.globalContext, "realm");
	c.push("\n <div class=\"serverguide-headercells ");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.showFriendFavs) != "undefined" && o.showFriendFavs !== null) ? o.showFriendFavs : false)) {
		c.push("special-column");
	}
	c.push("\">\n <div class=\"serverguide-headercell serverguide-cell-name serverguide-name-header\">\n <span>");
	c.push(Surface.valOut("Server"));
	c.push("</span>\n <div class=\"serverguide-name-header-sorting-extra\">");
	c.push(Surface.valOut("Sort by"));
	c.push(": <a class=\"serverguide-sorting-name serverguide-sorter\">");
	c.push(Surface.valOut("Name"));
	c.push("</a>, <a class=\"serverguide-sorting-mode serverguide-sorter\">");
	c.push(Surface.valOut("Mode"));
	c.push("</a>, <a class=\"serverguide-sorting-map serverguide-sorter\">");
	c.push(Surface.valOut("Map"));
	c.push("</a>, <a class=\"serverguide-sorting-friend serverguide-sorter\">");
	c.push(Surface.valOut("Friends"));
	c.push("</a></div>\n </div>\n <div class=\"serverguide-headersep\"></div>\n <div class=\"serverguide-headercell serverguide-cell-players serverguide-players-header serverguide-sorter serverguide-sorting-players\"><span>");
	c.push(Surface.valOut("Players"));
	c.push("</span><div class=\"serverguide-sort-arrow\"></div></div>\n <div class=\"serverguide-headersep\"></div>\n <div class=\"serverguide-headercell serverguide-cell-ranked serverguide-ranked-header serverguide-sorter serverguide-sorting-ranked\" data-tooltip=\"");
	c.push(Surface.valOut("Ranked"));
	c.push("\">&nbsp;<div class=\"serverguide-sort-arrow\"></div></div>\n <div class=\"serverguide-headercell serverguide-cell-pb serverguide-pb-header serverguide-sorter serverguide-sorting-pb\" data-tooltip=\"Punkbuster\">&nbsp;<div class=\"serverguide-sort-arrow\"></div></div>\n <div class=\"serverguide-headercell serverguide-cell-type serverguide-type-header serverguide-sorter serverguide-sorting-type\" data-tooltip=\"");
	c.push(Surface.valOut("Preset"));
	c.push("\">&nbsp;<div class=\"serverguide-sort-arrow\"></div></div>\n <div class=\"serverguide-headersep\"></div>\n <div class=\"serverguide-headercell serverguide-cell-ping serverguide-sorter serverguide-sorting-ping\"><span>");
	c.push(Surface.valOut("Ping"));
	c.push("</span><div class=\"serverguide-sort-arrow\"></div></div>\n <div class=\"serverguide-cellend\"></div>\n </div>\n");
	c.push(serverguide.serverlist2.surface_25_2.render({"favGuids": ((typeof(l_favGuids) != "undefined" && l_favGuids !== null) ? l_favGuids : null), "friendGuids": ((typeof(o) != "undefined" && o !== null && typeof(o.friendGuids) != "undefined" && o.friendGuids !== null) ? o.friendGuids : null), "idxOffset": ((typeof(o) != "undefined" && o !== null && typeof(o.idxOffset) != "undefined" && o.idxOffset !== null) ? o.idxOffset : null), "realm": {"game": ((typeof(l_realm) != "undefined" && l_realm !== null && typeof(l_realm.game) != "undefined" && l_realm.game !== null) ? l_realm.game : null)}, "serverguideTab": ((typeof(o) != "undefined" && o !== null && typeof(o.serverguideTab) != "undefined" && o.serverguideTab !== null) ? o.serverguideTab : null), "servers": ((typeof(o) != "undefined" && o !== null && typeof(o.servers) != "undefined" && o.servers !== null) ? o.servers : null), "startExpanded": ((typeof(o) != "undefined" && o !== null && typeof(o.startExpanded) != "undefined" && o.startExpanded !== null) ? o.startExpanded : null)}, b, kwargs));
	return c.join('');
}
;
serverguide.serverlist2.surface_25_2 = new Surface.SingleSurface("serverguide.serverlist2.surface_25_2");
serverguide.serverlist2.surface_25_2.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_serverlist2;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.serverlist2');
	c.push("<surf:container id=\"serverguide-server-list\"");
	c.push(">");
	var l_for_serverguide_serverlist2_34_14_list;
	var l_for_serverguide_serverlist2_34_14_iteration;
	var l_serverss;
	c.push(" <div id=\"serverguide-result\">\n <div id=\"serverguide-listcontainer\">\n");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.serverguideTab) != "undefined" && o.serverguideTab !== null) && S.compat.neq(o.serverguideTab, "history"))) {
		l_serverss = S.Modifier.sort(o.servers, "favoriteByNumFriends", "desc");
	}
	else {
		l_serverss = o.servers;
	}
	c.push("\n");
	l_for_serverguide_serverlist2_34_14_list = l_serverss;
	l_for_serverguide_serverlist2_34_14_iteration = 0;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_serverlist2_34_14_list), 0)) {
		for (var l_idx in l_for_serverguide_serverlist2_34_14_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_serverlist2_34_14_list[l_idx])) {
				continue;
			}
			var l_server = l_for_serverguide_serverlist2_34_14_list[l_idx];
			l_for_serverguide_serverlist2_34_14_iteration = S.compat.add(l_for_serverguide_serverlist2_34_14_iteration, 1);
			o.expand = ((typeof(o) != "undefined" && o !== null && typeof(o.startExpanded) != "undefined" && o.startExpanded !== null) ? o.startExpanded : 0);
			o.ping = "-";
			o.isFavorite = S.Modifier.contains(o.favGuids, l_server.guid);
			o.friendsOnServer = S.Modifier.get(((typeof(o) != "undefined" && o !== null && typeof(o.friendGuids) != "undefined" && o.friendGuids !== null) ? o.friendGuids : []), l_server.guid, []);
			o.formEnabled = 0;
			o.mapinfo = $S.callFunction("common.mapinfo", o.realm.game, l_server.map, b, kwargs);
			o.idx = S.compat.add(S.Modifier.toint(l_idx), ((typeof(o) != "undefined" && o !== null && typeof(o.idxOffset) != "undefined" && o.idxOffset !== null) ? o.idxOffset : 0));
			o.iteration = S.compat.add(l_for_serverguide_serverlist2_34_14_iteration, ((typeof(o) != "undefined" && o !== null && typeof(o.idxOffset) != "undefined" && o.idxOffset !== null) ? o.idxOffset : 0));
			o.favoriteByNumFriends = S.Modifier.get(l_server, "favoriteByNumFriends", false);
			c.push("\n");
			o.server = l_server;
			c.push("\n");
			c.push(Surface.importTemplate(("serverguide" + ("." + "serverrow")), o, null, kwargs));
			c.push("\n");
		}
	}
	c.push(" </div>\n </div>\n");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.serverlist2", "surface_25_2", "serverguide-server-list", o, b);
	return c.join('');
}
;
;var block_serverguide_serverplayerlist = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('serverplayerlist'));
serverguide.serverplayerlist.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_serverplayerlist;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.serverplayerlist');
	var l_for_serverguide_serverplayerlist_23_6_isEven;
	var l_for_serverguide_serverplayerlist_5_6_list;
	var l_usedSlots;
	var l_for_serverguide_serverplayerlist_5_6_iteration;
	var l_for_serverguide_serverplayerlist_23_6_list;
	var l_for_serverguide_serverplayerlist_5_6_isOdd;
	var l_for_serverguide_serverplayerlist_23_6_iteration;
	var l_friendIds;
	var l_for_serverguide_serverplayerlist_23_6_isOdd;
	var l_for_serverguide_serverplayerlist_5_6_isEven;
	c.push("\n");
	l_friendIds = S.Modifier.get(Surface.globalContext, "friendIds");
	if ((typeof(o) != "undefined" && o !== null && typeof(o.players) != "undefined" && o.players !== null)) {
		l_for_serverguide_serverplayerlist_5_6_list = ((typeof(o) != "undefined" && o !== null && typeof(o.players) != "undefined" && o.players !== null) ? o.players : []);
		l_for_serverguide_serverplayerlist_5_6_iteration = 0;
		if (S.compat.gt(S.Modifier.count(l_for_serverguide_serverplayerlist_5_6_list), 0)) {
			for (var l_for_serverguide_serverplayerlist_5_6_key in l_for_serverguide_serverplayerlist_5_6_list) {
				if (!Surface.isValidLoopItem(l_for_serverguide_serverplayerlist_5_6_list[l_for_serverguide_serverplayerlist_5_6_key])) {
					continue;
				}
				var l_player = l_for_serverguide_serverplayerlist_5_6_list[l_for_serverguide_serverplayerlist_5_6_key];
				l_for_serverguide_serverplayerlist_5_6_iteration = S.compat.add(l_for_serverguide_serverplayerlist_5_6_iteration, 1);
				l_for_serverguide_serverplayerlist_5_6_isEven = S.compat.eq(Surface.modulo(l_for_serverguide_serverplayerlist_5_6_iteration, 2), 0);
				l_for_serverguide_serverplayerlist_5_6_isOdd = !(l_for_serverguide_serverplayerlist_5_6_isEven);
				c.push(" <div class=\"serverguide-show-playerrow ");
				if (S.Modifier.contains(l_friendIds, ((typeof(l_player) != "undefined" && l_player !== null && typeof(l_player.userId) != "undefined" && l_player.userId !== null) ? l_player.userId : 0))) {
					c.push("myfriend");
				}
				c.push("\">\n <span ");
				if (l_for_serverguide_serverplayerlist_5_6_isOdd) {
					c.push("class=\"serverguide-show-player-odd\"");
				}
				c.push(">\n ");
				c.push(Surface.importTemplate(("ui" + ("." + "avatar")), {"user": l_player.persona.user, "size": 22}, null, kwargs));
				c.push("\n <div class=\"serverguide-show-player\">\n ");
				c.push(Surface.importTemplate(("common" + ("." + "playername")), {"persona": l_player.persona, "user": l_player.persona.user}, null, kwargs));
				c.push("\n </div>\n <div class=\"serverguide-show-score-container\">\n <div class=\"serverguide-player-score-");
				c.push(Surface.valOut(l_player.persona.personaId));
				c.push("\"></div>\n </div>\n </span>\n </div>\n");
			}
		}
		c.push("\n");
		l_usedSlots = S.compat.sub(((typeof(o) != "undefined" && o !== null && typeof(o.numPlayers) != "undefined" && o.numPlayers !== null) ? o.numPlayers : 0), 1);
		l_for_serverguide_serverplayerlist_23_6_list = S.Modifier.to(S.Modifier.count(((typeof(o) != "undefined" && o !== null && typeof(o.players) != "undefined" && o.players !== null) ? o.players : [])), l_usedSlots);
		l_for_serverguide_serverplayerlist_23_6_iteration = 0;
		if (S.compat.gt(S.Modifier.count(l_for_serverguide_serverplayerlist_23_6_list), 0)) {
			for (var l_for_serverguide_serverplayerlist_23_6_key in l_for_serverguide_serverplayerlist_23_6_list) {
				if (!Surface.isValidLoopItem(l_for_serverguide_serverplayerlist_23_6_list[l_for_serverguide_serverplayerlist_23_6_key])) {
					continue;
				}
				var l_n = l_for_serverguide_serverplayerlist_23_6_list[l_for_serverguide_serverplayerlist_23_6_key];
				l_for_serverguide_serverplayerlist_23_6_iteration = S.compat.add(l_for_serverguide_serverplayerlist_23_6_iteration, 1);
				l_for_serverguide_serverplayerlist_23_6_isEven = S.compat.eq(Surface.modulo(l_for_serverguide_serverplayerlist_23_6_iteration, 2), 0);
				l_for_serverguide_serverplayerlist_23_6_isOdd = !(l_for_serverguide_serverplayerlist_23_6_isEven);
				c.push(" <div class=\"serverguide-show-playerrow\">\n <span ");
				if (l_for_serverguide_serverplayerlist_23_6_isOdd) {
					c.push("class=\"serverguide-show-player-odd\"");
				}
				c.push(">\n ");
				c.push(Surface.importTemplate(("ui" + ("." + "avatar")), {"size": 22}, null, kwargs));
				c.push("\n <div class=\"serverguide-show-player\">\n <div class=\"serverguide-show-player-persona shaded unknown\">");
				c.push(Surface.valOut("Unknown"));
				c.push("</div>\n </div>\n <div class=\"serverguide-show-score-container\">\n <div class=\"serverguide-player-score--\"></div>\n </div>\n </span>\n </div>\n");
			}
		}
	}
	else {
		c.push(" <div class=\"common-spinner\" data-size=\"big\"></div>\n");
	}
	c.push("\n<div style=\"clear:both;\"></div>\n");
	return c.join('');
}
;
;var block_serverguide_serverrow = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('serverrow'));
serverguide.serverrow.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_serverrow;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.serverrow');
	c.push("\n");
	c.push(serverguide.serverrow.surface_3_2.render({"expand": ((typeof(o) != "undefined" && o !== null && typeof(o.expand) != "undefined" && o.expand !== null) ? o.expand : null), "friendsOnServer": ((typeof(o) != "undefined" && o !== null && typeof(o.friendsOnServer) != "undefined" && o.friendsOnServer !== null) ? o.friendsOnServer : null), "idx": ((typeof(o) != "undefined" && o !== null && typeof(o.idx) != "undefined" && o.idx !== null) ? o.idx : null), "iteration": ((typeof(o) != "undefined" && o !== null && typeof(o.iteration) != "undefined" && o.iteration !== null) ? o.iteration : null), "mapinfo": {"imageSmall": ((typeof(o) != "undefined" && o !== null && typeof(o.mapinfo) != "undefined" && o.mapinfo !== null && typeof(o.mapinfo.imageSmall) != "undefined" && o.mapinfo.imageSmall !== null) ? o.mapinfo.imageSmall : null), "name": ((typeof(o) != "undefined" && o !== null && typeof(o.mapinfo) != "undefined" && o.mapinfo !== null && typeof(o.mapinfo.name) != "undefined" && o.mapinfo.name !== null) ? o.mapinfo.name : null)}, "ping": ((typeof(o) != "undefined" && o !== null && typeof(o.ping) != "undefined" && o.ping !== null) ? o.ping : null), "server": ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null) ? o.server : null)}, b, kwargs));
	c.push("\n");
	return c.join('');
}
;
serverguide.serverrow.surface_3_2 = new Surface.SingleSurface("serverguide.serverrow.surface_3_2");
serverguide.serverrow.surface_3_2.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_serverrow;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.serverrow');
	c.push("<");
	c.push("surf:container");
	c.push(" id=\"");
	c.push(S.Modifier.concat("serverguide-server-", o.idx));
	c.push("\"");
	c.push(">");
	var l_lang_country;
	var l_passedExp;
	var l_for_serverguide_serverrow_66_30_list;
	var l_soldierSlots;
	var l_queueSlots;
	var l_numFriendsOnServer;
	c.push(" <div rel=\"");
	c.push(Surface.valOut(o.server.guid));
	c.push("\" class=\"serverguide-surface-finder\"></div>\n");
	c.push("\n");
	l_numFriendsOnServer = S.Modifier.count(o.friendsOnServer);
	c.push(" <div class=\"serverguide-bodycells ");
	if (!(o.server.online)) {
		c.push("offline");
	}
	c.push(" ");
	if (!(o.server.online)) {
		c.push(" serverguide-server-offline");
	}
	c.push(" ");
	if ((o.server.online && S.compat.gt(l_numFriendsOnServer, 0))) {
		c.push("serverguide-server-friends-playing");
	}
	c.push("\" guid=\"");
	c.push(Surface.valOut(o.server.guid));
	c.push("\" ip=\"");
	c.push(Surface.valOut(o.server.ip));
	c.push("\" idx=\"");
	c.push(Surface.valOut(S.compat.sub(o.iteration, 1)));
	c.push("\">\n <div class=\"serverguide-bodycell serverguide-cell-expansion serverguide-cell-noborder\">\n");
	if (o.server.online) {
		c.push(" <div class=\"serverguide-cell-expansion-normal\"\n data-bind-action=\"join-mp-gameserver\"\n data-role=\"");
		c.push(Surface.valOut(1));
		c.push("\"\n data-guid=\"");
		c.push(Surface.valOut(o.server.guid));
		c.push("\"\n data-game=\"");
		c.push(Surface.valOut(o.server.game));
		c.push("\"\n data-platform=\"");
		c.push(Surface.valOut(o.server.platform));
		c.push("\"\n data-track=\"serverbrowser.server.inline.join\"\n data-telemetry-action=\"serverbrowser\">\n <span class=\"");
		c.push(Surface.valOut($S.callFunction("common.getGameIconCSS", o.server.game, o.server.platform, o.server.gameExpansions, b, kwargs)));
		c.push("\"></span>\n <span class=\"");
		c.push(Surface.valOut($S.callFunction("common.getGameIconCSSBright", o.server.game, o.server.platform, o.server.gameExpansions, b, kwargs)));
		c.push("\"></span>\n </div>\n <div class=\"serverguide-cell-expansion-hover\">\n <button href=\"");
		c.push(Surface.valOut($S.callFunction("common.showServerUrlByServer", o.server, b, kwargs)));
		c.push("\" class=\"serverguide-cell-expansion-button-play\"\n data-bind-action=\"join-mp-gameserver\"\n data-role=\"");
		c.push(Surface.valOut(1));
		c.push("\"\n data-guid=\"");
		c.push(Surface.valOut(o.server.guid));
		c.push("\"\n data-game=\"");
		c.push(Surface.valOut(o.server.game));
		c.push("\"\n data-platform=\"");
		c.push(Surface.valOut(o.server.platform));
		c.push("\"\n data-track=\"serverbrowser.server.inline.join\"\n data-telemetry-action=\"serverbrowser\">\n </button>\n </div>\n");
	}
	else {
		c.push(" <span class=\"");
		c.push(Surface.valOut($S.callFunction("common.getGameIconCSS", o.server.game, o.server.platform, o.server.gameExpansions, b, kwargs)));
		c.push("\"></span>\n <span class=\"");
		c.push(Surface.valOut($S.callFunction("common.getGameIconCSSBright", o.server.game, o.server.platform, o.server.gameExpansions, b, kwargs)));
		c.push("\"></span>\n");
	}
	c.push(" </div>\n");
	if (o.server.online) {
		c.push(" <div class=\"serverguide-bodycell serverguide-cell-name\">\n <img src=\"");
		c.push(Surface.valOut($S.callFunction("base.asset", o.mapinfo.imageSmall, b, kwargs)));
		c.push("\" width=\"48\" height=\"33\" alt=\"");
		c.push(Surface.valOut((S.translations[o.mapinfo.name] || o.mapinfo.name)));
		c.push("\" title=\"");
		c.push(Surface.valOut((S.translations[o.mapinfo.name] || o.mapinfo.name)));
		c.push("\" class=\"serverguide-cell-name-server-map-image\" />\n <div class=\"serverguide-cell-name-server-wrapper\">\n");
		if (o.server.hasPassword) {
			c.push(" <div class=\"serverguide-hasPassword\"></div>\n");
		}
		c.push(" <a href=\"");
		c.push(Surface.valOut($S.callFunction("common.showServerUrlByServer", o.server, b, kwargs)));
		c.push("\"\n class=\"base-no-ajax serverguide-cell-name-server-name\">\n ");
		c.push(Surface.importTemplate(("common" + ("." + "servername")), {"name": o.server.name, "first": 28, "limit": 80}, null, kwargs));
		c.push("\n </a>\n <div class=\"base-clear\"></div>\n <div class=\"serverguide-cell-name-server-info\">\n");
		if (((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.country) != "undefined" && o.server.country !== null) ? o.server.country : false)) {
			l_lang_country = $S.callFunction("common.countryName", o.server.country, b, kwargs);
			c.push(" <img src=\"");
			c.push(Surface.valOut($S.callFunction("base.asset", S.Modifier.concat(S.Modifier.concat("/public/common/flags/", S.Modifier.lower(o.server.country)), ".gif"), b, kwargs)));
			c.push("\"\n alt=\"");
			c.push(Surface.valOut(l_lang_country));
			c.push("\"\n data-tooltip=\"");
			c.push(Surface.valOut(l_lang_country));
			c.push("\" />\n");
		}
		c.push(" <span class=\"serverguide-cell-name-server-info-mode\">");
		c.push(Surface.valOut($S.callFunction("serverguide.gameServerModeStringLocalized", o.server.mapMode, o.server.game, b, kwargs)));
		c.push("</span>\n &bull; <span class=\"serverguide-cell-name-server-info-map\">");
		c.push(Surface.valOut(o.mapinfo.name));
		if (S.compat.gt(((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.mapVariant) != "undefined" && o.server.mapVariant !== null) ? o.server.mapVariant : 0), 0)) {
			c.push(" #");
			c.push(Surface.valOut(S.compat.add(o.server.mapVariant, 1)));
		}
		c.push("</span>\n ");
		if (S.compat.gt(l_numFriendsOnServer, 0)) {
			c.push("&bull; <span class=\"serverguide-cell-name-server-info-friend\">");
			c.push(Surface.valOut(l_numFriendsOnServer));
			c.push(" ");
			c.push(Surface.valOut(S.Modifier.pluralize(l_numFriendsOnServer, "friend", "friends")));
			c.push(" ");
			c.push(Surface.valOut("playing"));
			c.push("</span>");
		}
		c.push("\n <div class=\"serverguide-expansions-container\">\n");
		l_passedExp = [];
		l_for_serverguide_serverrow_66_30_list = S.Modifier.sortfast(o.server.gameExpansions);
		if (S.compat.gt(S.Modifier.count(l_for_serverguide_serverrow_66_30_list), 0)) {
			for (var l_for_serverguide_serverrow_66_30_key in l_for_serverguide_serverrow_66_30_list) {
				if (!Surface.isValidLoopItem(l_for_serverguide_serverrow_66_30_list[l_for_serverguide_serverrow_66_30_key])) {
					continue;
				}
				var l_gameExpansion = l_for_serverguide_serverrow_66_30_list[l_for_serverguide_serverrow_66_30_key];
				c.push("\n");
				if (S.compat.neq(S.Modifier.indexOf(l_passedExp, l_gameExpansion), -1)) {
					continue;
				}
				l_passedExp = S.Modifier.append(l_passedExp, l_gameExpansion);
				c.push("\n");
				if (S.compat.neq(l_gameExpansion, Surface.globalContext.staticContext.gameExpansions.VANILLA)) {
					c.push(" ");
					c.push(Surface.importTemplate(("common" + ("." + "gameExpansionImage")), {"game": o.server.game, "expansion": l_gameExpansion, "smallIcons": true}, null, kwargs));
					c.push("\n");
				}
				c.push(" ");
			}
		}
		c.push("\n </div>\n </div>\n </div>\n </div>\n <div class=\"serverguide-bodycell serverguide-cell-players\">\n");
		if (o.server.online) {
			l_soldierSlots = $S.callFunction("serverguide.getServerSlots", o.server, 2, b, kwargs);
			l_queueSlots = $S.callFunction("serverguide.getServerSlots", o.server, 1, b, kwargs);
			c.push(" <span>");
			c.push(Surface.valOut(l_soldierSlots.current));
			c.push(" / ");
			c.push(Surface.valOut(l_soldierSlots.max));
			if (S.compat.gt(l_queueSlots.current, 0)) {
				c.push(" [<abbr title=\"");
				c.push(Surface.valOut(l_queueSlots.current));
				c.push(" ");
				c.push(Surface.valOut("player(s) queued"));
				c.push("\">");
				c.push(Surface.valOut(l_queueSlots.current));
				c.push("</abbr>]");
			}
			c.push("</span>\n");
		}
		c.push(" </div>\n <div class=\"serverguide-bodycell serverguide-cell-ranked-wrapper serverguide-cell-noborder\">\n <div class=\"serverguide-cell-ranked serverguide-ranked-");
		if (o.server.ranked) {
			c.push("on");
		}
		else {
			c.push("off");
		}
		c.push("\" title=\"Ranking ");
		if (o.server.ranked) {
			c.push("on");
		}
		else {
			c.push("off");
		}
		c.push("\"></div>\n </div>\n <div class=\"serverguide-bodycell serverguide-cell-pb-wrapper serverguide-cell-noborder\">\n <div class=\"serverguide-cell-pb ");
		if (o.server.online) {
			c.push("serverguide-punkbuster-");
			if (o.server.punkbuster) {
				c.push("on");
			}
			else {
				c.push("off");
			}
			c.push("\" title=\"Punkbuster ");
			if (o.server.punkbuster) {
				c.push("on");
			}
			else {
				c.push("off");
			}
			c.push("\" ");
		}
		c.push("></div>\n </div>\n <div class=\"serverguide-bodycell serverguide-cell-type-wrapper\">\n <div class=\"serverguide-cell-type serverguide-type-");
		c.push(Surface.valOut($S.callFunction("serverguide.gameServerPresetStringNoLocalization", o.server.preset, b, kwargs)));
		c.push("\" title=\"");
		c.push(Surface.valOut($S.callFunction("serverguide.gameServerPresetStringLocalized", o.server.preset, b, kwargs)));
		c.push("\"></div>\n </div>\n <div class=\"serverguide-bodycell serverguide-cell-ping serverguide-cell-noborder\">\n <div class=\"serverguide-cell-name-server-ping-lines-wrapper");
		if (S.Modifier.isstring(o.ping)) {
		}
		else if (S.compat.lt(o.ping, 80)) {
			c.push(" ping-best");
		}
		else if (S.compat.lt(o.ping, 150)) {
			c.push(" ping-good");
		}
		else if (S.compat.lt(o.ping, 200)) {
			c.push(" ping-bad");
		}
		else {
			c.push(" ping-worst");
		}
		c.push("\">\n <div class=\"serverguide-cell-name-server-ping-line worst\"></div>\n <div class=\"serverguide-cell-name-server-ping-line bad\"></div>\n <div class=\"serverguide-cell-name-server-ping-line good\"></div>\n <div class=\"serverguide-cell-name-server-ping-line best\"></div>\n </div>\n <span>");
		c.push(Surface.valOut(o.ping));
		c.push("</span>\n </div>\n <div class=\"serverguide-cellend\"></div>\n");
		if (o.expand) {
			c.push(" ");
			c.push(Surface.importTemplate(("serverguide" + ("." + "expand")), {"server": o.server, "friendsOnServer": o.friendsOnServer}, null, kwargs));
			c.push("\n");
		}
	}
	else {
		c.push(" <div class=\"serverguide-bodycell serverguide-cell-name-serveroffline\">\n <span class=\"serverguide-serveroffline-name\">\n ");
		c.push(Surface.valOut(o.server.name));
		c.push("\n </span>\n <span class=\"serverguide-serveroffline-status\">\n ");
		c.push(Surface.valOut("Server is offline"));
		c.push("\n </span>\n </div>\n <div class=\"serverguide-cellend\"></div>\n");
	}
	c.push(" </div>\n");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.serverrow", "surface_3_2", S.Modifier.concat("serverguide-server-", o.idx), o, b);
	return c.join('');
}
;
;var block_serverguide_serversettings = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('serversettings'));
serverguide.serversettings.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_serversettings;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.serversettings');
	var l_lang_country;
	var l_gameServerSettings;
	var l_settingValue;
	var l_gameserverDetails;
	var l_for_serverguide_serversettings_10_10_list;
	var l_name;
	var l_filterInfo;
	c.push("\n<ul id=\"server-settings\">\n");
	l_lang_country = $S.callFunction("common.countryName", o.server.country, b, kwargs);
	c.push(" <li>");
	c.push(Surface.valOut(S.Modifier.upper("Region")));
	c.push(" <span>");
	c.push(Surface.valOut($S.callFunction("serverguide.getServerRegionLocalized", o.server.region, b, kwargs)));
	c.push(" - ");
	c.push(Surface.valOut(l_lang_country));
	c.push("</span></li>\n");
	if ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.settings) != "undefined" && o.server.settings !== null)) {
		l_gameserverDetails = $S.callFunction("gamedata.get", o.server.game, "gameserver", b, kwargs);
		l_gameServerSettings = S.Modifier.get(l_gameserverDetails, "gameServerSettings");
		c.push("\n");
		l_for_serverguide_serversettings_10_10_list = o.server.settings;
		if (S.compat.gt(S.Modifier.count(l_for_serverguide_serversettings_10_10_list), 0)) {
			for (var l_settingKey in l_for_serverguide_serversettings_10_10_list) {
				if (!Surface.isValidLoopItem(l_for_serverguide_serversettings_10_10_list[l_settingKey])) {
					continue;
				}
				var l_settingValue = l_for_serverguide_serversettings_10_10_list[l_settingKey];
				l_filterInfo = S.Modifier.get(l_gameServerSettings, l_settingKey);
				if (S.compat.eq(S.Modifier.get(l_filterInfo, "type"), "bool")) {
					if (S.compat.eq(l_settingValue, 1)) {
						l_settingValue = "On";
					}
					else {
						l_settingValue = "Off";
					}
				}
				c.push("\n <li>");
				l_name = S.Modifier.get(l_filterInfo, "name");
				c.push(" ");
				c.push(Surface.valOut((S.translations[l_name] || l_name)));
				c.push("<span>");
				c.push(Surface.valOut(l_settingValue));
				c.push("</span></li>\n");
			}
		}
	}
	c.push("</ul>\n");
	return c.join('');
}
;
;var block_serverguide_show = new Surface.BlockConfig('serverguide.base', {'serverSettings': 'serverguide.show.block_serverSettings', 'mapRotation': 'serverguide.show.block_mapRotation', 'serverguideTitle': 'serverguide.show.block_serverguideTitle', 'serverguideContent': 'serverguide.show.block_serverguideContent', 'serverInfoShort': 'serverguide.show.block_serverInfoShort', 'serverHeader': 'serverguide.show.block_serverHeader', 'titleItem': 'serverguide.show.block_titleItem'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('show'));
serverguide.show.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_show;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.show');
	c.push("\n");
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('serverguide.base', o, b, kwargs);
}
;
serverguide.show.block_titleItem = new Surface.Block('serverguide.show.block_titleItem');
serverguide.show.block_titleItem.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(Surface.valOut(o.server.name));
	c.push(" - ");
	return c.join("");
}
;
serverguide.show.block_serverguideTitle = new Surface.Block('serverguide.show.block_serverguideTitle');
serverguide.show.block_serverguideTitle.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("Server");
	return c.join("");
}
;
serverguide.show.surface_7_6 = new Surface.SingleSurface("serverguide.show.surface_7_6");
serverguide.show.block_serverHeader = new Surface.Block('serverguide.show.block_serverHeader');
serverguide.show.block_serverHeader.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverHeader");
	return c.join("");
}
;
serverguide.show.surface_18_14 = new Surface.SingleSurface("serverguide.show.surface_18_14");
serverguide.show.block_serverInfoShort = new Surface.Block('serverguide.show.block_serverInfoShort');
serverguide.show.block_serverInfoShort.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" GAME SPECIFIC\n");
	return c.join("");
}
;
serverguide.show.block_serverSettings = new Surface.Block('serverguide.show.block_serverSettings');
serverguide.show.block_serverSettings.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" GAME SPECIFIC\n");
	return c.join("");
}
;
serverguide.show.block_mapRotation = new Surface.Block('serverguide.show.block_mapRotation');
serverguide.show.block_mapRotation.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" GAME SPECIFIC\n");
	return c.join("");
}
;
serverguide.show.surface_18_14.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_show;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.show');
	c.push("<surf:container id=\"serverguide-show-info\"");
	c.push(">");
	c.push(" <div id=\"server-info\" class=\"common-box-container\" ip=\"");
	c.push(Surface.valOut(o.server.ip));
	c.push("\">\n <div class=\"common-box-inner\">\n");
	c.push(b.get('serverInfoShort')(o, b, kwargs));
	c.push("\n");
	c.push(b.get('serverSettings')(o, b, kwargs));
	c.push("\n <div class=\"base-clear\"></div>\n");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.extendedInfo) != "undefined" && o.server.extendedInfo !== null && typeof(o.server.extendedInfo.desc) != "undefined" && o.server.extendedInfo.desc !== null) ? o.server.extendedInfo.desc : "")) {
		c.push(" <div id=\"server-description\">\n <h3>");
		c.push(Surface.valOut("Description"));
		c.push("</h3>\n <p>");
		c.push(S.Modifier.nl2br(((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.extendedInfo) != "undefined" && o.server.extendedInfo !== null && typeof(o.server.extendedInfo.desc) != "undefined" && o.server.extendedInfo.desc !== null) ? o.server.extendedInfo.desc : "")));
		c.push("</p>\n </div>\n");
	}
	c.push("\n");
	c.push(b.get('mapRotation')(o, b, kwargs));
	c.push("\n <div class=\"base-clear\"></div>\n </div>\n </div>\n");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.show", "surface_18_14", "serverguide-show-info", o, b);
	return c.join('');
}
;
serverguide.show.surface_7_6.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_show;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.show');
	c.push("<surf:container id=\"serverguide-page\"");
	c.push(">");
	c.push(" <div id=\"server-page\">\n");
	if ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null)) {
		o.server.ping = "-";
		c.push("\n");
		c.push(b.get('serverHeader')(o, b, kwargs));
		c.push("\n");
		c.push(serverguide.show.surface_18_14.render({"server": ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null) ? o.server : null)}, b, kwargs));
		c.push("\n <div id=\"server-players-list\">\n ");
		c.push(Surface.importTemplate(("serverguide" + ("." + "scoreboard")), {"gameModes": o.gameModes, "server": o.server}, null, kwargs));
		c.push("\n </div>\n");
	}
	else {
		c.push(" <div id=\"serverguide-result\">\n <p class=\"serverguide-show-infomsg\">");
		c.push(Surface.valOut("Sorry, this server was not found."));
		c.push("</p>\n </div>\n");
	}
	c.push("\n </div>\n");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.show", "surface_7_6", "serverguide-page", o, b);
	return c.join('');
}
;
serverguide.show.block_serverguideContent = new Surface.Block('serverguide.show.block_serverguideContent');
serverguide.show.block_serverguideContent.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("\n");
	c.push(serverguide.show.surface_7_6.render({"gameModes": ((typeof(o) != "undefined" && o !== null && typeof(o.gameModes) != "undefined" && o.gameModes !== null) ? o.gameModes : null), "server": ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null) ? o.server : null), "session": {"isLoggedIn": ((typeof(o) != "undefined" && o !== null && typeof(o.session) != "undefined" && o.session !== null && typeof(o.session.isLoggedIn) != "undefined" && o.session.isLoggedIn !== null) ? o.session.isLoggedIn : null)}}, b, kwargs));
	return c.join("");
}
;
;var block_serverguide_showserverheader = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('showserverheader'));
serverguide.showserverheader.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_showserverheader;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.showserverheader');
	var l_favGuids;
	var l_currentMapName;
	var l_for_serverguide_showserverheader_29_10_list;
	var l_isFavorite;
	var l_session;
	var l_currentMapInfo;
	c.push("\n<div id=\"server-header\">\n <h1>");
	c.push(Surface.valOut(o.server.name));
	c.push("</h1>\n");
	l_session = S.Modifier.get(Surface.globalContext, "session");
	l_favGuids = S.Modifier.get(Surface.globalContext, "favGuids");
	c.push("\n");
	l_isFavorite = S.Modifier.contains(l_favGuids, o.server.guid);
	if (((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false)) {
		c.push(" <div id=\"serverguide-page-favourite\" class=\"serverguide-add-favorite\">\n <form action=\"");
		c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/gameserverbookmark/toggleFavourite/", Surface.urlContext)));
		c.push("\">\n <input type=\"hidden\" name=\"guid\" value=\"");
		c.push(Surface.valOut(o.server.guid));
		c.push("\" />\n </form>\n <div class=\"serverguide-add-favorite-toggle ");
		if (l_isFavorite) {
			c.push("isFavorite");
		}
		c.push("\">\n <span>");
		if (l_isFavorite) {
			c.push(Surface.valOut("Favorite"));
		}
		else {
			c.push(Surface.valOut("Add as favorite"));
		}
		c.push("</span>\n </div>\n <div class=\"serverguide-add-favorite-loading\">\n <img width=\"16\" height=\"16\" src=\"");
		c.push(Surface.valOut($S.callFunction("base.asset", "/public/base/shared/ajax-loader.gif", b, kwargs)));
		c.push("\" alt=\"");
		c.push(Surface.valOut("Loading..."));
		c.push("\"/>\n </div>\n </div>\n");
	}
	c.push("\n <span class=\"gameicon ");
	c.push(Surface.valOut($S.callFunction("common.getGameIconCSSHorizontal", o.server.game, o.server.platform, o.server.gameExpansions, b, kwargs)));
	c.push("\"></span>\n <p>\n");
	l_currentMapInfo = $S.callFunction("common.mapinfo", o.server.game, o.server.map, b, kwargs);
	l_currentMapName = S.Modifier.get(l_currentMapInfo, "name");
	c.push(" <strong>");
	c.push(Surface.valOut(l_currentMapName));
	if (S.compat.gt(((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.mapVariant) != "undefined" && o.server.mapVariant !== null) ? o.server.mapVariant : 0), 0)) {
		c.push(" #");
		c.push(Surface.valOut(S.compat.add(o.server.mapVariant, 1)));
	}
	c.push("</strong> <span class=\"bullet\">&bull;</span> ");
	c.push(Surface.valOut($S.callFunction("serverguide.gameServerModeStringLocalized", o.server.mapMode, o.server.game, b, kwargs)));
	if (((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.playlist) != "undefined" && o.server.playlist !== null) ? o.server.playlist : false)) {
		c.push(" <span class=\"bullet\">&bull;</span> ");
		c.push(Surface.valOut($S.callFunction("serverguide.playlistStringLocalized", o.server.playlist, b, kwargs)));
	}
	c.push("\n");
	l_for_serverguide_showserverheader_29_10_list = o.server.gameExpansions;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_showserverheader_29_10_list), 0)) {
		for (var l_for_serverguide_showserverheader_29_10_key in l_for_serverguide_showserverheader_29_10_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_showserverheader_29_10_list[l_for_serverguide_showserverheader_29_10_key])) {
				continue;
			}
			var l_gameExpansion = l_for_serverguide_showserverheader_29_10_list[l_for_serverguide_showserverheader_29_10_key];
			if (S.compat.neq(l_gameExpansion, Surface.globalContext.staticContext.gameExpansions.VANILLA)) {
				c.push(" &bull; ");
				c.push(Surface.importTemplate(("common" + ("." + "gameExpansionImage")), {"game": o.server.game, "expansion": l_gameExpansion}, null, kwargs));
				c.push("\n");
			}
		}
	}
	c.push(" </p>\n");
	if ($S.callFunction("serverguide.showJoinButton", o.server, b, kwargs)) {
		c.push(" <button class=\"base-button-arrow-almost-gigantic legacy-server-browser-info-button\n ");
		if (!($S.callFunction("serverguide.enableJoinButton", o.server, b, kwargs))) {
			c.push(" disabled");
		}
		c.push("\"\n data-bind-action=\"join-mp-gameserver\"\n data-role=\"");
		c.push(Surface.valOut(1));
		c.push("\"\n data-guid=\"");
		c.push(Surface.valOut(o.server.guid));
		c.push("\"\n data-gameid=\"");
		c.push(Surface.valOut(o.server.gameId));
		c.push("\"\n data-ip=\"");
		c.push(Surface.valOut(o.server.ip));
		c.push("\"\n data-port=\"");
		c.push(Surface.valOut(o.server.port));
		c.push("\"\n data-game=\"");
		c.push(Surface.valOut(o.server.game));
		c.push("\"\n data-platform=\"");
		c.push(Surface.valOut(o.server.platform));
		c.push("\"\n data-track=\"serverbrowser.server.header.join\">\n ");
		c.push(Surface.valOut("Join server"));
		c.push("\n </button>\n");
	}
	c.push("</div>\n");
	return c.join('');
}
;
;var block_serverguide_showserverinfo = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('showserverinfo'));
serverguide.showserverinfo.surface_1_0 = new Surface.SingleSurface("serverguide.showserverinfo.surface_1_0");
serverguide.showserverinfo.surface_20_60 = new Surface.SingleSurface("serverguide.showserverinfo.surface_20_60");
serverguide.showserverinfo.surface_20_60.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_showserverinfo;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.showserverinfo');
	c.push("<surf:container id=\"serverguide-show-info-ping\"");
	c.push(">");
	c.push(Surface.valOut(o.server.ping));
	c.push(" ms");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.showserverinfo", "surface_20_60", "serverguide-show-info-ping", o, b);
	return c.join('');
}
;
serverguide.showserverinfo.surface_1_0.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_showserverinfo;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.showserverinfo');
	c.push("<surf:container id=\"serverguide-show-info\"");
	c.push(">");
	var l_mapName;
	var l_mapsOnServer;
	var l_mapBubbleInfo;
	var l_soldierSlots;
	var l_for_serverguide_showserverinfo_53_46_list;
	var l_mapInfo;
	var l_queueSlots;
	c.push(" <div id=\"server-info\" class=\"common-box-container\" ip=\"");
	c.push(Surface.valOut(o.server.ip));
	c.push("\">\n <div class=\"common-box-inner\">\n <table id=\"server-info-short\">\n <thead>\n <tr>\n <th>");
	c.push(Surface.valOut("Players"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Ping"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Ranked"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Preset"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Punkbuster"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Password"));
	c.push("</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n");
	l_soldierSlots = $S.callFunction("serverguide.getServerSlots", o.server, 2, b, kwargs);
	l_queueSlots = $S.callFunction("serverguide.getServerSlots", o.server, 1, b, kwargs);
	c.push(" <td id=\"server-info-players\">");
	c.push(Surface.valOut(l_soldierSlots.current));
	c.push(" / ");
	c.push(Surface.valOut(l_soldierSlots.max));
	if (S.compat.gt(l_queueSlots.current, 0)) {
		c.push(" [<abbr title=\"");
		c.push(Surface.valOut(l_queueSlots.current));
		c.push(" ");
		c.push(Surface.valOut("player(s) queued"));
		c.push("\">");
		c.push(Surface.valOut(l_queueSlots.current));
		c.push("</abbr>]");
	}
	c.push("</td>\n <td id=\"server-info-ping\">");
	c.push(serverguide.showserverinfo.surface_20_60.render({"server": ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null) ? o.server : null)}, b, kwargs));
	c.push("</td>\n <td id=\"server-info-ranked\" ");
	if (!(o.server.ranked)) {
		c.push("class=\"server-info-off\"");
	}
	c.push(">");
	if (o.server.ranked) {
		c.push(Surface.valOut("On"));
	}
	else {
		c.push(Surface.valOut("Off"));
	}
	c.push("</td>\n <td id=\"server-info-preset\"");
	if (S.compat.neq(((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.preset) != "undefined" && o.server.preset !== null) ? o.server.preset : 0), 2)) {
		c.push(" class=\"server-info-off\"");
	}
	c.push(">");
	c.push(Surface.valOut($S.callFunction("serverguide.gameServerPresetStringLocalized", ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.preset) != "undefined" && o.server.preset !== null) ? o.server.preset : 1), b, kwargs)));
	c.push("</td>\n <td id=\"server-info-punkbuster\"");
	if (!(o.server.punkbuster)) {
		c.push(" class=\"server-info-off\"");
	}
	c.push(">");
	if (o.server.punkbuster) {
		c.push(Surface.valOut("On"));
	}
	else {
		c.push(Surface.valOut("Off"));
	}
	c.push("</td>\n <td id=\"server-info-password\" class=\"last");
	if (!(o.server.hasPassword)) {
		c.push(" server-info-off");
	}
	c.push("\">");
	if (o.server.hasPassword) {
		c.push(Surface.valOut("On"));
	}
	else {
		c.push(Surface.valOut("Off"));
	}
	c.push("</td>\n </tr>\n </tbody>\n </table>\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "serversettings")), {"server": o.server}, null, kwargs));
	c.push("\n <div class=\"base-clear\"></div>\n");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.extendedInfo) != "undefined" && o.server.extendedInfo !== null && typeof(o.server.extendedInfo.desc) != "undefined" && o.server.extendedInfo.desc !== null) ? o.server.extendedInfo.desc : "")) {
		c.push(" <div id=\"server-description\">\n <h3>");
		c.push(Surface.valOut("Description"));
		c.push("</h3>\n <p>");
		c.push(S.Modifier.nl2br(((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.extendedInfo) != "undefined" && o.server.extendedInfo !== null && typeof(o.server.extendedInfo.desc) != "undefined" && o.server.extendedInfo.desc !== null) ? o.server.extendedInfo.desc : "")));
		c.push("</p>\n </div>\n");
	}
	c.push("\n <div id=\"server-info-maprotation-container\" class=\"base-box-push\">\n <div class=\"base-box-push-inner\">\n <div id=\"server-info-maprotation-slider-wrapper\">\n <div class=\"server-info-maprotation-title\">\n ");
	c.push(Surface.valOut("Map rotation"));
	c.push("\n </div>\n <div id=\"maprotation-nav-left\" class=\"maprotation-nav sodaSlider-arrow-left\"></div>\n <div id=\"maprotation-nav-right\" class=\"maprotation-nav sodaSlider-arrow-right\"></div>\n <table id=\"maprotation\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"sodaSlider-slider\">\n <tr>\n");
	l_mapsOnServer = S.Modifier.get(o.server.maps, "maps", []);
	l_for_serverguide_showserverinfo_53_46_list = l_mapsOnServer;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_showserverinfo_53_46_list), 0)) {
		for (var l_for_serverguide_showserverinfo_53_46_key in l_for_serverguide_showserverinfo_53_46_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_showserverinfo_53_46_list[l_for_serverguide_showserverinfo_53_46_key])) {
				continue;
			}
			var l_mapRotation = l_for_serverguide_showserverinfo_53_46_list[l_for_serverguide_showserverinfo_53_46_key];
			l_mapInfo = $S.callFunction("common.mapinfo", o.server.game, l_mapRotation.map, b, kwargs);
			l_mapName = S.Modifier.get(l_mapInfo, "name");
			l_mapBubbleInfo = (S.translations[l_mapName] || l_mapName);
			if (S.compat.gt(((typeof(l_mapRotation) != "undefined" && l_mapRotation !== null && typeof(l_mapRotation.mapVariant) != "undefined" && l_mapRotation.mapVariant !== null) ? l_mapRotation.mapVariant : 0), 0)) {
				l_mapBubbleInfo = S.Modifier.concat(S.Modifier.concat(l_mapBubbleInfo, " #"), S.compat.add(l_mapRotation.mapVariant, 1));
			}
			c.push(" <td><img src=\"");
			c.push(Surface.valOut($S.callFunction("base.asset", S.Modifier.get(l_mapInfo, "imageBig"), b, kwargs)));
			c.push("\" alt=\"");
			c.push(Surface.valOut(l_mapBubbleInfo));
			c.push("\" data-tooltip=\"");
			c.push(Surface.valOut(l_mapBubbleInfo));
			c.push("<br>");
			c.push(Surface.valOut($S.callFunction("serverguide.gameServerModeStringLocalized", l_mapRotation.mapMode, o.server.game, b, kwargs)));
			c.push("\" /></td>\n");
		}
	}
	else {
		c.push(" ");
		c.push(Surface.valOut("No maps in map rotation"));
		c.push("\n");
	}
	c.push(" </tr>\n </table>\n </div>\n </div>\n </div>\n <div class=\"base-clear\"></div>\n </div>\n </div>\n");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.showserverinfo", "surface_1_0", "serverguide-show-info", o, b);
	return c.join('');
}
;
;var block_serverguide_urlactions = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('urlactions'));
serverguide.urlactions.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_urlactions;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.urlactions');
	c.push("\n");
	return c.join('');
}
;
serverguide.function_urlaction_show = function(l_args, b, kwargs) {
	var o = {};
	var c = [];
	return S.Modifier.urlformat("/{_section}/{_language}/servers/show/{platform}/{guid}/{slug}/", Surface.urlContext, l_args);
}
;
;var block_serverguide_warsawfilters = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('warsawfilters'));
serverguide.warsawfilters.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_warsawfilters;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.warsawfilters');
	var l_forceExpandedFilter;
	c.push("\n");
	l_forceExpandedFilter = S.Modifier.get(Surface.globalContext, "forceExpandedFilter");
	c.push("\n");
	if ((S.compat.gt(S.Modifier.count(o.servers), 0) && S.compat.neq(l_forceExpandedFilter, 1))) {
		o.showFilters = 0;
	}
	else {
		o.showFilters = 1;
	}
	c.push("<input type=\"hidden\" id=\"serverguide-autobrowse-url\" value=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/getAutoBrowseServers/{platform}/", Surface.urlContext)));
	c.push("\" />\n<input type=\"hidden\" id=\"serverguide-show-url\" value=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/show/{platform}/{guid}/{slug}/", Surface.urlContext, {"guid": "%GUID%"})));
	c.push("?json=1\" />\n<form id=\"serverguide-filter-form\" ");
	if (!(o.showFilters)) {
		c.push("class=\"serverguide-filter-form-contracted\"");
	}
	c.push(" method=\"GET\" action=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/{platform}/", Surface.urlContext)));
	c.push("\">\n");
	c.push(Surface.importTemplate(("base" + ("." + "postChecksum")), o, null, kwargs));
	c.push("\n<input type=\"hidden\" name=\"filtered\" value=\"1\" />\n<input type=\"hidden\" name=\"expand\" value=\"");
	c.push(Surface.valOut(o.showFilters));
	c.push("\" />\n");
	c.push(Surface.importTemplate(("common" + ("." + "focusbar")), o, block_serverguide_warsawfilters_use_19_5, kwargs));
	c.push("</form>");
	return c.join('');
}
;
var block_serverguide_warsawfilters_use_19_5 = new Surface.BlockConfig('common.focusbar', {'content': 'serverguide.warsawfilters._use_19_5_block_content', 'extraInnerClass': 'serverguide.warsawfilters._use_19_5_block_extraInnerClass', 'extraClass': 'serverguide.warsawfilters._use_19_5_block_extraClass'});
serverguide.warsawfilters._use_19_5_block_extraClass = new Surface.Block('serverguide.warsawfilters._use_19_5_block_extraClass');
serverguide.warsawfilters._use_19_5_block_extraClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverguide-filter-width");
	return c.join("");
}
;
serverguide.warsawfilters._use_19_5_block_extraInnerClass = new Surface.Block('serverguide.warsawfilters._use_19_5_block_extraInnerClass');
serverguide.warsawfilters._use_19_5_block_extraInnerClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverguide-filter-inner");
	return c.join("");
}
;
serverguide.warsawfilters.surface_31_17 = new Surface.SingleSurface("serverguide.warsawfilters.surface_31_17");
serverguide.warsawfilters.surface_31_17.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_warsawfilters;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.warsawfilters');
	c.push("<surf:container id=\"serverguide-filterstring\"");
	c.push(">");
	c.push(" <div class=\"serverguide-filterlist-generic\">\n <div id=\"custom-filter-list\">\n <em>");
	c.push(Surface.valOut("Search for Servers"));
	c.push(":</em>\n <div id=\"custom-filter-list-content\"></div>\n <a class=\"serverguide-reset-filter-button\" href=\"");
	c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/clearFilter/{platform}/", Surface.urlContext)));
	c.push("\">");
	c.push(Surface.valOut("Reset to Default"));
	c.push("</a>\n </div>\n </div>\n <span class=\"serverguide-toggler\"></span>\n");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.warsawfilters", "surface_31_17", "serverguide-filterstring", o, b);
	return c.join('');
}
;
serverguide.warsawfilters._use_19_5_block_content = new Surface.Block('serverguide.warsawfilters._use_19_5_block_content');
serverguide.warsawfilters._use_19_5_block_content.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_serverFilterOptions;
	c.push("\n");
	c.push("\n");
	l_serverFilterOptions = $S.callFunction("gamedata.get", 2048, "gameserver", b, kwargs);
	c.push("\n <div id=\"serverguide-filtertoggle\" class=\"serverguide-filtertoggle-");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.showFilters) != "undefined" && o.showFilters !== null) ? o.showFilters : 1)) {
		c.push("expanded");
	}
	else {
		c.push("contracted");
	}
	c.push("\">\n");
	c.push(serverguide.warsawfilters.surface_31_17.render({}, b, kwargs));
	c.push(" <div class=\"serverguide-header-refresh-button\">\n ");
	c.push(Surface.importTemplate(("common" + ("." + "button")), {"title": "Refresh and save filter", "type": "submit", "style": "medium-grey", "extraClass": "serverguide-apply-filter-button"}, null, kwargs));
	c.push("\n </div>\n </div>\n <div id=\"serverguide-filters-container\">\n <div id=\"serverguide-filters\" ");
	if (!(o.showFilters)) {
		c.push("style=\"display:none;\"");
	}
	c.push(">\n <div class=\"filter-col span1\">\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtergameexpansion")), {"gameexpansions": S.Modifier.get(l_serverFilterOptions, "gameexpansions"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filterregion")), {"regions": S.Modifier.get(l_serverFilterOptions, "regions"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filterfreetext")), o, null, kwargs));
	c.push("\n </div>\n <div class=\"filter-col span1\">\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filterpresets")), {"gamepresets": S.Modifier.get(l_serverFilterOptions, "gamepresets"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filterdetails")), {"gamedetails": S.Modifier.get(l_serverFilterOptions, "gamedetails"), "filter": o.filter}, null, kwargs));
	c.push("\n </div>\n <div class=\"filter-col span1 pull1\">\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtergamesize")), {"gamesize": S.Modifier.get(l_serverFilterOptions, "gamesize"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtergameslots")), {"gameslots": S.Modifier.get(l_serverFilterOptions, "gameslots"), "filter": o.filter}, null, kwargs));
	c.push("\n </div>\n <div class=\"filter-col span2 push1\">\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtergamemode")), {"gamemodes": S.Modifier.get(l_serverFilterOptions, "gamemodes"), "filter": o.filter}, null, kwargs));
	c.push("\n");
	c.push(Surface.importTemplate(("serverguide" + ("." + "filtermaps")), {"maps": S.Modifier.get(l_serverFilterOptions, "maps"), "filter": o.filter}, null, kwargs));
	c.push("\n </div>\n </div>\n </div>\n <input type=\"hidden\" name=\"settings\" id=\"serverguide-filter-settings-input\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.settings) != "undefined" && o.filter.settings !== null) ? o.filter.settings : []), "|")));
	c.push("\" />\n <input type=\"hidden\" name=\"regions\" id=\"serverguide-filter-regions-input\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.regions) != "undefined" && o.filter.regions !== null) ? o.filter.regions : []), "|")));
	c.push("\" />\n <input type=\"hidden\" name=\"country\" id=\"serverguide-filter-countries-input\" value=\"");
	c.push(Surface.valOut(S.Modifier.join(((typeof(o) != "undefined" && o !== null && typeof(o.filter) != "undefined" && o.filter !== null && typeof(o.filter.country) != "undefined" && o.filter.country !== null) ? o.filter.country : []), "|")));
	c.push("\" />\n <div id=\"serverguide-apply-filters\" ");
	if (!(o.showFilters)) {
		c.push("style=\"display:none;\"");
	}
	c.push(">\n ");
	c.push(Surface.importTemplate(("common" + ("." + "button")), {"title": "Refresh and save filter", "type": "submit", "style": "medium-grey", "extraClass": "serverguide-apply-filter-button"}, null, kwargs));
	c.push("\n <div id=\"serverguide-filter-count\">\n ");
	c.push(Surface.valOut("Found"));
	c.push(" <span class=\"serverguide-filter-count-amount\">1337</span> ");
	c.push(Surface.valOut("servers"));
	c.push("\n </div>\n <div id=\"serverguide-filter-saved\">");
	c.push(Surface.valOut("Filter saved!"));
	c.push("</div>\n </div>\n");
	return c.join("");
}
;
;var block_serverguide_warsawindex = new Surface.BlockConfig('serverguide.index', {'serverSettings': 'serverguide.warsawindex.block_serverSettings', 'serverguideFilters': 'serverguide.warsawindex.block_serverguideFilters'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('warsawindex'));
serverguide.warsawindex.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_warsawindex;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.warsawindex');
	c.push("\n");
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('serverguide.index', o, b, kwargs);
}
;
serverguide.warsawindex.block_serverguideFilters = new Surface.Block('serverguide.warsawindex.block_serverguideFilters');
serverguide.warsawindex.block_serverguideFilters.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("\n");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.showFilter) != "undefined" && o.showFilter !== null) ? o.showFilter : true)) {
		c.push(" ");
		c.push(Surface.importTemplate(("serverguide" + ("." + "warsawfilters")), o, null, kwargs));
		c.push("\n");
	}
	else {
		c.push(" <div style=\"position: relative;clear:both;padding:16px 0\">\n <a href=\"");
		c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/servers/{platform}/", Surface.urlContext)));
		c.push("\" style=\"font-weight:normal; font-size:12px;\" >");
		c.push(Surface.valOut("View all servers"));
		c.push("</a>\n </div>\n");
	}
	return c.join("");
}
;
serverguide.warsawindex.block_serverSettings = new Surface.Block('serverguide.warsawindex.block_serverSettings');
serverguide.warsawindex.block_serverSettings.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "warsawserverinfo")), o, null, kwargs));
	c.push("\n");
	return c.join("");
}
;
;var block_serverguide_warsawserverinfo = new Surface.BlockConfig('', {});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('warsawserverinfo'));
serverguide.warsawserverinfo.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_warsawserverinfo;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.warsawserverinfo');
	c.push("\n<div id=\"serverguide-show-column-rail\" class=\"base-secondary-right-column\">\n<div id=\"serverguide-show-column\">\n");
	c.push(serverguide.warsawserverinfo.surface_4_1.render({"favGuids": ((typeof(o) != "undefined" && o !== null && typeof(o.favGuids) != "undefined" && o.favGuids !== null) ? o.favGuids : null), "friends": ((typeof(o) != "undefined" && o !== null && typeof(o.friends) != "undefined" && o.friends !== null) ? o.friends : null), "loading": ((typeof(o) != "undefined" && o !== null && typeof(o.loading) != "undefined" && o.loading !== null) ? o.loading : null), "players": ((typeof(o) != "undefined" && o !== null && typeof(o.players) != "undefined" && o.players !== null) ? o.players : null), "serverinfo": ((typeof(o) != "undefined" && o !== null && typeof(o.serverinfo) != "undefined" && o.serverinfo !== null) ? o.serverinfo : null), "session": {"isLoggedIn": ((typeof(o) != "undefined" && o !== null && typeof(o.session) != "undefined" && o.session !== null && typeof(o.session.isLoggedIn) != "undefined" && o.session.isLoggedIn !== null) ? o.session.isLoggedIn : null)}}, b, kwargs));
	c.push("</div>\n</div>\n");
	return c.join('');
}
;
var block_serverguide_warsawserverinfo_use_133_21 = new Surface.BlockConfig('common.secondarycontent', {'content': 'serverguide.warsawserverinfo._use_133_21_block_content', 'title': 'serverguide.warsawserverinfo._use_133_21_block_title', 'extraClass': 'serverguide.warsawserverinfo._use_133_21_block_extraClass'});
var block_serverguide_warsawserverinfo_use_105_21 = new Surface.BlockConfig('common.secondarycontent', {'content': 'serverguide.warsawserverinfo._use_105_21_block_content', 'title': 'serverguide.warsawserverinfo._use_105_21_block_title', 'extraClass': 'serverguide.warsawserverinfo._use_105_21_block_extraClass'});
serverguide.warsawserverinfo.surface_4_1 = new Surface.SingleSurface("serverguide.warsawserverinfo.surface_4_1");
serverguide.warsawserverinfo._use_105_21_block_extraClass = new Surface.Block('serverguide.warsawserverinfo._use_105_21_block_extraClass');
serverguide.warsawserverinfo._use_105_21_block_extraClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverinfo-players-box");
	return c.join("");
}
;
serverguide.warsawserverinfo._use_105_21_block_title = new Surface.Block('serverguide.warsawserverinfo._use_105_21_block_title');
serverguide.warsawserverinfo._use_105_21_block_title.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(Surface.valOut(S.Modifier.count(o.friends)));
	c.push(" ");
	c.push(Surface.valOut(S.Modifier.pluralize(S.Modifier.count(o.friends), "Friend", "Friends")));
	return c.join("");
}
;
serverguide.warsawserverinfo._use_105_21_block_content = new Surface.Block('serverguide.warsawserverinfo._use_105_21_block_content');
serverguide.warsawserverinfo._use_105_21_block_content.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_for_serverguide_warsawserverinfo_112_29_isEven;
	var l_for_serverguide_warsawserverinfo_112_29_list;
	var l_for_serverguide_warsawserverinfo_112_29_iteration;
	var l_for_serverguide_warsawserverinfo_112_29_isOdd;
	l_for_serverguide_warsawserverinfo_112_29_list = o.friends;
	l_for_serverguide_warsawserverinfo_112_29_iteration = 0;
	if (S.compat.gt(S.Modifier.count(l_for_serverguide_warsawserverinfo_112_29_list), 0)) {
		for (var l_for_serverguide_warsawserverinfo_112_29_key in l_for_serverguide_warsawserverinfo_112_29_list) {
			if (!Surface.isValidLoopItem(l_for_serverguide_warsawserverinfo_112_29_list[l_for_serverguide_warsawserverinfo_112_29_key])) {
				continue;
			}
			var l_friend = l_for_serverguide_warsawserverinfo_112_29_list[l_for_serverguide_warsawserverinfo_112_29_key];
			l_for_serverguide_warsawserverinfo_112_29_iteration = S.compat.add(l_for_serverguide_warsawserverinfo_112_29_iteration, 1);
			l_for_serverguide_warsawserverinfo_112_29_isEven = S.compat.eq(Surface.modulo(l_for_serverguide_warsawserverinfo_112_29_iteration, 2), 0);
			l_for_serverguide_warsawserverinfo_112_29_isOdd = !(l_for_serverguide_warsawserverinfo_112_29_isEven);
			c.push(" <div class=\"serverguide-show-playerrow serverguide-show-friendrow\">\n <span ");
			if (l_for_serverguide_warsawserverinfo_112_29_isOdd) {
				c.push("class=\"serverguide-show-player-odd\"");
			}
			c.push(">\n ");
			c.push(Surface.importTemplate(("ui" + ("." + "avatar")), {"user": l_friend, "size": 22}, null, kwargs));
			c.push("\n <div class=\"serverguide-show-player\">\n <div class=\"serverguide-show-playerlink-container\">\n <a class=\"serverguide-show-playerlink\" href=\"");
			c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/user/{username}/", Surface.urlContext, {"username": l_friend.username})));
			c.push("\">");
			c.push(Surface.valOut(l_friend.username));
			c.push("</a>\n </div>\n </div>\n </span>\n </div>\n");
		}
	}
	c.push(" <div style=\"clear:both;\"></div>\n");
	return c.join("");
}
;
serverguide.warsawserverinfo._use_133_21_block_extraClass = new Surface.Block('serverguide.warsawserverinfo._use_133_21_block_extraClass');
serverguide.warsawserverinfo._use_133_21_block_extraClass.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push("serverinfo-players-box");
	return c.join("");
}
;
serverguide.warsawserverinfo._use_133_21_block_title = new Surface.Block('serverguide.warsawserverinfo._use_133_21_block_title');
serverguide.warsawserverinfo._use_133_21_block_title.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	return c.join("");
}
;
serverguide.warsawserverinfo._use_133_21_block_content = new Surface.Block('serverguide.warsawserverinfo._use_133_21_block_content');
serverguide.warsawserverinfo._use_133_21_block_content.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_soldierSlots;
	l_soldierSlots = $S.callFunction("serverguide.getServerSlots", o.serverinfo, 2, b, kwargs);
	c.push(" <div id=\"serverinfo-players-all-wrapper\"></div>\n <div id=\"serverinfo-players-all-view\" class=\"base-link\" data-numPlayers=\"");
	c.push(Surface.valOut(l_soldierSlots.current));
	c.push("\" data=\"");
	c.push(Surface.valOut(o.serverinfo.guid));
	c.push("\">");
	c.push(Surface.valOut("Show"));
	c.push(" ");
	c.push(Surface.valOut(S.Modifier.pluralize(l_soldierSlots.current, "Player", "all players")));
	c.push("</div>\n <div id=\"serverinfo-players-all-hide\" class=\"base-link\">");
	c.push(Surface.valOut("Hide"));
	c.push(" ");
	c.push(Surface.valOut(S.Modifier.pluralize(l_soldierSlots.current, "Player", "all players")));
	c.push("</div>\n");
	return c.join("");
}
;
serverguide.warsawserverinfo.surface_4_1.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_warsawserverinfo;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.warsawserverinfo');
	c.push("<surf:container id=\"serverguide-show\"");
	c.push(">");
	var l_favGuids;
	var l_soldierSlots;
	var l_isFavorite;
	var l_session;
	var l_mapname;
	var l_mapinfo;
	o.players = o.players;
	c.push("\n <div class=\"serverguide-");
	if (!(((typeof(o) != "undefined" && o !== null && typeof(o.serverinfo) != "undefined" && o.serverinfo !== null && typeof(o.serverinfo.online) != "undefined" && o.serverinfo.online !== null) ? o.serverinfo.online : false))) {
		c.push("offline");
	}
	else {
		c.push("online");
	}
	c.push("-info\">\n");
	l_session = S.Modifier.get(Surface.globalContext, "session");
	l_favGuids = S.Modifier.get(Surface.globalContext, "favGuids");
	if (((typeof(o) != "undefined" && o !== null && typeof(o.loading) != "undefined" && o.loading !== null) ? o.loading : false)) {
		c.push(" <div class=\"loading\"></div>\n");
	}
	else {
		if ((typeof(o) != "undefined" && o !== null && typeof(o.serverinfo) != "undefined" && o.serverinfo !== null)) {
			l_isFavorite = S.Modifier.contains(l_favGuids, S.Modifier.get(o.serverinfo, "guid", ""));
			l_mapinfo = $S.callFunction("common.mapinfo", o.serverinfo.game, o.serverinfo.map, b, kwargs);
			l_mapname = S.Modifier.get(l_mapinfo, "name");
			c.push("\n");
			l_soldierSlots = $S.callFunction("serverguide.getServerSlots", o.serverinfo, 2, b, kwargs);
			c.push("\n <span class=\"");
			c.push(Surface.valOut($S.callFunction("common.getGameIconCSS", o.serverinfo.game, o.serverinfo.platform, o.serverinfo.gameExpansions, b, kwargs)));
			c.push("\"></span>\n <h1 id=\"selected-server-name\" class=\"wfont\">\n <a href=\"");
			c.push(Surface.valOut($S.callFunction("common.showServerUrlByServer", o.serverinfo, b, kwargs)));
			c.push("\">\n ");
			c.push(Surface.valOut(o.serverinfo.name));
			c.push("\n </a>\n </h1>\n <div style=\"clear: both;\"></div>\n");
			if (o.serverinfo.online) {
				c.push(" <div id=\"serverguide-show-serverjoin\">\n <a href=\"");
				c.push(Surface.valOut($S.callFunction("common.showServerUrlByServer", o.serverinfo, b, kwargs)));
				c.push("\"\n class=\"base-button-arrow-almost-gigantic\n ");
				if (!($S.callFunction("serverguide.enableJoinButton", o.serverinfo, b, kwargs))) {
					c.push(" disabled");
				}
				c.push("\"\n data-bind-action=\"join-mp-gameserver\"\n data-role=\"");
				c.push(Surface.valOut(1));
				c.push("\"\n data-guid=\"");
				c.push(Surface.valOut(o.serverinfo.guid));
				c.push("\"\n data-game=\"");
				c.push(Surface.valOut(o.serverinfo.game));
				c.push("\"\n data-platform=\"");
				c.push(Surface.valOut(o.serverinfo.platform));
				c.push("\"\n data-gameid=\"");
				c.push(Surface.valOut(o.serverinfo.gameId));
				c.push("\"\n data-ip=\"");
				c.push(Surface.valOut(o.serverinfo.ip));
				c.push("\"\n data-port=\"");
				c.push(Surface.valOut(o.serverinfo.port));
				c.push("\"\n data-track=\"serverbrowser.server.selected.join\">\n ");
				c.push(Surface.valOut("Join server"));
				c.push("\n </a>\n <div class=\"base-clear\"></div>\n </div>\n <input type=\"text\" class=\"serverguide-server-link-field base-no-ajax\"\n value=\"");
				c.push(Surface.valOut($S.callFunction("serverguide.showAbsoluteServerUrlByServer", o.serverinfo, b, kwargs)));
				c.push("\" />\n <div style=\"clear: both;\"></div>\n <div id=\"selected-server-mapimage\">\n <img src=\"");
				c.push(Surface.valOut($S.callFunction("base.asset", S.Modifier.get(l_mapinfo, "imageBig"), b, kwargs)));
				c.push("\" alt=\"");
				c.push(Surface.valOut(S.Modifier.get(l_mapinfo, "name")));
				c.push("\" width=146 height=79 />\n </div>\n <div class=\"selected-server-info-wrapper\">\n");
				if (((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false)) {
					c.push(" <div class=\"serverguide-add-favorite\">\n <form action=\"");
					c.push(Surface.valOut(S.Modifier.urlformat("/{_section}/{_language}/gameserverbookmark/toggleFavourite/", Surface.urlContext)));
					c.push("\">\n <input type=\"hidden\" name=\"guid\" value=\"");
					c.push(Surface.valOut(o.serverinfo.guid));
					c.push("\" />\n </form>\n <div class=\"serverguide-add-favorite-toggle ");
					if (l_isFavorite) {
						c.push("isFavorite");
					}
					c.push("\" ><span>");
					if (l_isFavorite) {
						c.push(Surface.valOut("Favorite"));
					}
					else {
						c.push(Surface.valOut("Add as favorite"));
					}
					c.push("</span></div>\n <div class=\"serverguide-add-favorite-loading\">\n <img width=\"16\" height=\"16\" src=\"");
					c.push(Surface.valOut($S.callFunction("base.asset", "/public/base/shared/ajax-loader.gif", b, kwargs)));
					c.push("\" alt=\"");
					c.push(Surface.valOut("Loading..."));
					c.push("\" />\n </div>\n </div>\n <div class=\"base-clear\"></div>\n");
				}
				c.push("\n <ul id=\"selected-server-info\">\n <li>");
				c.push(Surface.valOut(l_soldierSlots.current));
				c.push(" / ");
				c.push(Surface.valOut(l_soldierSlots.max));
				c.push(" ");
				c.push(Surface.valOut("Players"));
				c.push("</li>\n <li>");
				c.push(Surface.valOut((S.translations[l_mapname] || l_mapname)));
				c.push("</li>\n <li>");
				c.push(Surface.valOut($S.callFunction("serverguide.gameServerModeStringLocalized", o.serverinfo.mapMode, o.serverinfo.game, b, kwargs)));
				c.push("</li>\n </ul>\n </div>\n <div style=\"clear: both;\"></div>\n");
				if ($S.callFunction("serverguide.liveScoreboardEnabled", o.serverinfo.game, o.serverinfo.platform, b, kwargs)) {
					c.push(" ");
					c.push(Surface.importTemplate(("serverguide" + ("." + "serverinfoscore")), o, null, kwargs));
					c.push("\n");
				}
				c.push("\n <div style=\"clear: both;\"></div>\n <div id=\"serverinfo-more-info\">\n <div id=\"selected-server-settings\">\n <h2>");
				c.push(Surface.valOut("Server settings"));
				c.push("</h2>\n <ul id=\"server-settings\">\n <li>");
				c.push(Surface.valOut("Ranked"));
				c.push("<span class=\"selected-server-setting selected-server-setting-ranked selected-server-setting-ranked-");
				if (o.serverinfo.ranked) {
					c.push("on");
				}
				else {
					c.push("off");
				}
				c.push("\">");
				if (o.serverinfo.ranked) {
					c.push(Surface.valOut("On"));
				}
				else {
					c.push(Surface.valOut("Off"));
				}
				c.push("</span></li>\n <li>");
				c.push(Surface.valOut("Preset"));
				c.push("<span class=\"selected-server-setting selected-server-setting-type selected-server-setting-type-");
				c.push(Surface.valOut(S.Modifier.lower($S.callFunction("serverguide.gameServerPresetStringNoLocalization", o.serverinfo.preset, b, kwargs))));
				c.push("\">");
				c.push(Surface.valOut($S.callFunction("serverguide.gameServerPresetStringLocalized", o.serverinfo.preset, b, kwargs)));
				c.push("</span></li>\n <li>Punkbuster<span class=\"selected-server-setting selected-server-setting-pb selected-server-setting-pb-");
				if (o.serverinfo.punkbuster) {
					c.push("on");
				}
				else {
					c.push("off");
				}
				c.push("\">");
				if (o.serverinfo.punkbuster) {
					c.push(Surface.valOut("On"));
				}
				else {
					c.push(Surface.valOut("Off"));
				}
				c.push("</span></li>\n <li>");
				c.push(Surface.valOut("Password"));
				c.push("<span class=\"selected-server-setting selected-server-setting-password selected-server-setting-password-");
				if (o.serverinfo.hasPassword) {
					c.push("on");
				}
				else {
					c.push("off");
				}
				c.push("\">");
				if (o.serverinfo.hasPassword) {
					c.push(Surface.valOut("On"));
				}
				else {
					c.push(Surface.valOut("Off"));
				}
				c.push("</span></li>\n </ul>\n </div>\n </div>\n <div style=\"clear: both;\"></div>\n");
				if ((S.compat.gt(S.Modifier.count(o.friends), 0) && ((typeof(l_session) != "undefined" && l_session !== null && typeof(l_session.isLoggedIn) != "undefined" && l_session.isLoggedIn !== null) ? l_session.isLoggedIn : false))) {
					c.push(Surface.importTemplate(("common" + ("." + "secondarycontent")), o, block_serverguide_warsawserverinfo_use_105_21, kwargs));
				}
				c.push("\n");
				if (S.compat.gt(l_soldierSlots.current, 0)) {
					c.push(" <div style=\"clear:both;\"></div>\n");
					c.push(Surface.importTemplate(("common" + ("." + "secondarycontent")), o, block_serverguide_warsawserverinfo_use_133_21, kwargs));
				}
				c.push("\n <div style=\"clear:both;\"></div>\n");
			}
			else {
				c.push(" <div class=\"common-secondary-column-line\"></div>\n <h1 id=\"serverinfo-serveroffline\">");
				c.push(Surface.valOut("Server is offline"));
				c.push("</h1>\n <div class=\"common-secondary-column-line\"></div>\n");
			}
			c.push(" ");
		}
		c.push("\n");
	}
	c.push("\n </div>\n");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.warsawserverinfo", "surface_4_1", "serverguide-show", o, b);
	return c.join('');
}
;
;var block_serverguide_warsawshow = new Surface.BlockConfig('serverguide.show', {'serverSettings': 'serverguide.warsawshow.block_serverSettings', 'mapRotation': 'serverguide.warsawshow.block_mapRotation', 'serverInfoShort': 'serverguide.warsawshow.block_serverInfoShort', 'serverHeader': 'serverguide.warsawshow.block_serverHeader', 'scoreBoard': 'serverguide.warsawshow.block_scoreBoard'});
Surface.initComponent('serverguide');
serverguide.addTemplate(new Surface.Template('warsawshow'));
serverguide.warsawshow.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_warsawshow;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.warsawshow');
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	c.push("\n");
	return Surface.importTemplate('serverguide.show', o, b, kwargs);
}
;
serverguide.warsawshow.block_serverHeader = new Surface.Block('serverguide.warsawshow.block_serverHeader');
serverguide.warsawshow.block_serverHeader.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "showserverheader")), {"server": o.server}, null, kwargs));
	c.push("\n");
	return c.join("");
}
;
serverguide.warsawshow.surface_26_35 = new Surface.SingleSurface("serverguide.warsawshow.surface_26_35");
serverguide.warsawshow.surface_26_35.render = function(o, b, kwargs) {
	var c = [];
	b = b || block_serverguide_warsawshow;
	kwargs = kwargs || {};
	Surface.Renderer.addUsedComponent('serverguide');
	Surface.Renderer.addUsedTemplate('serverguide.warsawshow');
	c.push("<surf:container id=\"serverguide-show-info-ping\"");
	c.push(">");
	c.push(Surface.valOut(o.server.ping));
	c.push(" ms");
	c.push("</surf:container>");
	Surface.Renderer.addSurfaceState("serverguide.warsawshow", "surface_26_35", "serverguide-show-info-ping", o, b);
	return c.join('');
}
;
serverguide.warsawshow.block_serverInfoShort = new Surface.Block('serverguide.warsawshow.block_serverInfoShort');
serverguide.warsawshow.block_serverInfoShort.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	var l_soldierSlots;
	var l_queueSlots;
	c.push("\n <table id=\"server-info-short\">\n <thead>\n <tr>\n <th>");
	c.push(Surface.valOut("Players"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Ping"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Ranked"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Preset"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Punkbuster"));
	c.push("</th>\n <th>");
	c.push(Surface.valOut("Password"));
	c.push("</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n");
	l_soldierSlots = $S.callFunction("serverguide.getServerSlots", o.server, 2, b, kwargs);
	l_queueSlots = $S.callFunction("serverguide.getServerSlots", o.server, 1, b, kwargs);
	c.push(" <td id=\"server-info-players\">");
	c.push(Surface.valOut(l_soldierSlots.current));
	c.push(" / ");
	c.push(Surface.valOut(l_soldierSlots.max));
	if (S.compat.gt(l_queueSlots.current, 0)) {
		c.push(" [<abbr title=\"");
		c.push(Surface.valOut(l_queueSlots.current));
		c.push(" ");
		c.push(Surface.valOut("player(s) queued"));
		c.push("\">");
		c.push(Surface.valOut(l_queueSlots.current));
		c.push("</abbr>]");
	}
	c.push("</td>\n <td id=\"server-info-ping\">");
	c.push(serverguide.warsawshow.surface_26_35.render({"server": {"ping": ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.ping) != "undefined" && o.server.ping !== null) ? o.server.ping : null)}}, b, kwargs));
	c.push("</td>\n <td id=\"server-info-ranked\" ");
	if (!(o.server.ranked)) {
		c.push("class=\"server-info-off\"");
	}
	c.push(">");
	if (o.server.ranked) {
		c.push(Surface.valOut("On"));
	}
	else {
		c.push(Surface.valOut("Off"));
	}
	c.push("</td>\n <td id=\"server-info-preset\"");
	if (S.compat.neq(((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.preset) != "undefined" && o.server.preset !== null) ? o.server.preset : 0), 2)) {
		c.push(" class=\"server-info-off\"");
	}
	c.push(">");
	c.push(Surface.valOut($S.callFunction("serverguide.gameServerPresetStringLocalized", ((typeof(o) != "undefined" && o !== null && typeof(o.server) != "undefined" && o.server !== null && typeof(o.server.preset) != "undefined" && o.server.preset !== null) ? o.server.preset : 1), b, kwargs)));
	c.push("</td>\n <td id=\"server-info-punkbuster\"");
	if (!(o.server.punkbuster)) {
		c.push(" class=\"server-info-off\"");
	}
	c.push(">");
	if (o.server.punkbuster) {
		c.push(Surface.valOut("On"));
	}
	else {
		c.push(Surface.valOut("Off"));
	}
	c.push("</td>\n <td id=\"server-info-password\" class=\"last");
	if (!(o.server.hasPassword)) {
		c.push(" server-info-off");
	}
	c.push("\">");
	if (o.server.hasPassword) {
		c.push(Surface.valOut("On"));
	}
	else {
		c.push(Surface.valOut("Off"));
	}
	c.push("</td>\n </tr>\n </tbody>\n</table>\n");
	return c.join("");
}
;
serverguide.warsawshow.block_serverSettings = new Surface.Block('serverguide.warsawshow.block_serverSettings');
serverguide.warsawshow.block_serverSettings.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "serversettings")), {"server": o.server}, null, kwargs));
	c.push("\n");
	return c.join("");
}
;
serverguide.warsawshow.block_mapRotation = new Surface.Block('serverguide.warsawshow.block_mapRotation');
serverguide.warsawshow.block_mapRotation.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "maprotation")), {"server": o.server}, null, kwargs));
	c.push("\n");
	return c.join("");
}
;
serverguide.warsawshow.block_scoreBoard = new Surface.Block('serverguide.warsawshow.block_scoreBoard');
serverguide.warsawshow.block_scoreBoard.render = function(o, b, kwargs) {
	var c = [];
	kwargs = kwargs || {};
	c.push(" <div id=\"server-players-list\">\n ");
	c.push(Surface.importTemplate(("serverguide" + ("." + "scoreboard")), {"server": o.server}, null, kwargs));
	c.push("\n </div>\n");
	return c.join("");
}
;
;